types/
├── base.ts
│       // src/types/base.ts
│       
│       export interface BaseEntity {
│         id: string;
│         createdAt: Date;
│         updatedAt: Date;
│       }
│       
│       export type Status = 'not-started' | 'active' | 'in-progress' | 'completed' | 'on-hold' | 'cancelled';
│       export type Priority = 'low' | 'medium' | 'high';
│       // export type TodoListType = 'daily' | 'weekly' | 'monthly'; // Extend as needed
├── dialogs/
│   ├── baseDialogProps.ts
│   │       // src/types/dialogs/baseDialogProps.ts
│   │       import { ReactNode } from 'react';
│   │       
│   │       export interface BaseDialogProps {
│   │         title: string;
│   │         description?: string;
│   │         trigger: ReactNode;
│   │         isOpen?: boolean;
│   │         onOpenChange?: (open: boolean) => void;
│   │         children: ReactNode;
│   │         className?: string;
│   │       }
│   ├── confirmDialogProps.ts
│   │       // src/types/dialogs/confirmDialogProps.ts
│   │       import { BaseDialogProps } from './baseDialogProps';
│   │       
│   │       export interface ConfirmDialogProps extends BaseDialogProps {
│   │         confirmLabel?: string;
│   │         cancelLabel?: string;
│   │         onConfirm: () => Promise<void>;
│   │         variant?: 'default' | 'destructive';
│   │       }
│   ├── formDialogProps.ts
│   │       // src/types/dialogs/formDialogProps.ts
│   │       import { BaseDialogProps } from './baseDialogProps';
│   │       import { UseFormReturn } from '../forms';
│   │       
│   │       export interface FormDialogProps<T extends Record<string, any>> extends BaseDialogProps {
│   │         form: UseFormReturn<T>;
│   │         submitLabel?: string;
│   │         cancelLabel?: string;
│   │         isSubmitting?: boolean;
│   │         onSubmit: (values: T) => Promise<void>;
│   │       }
│   └── index.ts
│           // src/types/dialogs/index.ts
│           export * from './baseDialogProps';
│           export * from './confirmDialogProps';
│           export * from './formDialogProps';
├── forms/
│   ├── base/
│   │   ├── baseFormProps.ts
│   │   │       import { FieldConfig } from "../fields";
│   │   │       
│   │   │       export interface BaseFormProps {
│   │   │           title: string;
│   │   │           description?: string;
│   │   │           triggerButton: {
│   │   │             label: string;
│   │   │             icon?: React.ReactNode;
│   │   │           };
│   │   │           fields: FieldConfig[];
│   │   │           onSubmit: (data: Record<string, any>) => Promise<void>;
│   │   │           defaultValues?: Record<string, any>;
│   │   │           submitLabel?: string;
│   │   │         }
│   │   ├── formConfig.ts
│   │   │       
│   │   │       // src/types/forms/formConfig.ts
│   │   │       export interface FormConfig<T> {
│   │   │           initialValues: T;
│   │   │           onSubmit: (values: T) => Promise<void>;
│   │   │           validate?: (values: T) => Record<string, string>;
│   │   │           validateOnChange?: boolean;
│   │   │           validateOnBlur?: boolean;
│   │   │         }
│   │   ├── formHandlers.ts
│   │   │       // src/types/forms/formHandlers.ts
│   │   │       export interface FormHandlers<T> {
│   │   │           handleChange: (
│   │   │             e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
│   │   │           ) => void;
│   │   │           
│   │   │           handleBlur: (
│   │   │             e: React.FocusEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
│   │   │           ) => void;
│   │   │           
│   │   │           setFieldValue: (field: keyof T, value: any) => void;
│   │   │           
│   │   │           setFieldError: (field: keyof T, error: string) => void;
│   │   │           
│   │   │           setFieldTouched: (field: keyof T, isTouched?: boolean) => void;
│   │   │           
│   │   │           handleSubmit: (e: React.FormEvent<HTMLFormElement>) => Promise<void>;
│   │   │           
│   │   │           resetForm: () => void;
│   │   │         }
│   │   ├── formState.ts
│   │   │       // src/types/forms/formState.ts
│   │   │       export interface FormState<T> {
│   │   │           values: T;
│   │   │           errors: Record<string, string>;
│   │   │           isSubmitting: boolean;
│   │   │           touched: Record<keyof T, boolean>;
│   │   │           isDirty: boolean;
│   │   │         }
│   │   ├── index.ts
│   │   │       // src/types/forms/base/index.ts
│   │   │       export * from './baseFormProps';
│   │   │       export * from './formConfig';
│   │   │       export * from './formState';
│   │   │       export * from './formHandlers';
│   │   │       export * from './useFormReturn';
│   │   └── useFormReturn.ts
│   │           import { FormState } from "./formState";
│   │           import { FormHandlers } from "./formHandlers";
│   │           
│   │           // src/types/forms/useFormReturn.ts
│   │           export interface UseFormReturn<T> extends FormState<T>, FormHandlers<T> {
│   │               // Additional utility properties
│   │               isValid: boolean;
│   │               submitCount: number;
│   │               
│   │               // Additional utility methods
│   │               validateForm: () => Promise<Record<string, string>>;
│   │               validateField: (field: keyof T) => Promise<string | undefined>;
│   │               setValues: (values: T) => void;
│   │               setErrors: (errors: Record<string, string>) => void;
│   │               setTouched: (touched: Record<keyof T, boolean>) => void;
│   │             }
│   │             
│   ├── fields/
│   │   ├── buttonConfig.ts
│   │   │       // src/types/forms/fields/buttonConfig.ts
│   │   │       
│   │   │       // Button style variants
│   │   │       export type ButtonVariant = 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
│   │   │       export type ButtonSize = 'default' | 'sm' | 'lg' | 'icon';
│   │   │       export type ButtonColor = 'blue' | 'green' | 'yellow' | 'purple' | 'indigo';
│   │   │       
│   │   │       // Base button configuration
│   │   │       export interface BaseButtonConfig {
│   │   │         label: string;
│   │   │         variant?: ButtonVariant;
│   │   │         size?: ButtonSize;
│   │   │         color?: ButtonColor;
│   │   │         icon?: React.ReactNode;
│   │   │         disabled?: boolean;
│   │   │         className?: string;
│   │   │       }
│   │   │       
│   │   │       // Form buttons configuration
│   │   │       export interface FormButtonsConfig {
│   │   │         submit: BaseButtonConfig;
│   │   │         cancel?: BaseButtonConfig;
│   │   │         reset?: BaseButtonConfig;
│   │   │       }
│   │   │       
│   │   │       // Form buttons props (for the component)
│   │   │       export interface FormButtonsProps {
│   │   │         config?: FormButtonsConfig;
│   │   │         onCancel?: () => void;
│   │   │         onReset?: () => void;
│   │   │         isSubmitting?: boolean;
│   │   │         submitText?: string;
│   │   │         cancelText?: string;
│   │   │         color?: ButtonColor;
│   │   │         disabled?: boolean;
│   │   │         className?: string;
│   │   │       }
│   │   │       
│   │   │       // Form buttons state
│   │   │       export interface FormButtonsState {
│   │   │         isSubmitting: boolean;
│   │   │         isValid: boolean;
│   │   │         isDirty: boolean;
│   │   │       }
│   │   ├── fieldConfig.ts
│   │   │       // src/types/forms/fields/fieldConfig.ts
│   │   │       
│   │   │       // Base field types supported by the form components
│   │   │       export type FieldType = 'text' | 'textarea' | 'select' | 'number' | 'date' | 'datetime-local';
│   │   │       
│   │   │       // Option type for select fields
│   │   │       export interface SelectOption {
│   │   │         value: string;
│   │   │         label: string;
│   │   │       }
│   │   │       
│   │   │       // Base properties shared by all field types
│   │   │       export interface BaseFieldConfig {
│   │   │         name: string;
│   │   │         label: string;  // Making label required for all field types
│   │   │         type: FieldType;
│   │   │         required?: boolean;
│   │   │         placeholder?: string;
│   │   │         disabled?: boolean;
│   │   │         className?: string;
│   │   │         validate?: (value: any) => string | undefined;
│   │   │       }
│   │   │       
│   │   │       // Text field specific configuration
│   │   │       export interface TextFieldConfig extends BaseFieldConfig {
│   │   │         type: 'text';
│   │   │         minLength?: number;
│   │   │         maxLength?: number;
│   │   │         pattern?: string;
│   │   │       }
│   │   │       
│   │   │       // Textarea field specific configuration
│   │   │       export interface TextAreaFieldConfig extends BaseFieldConfig {
│   │   │         type: 'textarea';
│   │   │         rows?: number;
│   │   │         minLength?: number;
│   │   │         maxLength?: number;
│   │   │       }
│   │   │       
│   │   │       // Select field specific configuration
│   │   │       export interface SelectFieldConfig extends BaseFieldConfig {
│   │   │         type: 'select';
│   │   │         options: SelectOption[];
│   │   │         multiple?: boolean;
│   │   │       }
│   │   │       
│   │   │       // Number field specific configuration
│   │   │       export interface NumberFieldConfig extends BaseFieldConfig {
│   │   │         type: 'number';
│   │   │         min?: number;
│   │   │         max?: number;
│   │   │         step?: number;
│   │   │       }
│   │   │       
│   │   │       // Date field specific configuration
│   │   │       export interface DateFieldConfig extends BaseFieldConfig {
│   │   │         type: 'date' | 'datetime-local';
│   │   │         min?: string; // ISO date string
│   │   │         max?: string; // ISO date string;
│   │   │       }
│   │   │       
│   │   │       // Union type of all possible field configurations
│   │   │       export type FieldConfig = 
│   │   │         | TextFieldConfig 
│   │   │         | TextAreaFieldConfig 
│   │   │         | SelectFieldConfig 
│   │   │         | NumberFieldConfig 
│   │   │         | DateFieldConfig;
│   │   │       
│   │   │       // Field value type based on field type
│   │   │       export type FieldValue<T extends FieldConfig> = 
│   │   │         T extends TextFieldConfig | TextAreaFieldConfig ? string :
│   │   │         T extends SelectFieldConfig ? (T['multiple'] extends true ? string[] : string) :
│   │   │         T extends NumberFieldConfig ? number :
│   │   │         T extends DateFieldConfig ? string :
│   │   │         never;
│   │   │       
│   │   ├── fieldProps.ts
│   │   │       // src/types/forms/fields/fieldProps.ts
│   │   │       import { FieldConfig } from "./fieldConfig";
│   │   │       
│   │   │       export interface FormFieldProps {
│   │   │           field: FieldConfig;
│   │   │           value: any;
│   │   │           onChange: (name: string, value: any) => void;
│   │   │           onBlur?: (name: string) => void;
│   │   │           error?: string;
│   │   │           touched?: boolean;
│   │   │         }
│   │   │         
│   │   │         // Form field wrapper component props
│   │   │         export interface FormFieldWrapperProps {
│   │   │           label: string;
│   │   │           required?: boolean;
│   │   │           error?: string;
│   │   │           children: React.ReactNode;
│   │   │           className?: string;
│   │   │         }
│   │   │         
│   │   └── index.ts
│   │           export * from './fieldConfig';
│   │           export * from './fieldProps';
│   │           export * from './buttonConfig';
│   └── index.ts
│           export * from './base';
│           export * from './fields';
├── index.ts
│       // src/types/index.ts
│       
│       export * from './base';
│       export * from './project';
│       export * from './objective';
│       export * from './task';
│       export * from './todo';
│       export * from './time';
│       export * from './forms/base';
│       export * from './forms/fields';
│       export * from './dialogs';
│       export * from "./timeline";
├── objective/
│   ├── index.ts
│   │       // src/types/objective/index.ts
│   │       
│   │       export * from './objective';
│   │       export * from './objectiveForm';
│   │       export * from './objectiveProgress';
│   ├── objective.ts
│   │       // src/types/objective/objective.ts
│   │       
│   │       import { BaseEntity } from '../base';
│   │       import { Project } from '../project/project';
│   │       import { Task } from '../task/task';
│   │       import { Status } from '../base';
│   │       
│   │       export interface Objective extends BaseEntity {
│   │         name: string;
│   │         description?: string;
│   │         startDate?: Date;
│   │         dueDate?: Date;
│   │         status: Status;
│   │         estimatedHours?: number;
│   │         projectId: string;
│   │         project?: Project;
│   │         tasks?: Task[];
│   │       }
│   ├── objectiveForm.ts
│   │       // src/types/objective/objectiveForm.ts
│   │       import { Status } from '../base';
│   │       
│   │       export interface ObjectiveFormData {
│   │         name: string;
│   │         description?: string;
│   │         projectId: string;
│   │         startDate?: string; // ISO string
│   │         dueDate?: string;   // ISO string
│   │         estimatedHours?: string; // Handle as string, convert to number
│   │         status: Status; // Added status
│   │       }
│   └── objectiveProgress.ts
│           // src/types/objective/objectiveProgress.ts
│           
│           export interface ObjectiveProgress {
│             totalTasks: number;
│             completedTasks: number;
│             progressPercentage: number;
│             onTrackTasks: number;
│             delayedTasks: number;
│           }
├── project/
│   ├── index.ts
│   │       // src/types/project/index.ts
│   │       
│   │       export * from './project';
│   │       export * from './projectForm';
│   │       export * from './projectStats';
│   ├── project.ts
│   │       // src/types/project/project.ts
│   │       
│   │       import { BaseEntity } from '../base';
│   │       import { Objective } from '../objective/objective';
│   │       import { Task } from '../task/task';
│   │       import { Status } from '../base';
│   │       
│   │       export interface Project extends BaseEntity {
│   │         name: string;
│   │         description?: string;
│   │         startDate?: Date;
│   │         dueDate?: Date;
│   │         status: Status;
│   │         estimatedHours?: number;
│   │         objectives?: Objective[];
│   │         tasks?: Task[];
│   │       }
│   ├── projectForm.ts
│   │       // src/types/project/projectForm.ts
│   │       import { Status } from '../base';
│   │       
│   │       export interface ProjectFormData {
│   │         name: string;
│   │         description?: string;
│   │         startDate?: string; // ISO string for HTML date input
│   │         dueDate?: string;   // ISO string for HTML date input
│   │         status: Status;
│   │         estimatedHours?: string; // Handle as string in form, convert to number
│   │       }
│   └── projectStats.ts
│           // src/types/project/projectStats.ts
│           
│           export interface ProjectStats {
│             totalProjects: number;
│             activeProjects: number;
│             completedProjects: number;
│             // Add more stats as needed
│           }
├── task/
│   ├── index.ts
│   │       export * from './task';
│   │       export * from './taskForm';
│   ├── task.ts
│   │       // src/types/task/task.ts
│   │       
│   │       import { BaseEntity, Priority, Status } from '../base';
│   │       import { Project } from '../project/project';
│   │       import { Objective } from '../objective/objective';
│   │       import { TodoList } from '../todo/todoList';
│   │       import { TimeEntry } from '../time/timeEntry';
│   │       
│   │       export type TaskStatus = 'todo' | 'in-progress' | 'done';
│   │       
│   │       export interface Task extends BaseEntity {
│   │         content: string;
│   │         description?: string;
│   │         status: TaskStatus;
│   │         priority: Priority;
│   │         startDate?: Date;
│   │         dueDate?: Date;
│   │         estimatedHours?: number;
│   │         actualHours?: number;
│   │         projectId: string;
│   │         project?: Project;
│   │         objectiveId?: string;
│   │         objective?: Objective | null;
│   │         todoLists?: TodoList[];
│   │         timeEntries?: TimeEntry[];
│   │       }
│   └── taskForm.ts
│           // src/types/task/taskForm.ts
│           import { TaskStatus } from "./task";
│           import { Priority } from "../base";
│           
│           export interface TaskFormData {
│             content: string;
│             description?: string;
│             status: TaskStatus;
│             priority: Priority;
│             projectId: string;
│             objectiveId?: string;
│             startDate: string; // ISO string
│             dueDate: string;   // ISO string
│             estimatedHours?: string; // Handle as string, convert to number
│             actualHours?: string;    // Handle as string, convert to number
│           }
├── time/
│   ├── index.ts
│   │       export * from './timeEntry';
│   │       export * from './timeEntryForm';
│   │       export * from './timeEntryStats';
│   │       export * from './timeTracking';
│   ├── timeEntry.ts
│   │       // src/types/time/timeEntry.ts
│   │       
│   │       import { BaseEntity } from '../base';
│   │       import { Task } from '../task/task';
│   │       
│   │       export interface TimeEntry extends BaseEntity {
│   │         taskId: string;
│   │         task: Task;
│   │         startTime: Date;
│   │         endTime?: Date;
│   │         duration?: number; // Duration in minutes
│   │         description?: string;
│   │       }
│   ├── timeEntryForm.ts
│   │       // src/types/time/timeEntryForm.ts
│   │       
│   │       export interface TimeEntryFormData {
│   │         taskId: string;
│   │         startTime: string; // ISO string
│   │         endTime?: string;  // ISO string
│   │         description?: string;
│   │       }
│   ├── timeEntryStats.ts
│   │       // src/types/time/timeEntryStats.ts
│   │       
│   │       export interface TimeEntryStats {
│   │         totalDuration: number;       // in minutes
│   │         averageDuration: number;     // in minutes
│   │         entriesCount: number;
│   │         dailyAverage: number;        // in minutes
│   │       }
│   └── timeTracking.ts
│           // src/types/time/timeTracking.ts
│           
│           export interface TimeTracking {
│             startDate: string; // ISO string
│             dueDate?: string;  // ISO string
│             estimatedHours?: number;
│           }
├── timeline/
│   └── timeline.ts
│           // src/types/timeline/timeline.ts
│           export interface TimelineEvent {
│               id: string;
│               title: string;
│               date: string;
│               description: string;
│               status: 'completed' | 'in-progress' | 'upcoming';
│             }
│             
│             export interface TimelineProps {
│               events?: TimelineEvent[];
│             }
│             
│             export interface TimelineItemProps {
│               event: TimelineEvent;
│             }
│             
│             export interface TimelineIndicatorProps {
│               status: TimelineEvent['status'];
│             }
│             
│             export interface TimelineContentProps {
│               event: TimelineEvent;
│             }
└── todo/
    ├── index.ts
    │       export * from './todoList';
    │       export * from './todoListStats';
    │       export * from './todoListForm';
    ├── todoList.ts
    │       // src/types/todoList/todoList.ts
    │       
    │       import { BaseEntity } from '../base';
    │       import { Task } from '../task/task';
    │       
    │       export type TodoListStatus = 'active' | 'archived';
    │       export type TodoListType = 'daily' | 'weekly' | 'monthly'; // Extend as needed
    │       
    │       export interface TodoList extends BaseEntity {
    │         name: string;
    │         type: TodoListType;
    │         tasks: Task[];
    │       }
    ├── todoListForm.ts
    │       // src/types/todoList/todoListForm.ts
    │       import { TodoListType } from "./todoList";
    │       
    │       export interface TodoListFormData {
    │         name: string;
    │         type: TodoListType;
    │       }
    └── todoListStats.ts
            // src/types/todoList/todoListStats.ts
            
            export interface TodoListStats {
              totalTodoLists: number;
              activeTodoLists: number;
              archivedTodoLists: number;
              // Add more stats as needed
            }

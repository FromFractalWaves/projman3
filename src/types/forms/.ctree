forms/
├── base/
│   ├── baseFormProps.ts
│   │       import { FieldConfig } from "../fields";
│   │       
│   │       export interface BaseFormProps {
│   │           title: string;
│   │           description?: string;
│   │           triggerButton: {
│   │             label: string;
│   │             icon?: React.ReactNode;
│   │           };
│   │           fields: FieldConfig[];
│   │           onSubmit: (data: Record<string, any>) => Promise<void>;
│   │           defaultValues?: Record<string, any>;
│   │           submitLabel?: string;
│   │         }
│   ├── formConfig.ts
│   │       
│   │       // src/types/forms/formConfig.ts
│   │       export interface FormConfig<T> {
│   │           initialValues: T;
│   │           onSubmit: (values: T) => Promise<void>;
│   │           validate?: (values: T) => Record<string, string>;
│   │           validateOnChange?: boolean;
│   │           validateOnBlur?: boolean;
│   │         }
│   ├── formHandlers.ts
│   │       // src/types/forms/formHandlers.ts
│   │       export interface FormHandlers<T> {
│   │           handleChange: (
│   │             e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
│   │           ) => void;
│   │           
│   │           handleBlur: (
│   │             e: React.FocusEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
│   │           ) => void;
│   │           
│   │           setFieldValue: (field: keyof T, value: any) => void;
│   │           
│   │           setFieldError: (field: keyof T, error: string) => void;
│   │           
│   │           setFieldTouched: (field: keyof T, isTouched?: boolean) => void;
│   │           
│   │           handleSubmit: (e: React.FormEvent<HTMLFormElement>) => Promise<void>;
│   │           
│   │           resetForm: () => void;
│   │         }
│   ├── formState.ts
│   │       // src/types/forms/formState.ts
│   │       export interface FormState<T> {
│   │           values: T;
│   │           errors: Record<string, string>;
│   │           isSubmitting: boolean;
│   │           touched: Record<keyof T, boolean>;
│   │           isDirty: boolean;
│   │         }
│   ├── index.ts
│   │       // src/types/forms/base/index.ts
│   │       export * from './baseFormProps';
│   │       export * from './formConfig';
│   │       export * from './formState';
│   │       export * from './formHandlers';
│   │       export * from './useFormReturn';
│   └── useFormReturn.ts
│           import { FormState } from "./formState";
│           import { FormHandlers } from "./formHandlers";
│           
│           // src/types/forms/useFormReturn.ts
│           export interface UseFormReturn<T> extends FormState<T>, FormHandlers<T> {
│               // Additional utility properties
│               isValid: boolean;
│               submitCount: number;
│               
│               // Additional utility methods
│               validateForm: () => Promise<Record<string, string>>;
│               validateField: (field: keyof T) => Promise<string | undefined>;
│               setValues: (values: T) => void;
│               setErrors: (errors: Record<string, string>) => void;
│               setTouched: (touched: Record<keyof T, boolean>) => void;
│             }
│             
├── fields/
│   ├── buttonConfig.ts
│   │       // src/types/forms/fields/buttonConfig.ts
│   │       
│   │       // Button style variants
│   │       export type ButtonVariant = 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
│   │       export type ButtonSize = 'default' | 'sm' | 'lg' | 'icon';
│   │       export type ButtonColor = 'blue' | 'green' | 'yellow' | 'purple' | 'indigo';
│   │       
│   │       // Base button configuration
│   │       export interface BaseButtonConfig {
│   │         label: string;
│   │         variant?: ButtonVariant;
│   │         size?: ButtonSize;
│   │         color?: ButtonColor;
│   │         icon?: React.ReactNode;
│   │         disabled?: boolean;
│   │         className?: string;
│   │       }
│   │       
│   │       // Form buttons configuration
│   │       export interface FormButtonsConfig {
│   │         submit: BaseButtonConfig;
│   │         cancel?: BaseButtonConfig;
│   │         reset?: BaseButtonConfig;
│   │       }
│   │       
│   │       // Form buttons props (for the component)
│   │       export interface FormButtonsProps {
│   │         config?: FormButtonsConfig;
│   │         onCancel?: () => void;
│   │         onReset?: () => void;
│   │         isSubmitting?: boolean;
│   │         submitText?: string;
│   │         cancelText?: string;
│   │         color?: ButtonColor;
│   │         disabled?: boolean;
│   │         className?: string;
│   │       }
│   │       
│   │       // Form buttons state
│   │       export interface FormButtonsState {
│   │         isSubmitting: boolean;
│   │         isValid: boolean;
│   │         isDirty: boolean;
│   │       }
│   ├── fieldConfig.ts
│   │       // src/types/forms/fields/fieldConfig.ts
│   │       
│   │       // Base field types supported by the form components
│   │       export type FieldType = 'text' | 'textarea' | 'select' | 'number' | 'date' | 'datetime-local';
│   │       
│   │       // Option type for select fields
│   │       export interface SelectOption {
│   │         value: string;
│   │         label: string;
│   │       }
│   │       
│   │       // Base properties shared by all field types
│   │       export interface BaseFieldConfig {
│   │         name: string;
│   │         label: string;  // Making label required for all field types
│   │         type: FieldType;
│   │         required?: boolean;
│   │         placeholder?: string;
│   │         disabled?: boolean;
│   │         className?: string;
│   │         validate?: (value: any) => string | undefined;
│   │       }
│   │       
│   │       // Text field specific configuration
│   │       export interface TextFieldConfig extends BaseFieldConfig {
│   │         type: 'text';
│   │         minLength?: number;
│   │         maxLength?: number;
│   │         pattern?: string;
│   │       }
│   │       
│   │       // Textarea field specific configuration
│   │       export interface TextAreaFieldConfig extends BaseFieldConfig {
│   │         type: 'textarea';
│   │         rows?: number;
│   │         minLength?: number;
│   │         maxLength?: number;
│   │       }
│   │       
│   │       // Select field specific configuration
│   │       export interface SelectFieldConfig extends BaseFieldConfig {
│   │         type: 'select';
│   │         options: SelectOption[];
│   │         multiple?: boolean;
│   │       }
│   │       
│   │       // Number field specific configuration
│   │       export interface NumberFieldConfig extends BaseFieldConfig {
│   │         type: 'number';
│   │         min?: number;
│   │         max?: number;
│   │         step?: number;
│   │       }
│   │       
│   │       // Date field specific configuration
│   │       export interface DateFieldConfig extends BaseFieldConfig {
│   │         type: 'date' | 'datetime-local';
│   │         min?: string; // ISO date string
│   │         max?: string; // ISO date string;
│   │       }
│   │       
│   │       // Union type of all possible field configurations
│   │       export type FieldConfig = 
│   │         | TextFieldConfig 
│   │         | TextAreaFieldConfig 
│   │         | SelectFieldConfig 
│   │         | NumberFieldConfig 
│   │         | DateFieldConfig;
│   │       
│   │       // Field value type based on field type
│   │       export type FieldValue<T extends FieldConfig> = 
│   │         T extends TextFieldConfig | TextAreaFieldConfig ? string :
│   │         T extends SelectFieldConfig ? (T['multiple'] extends true ? string[] : string) :
│   │         T extends NumberFieldConfig ? number :
│   │         T extends DateFieldConfig ? string :
│   │         never;
│   │       
│   ├── fieldProps.ts
│   │       // src/types/forms/fields/fieldProps.ts
│   │       import { FieldConfig } from "./fieldConfig";
│   │       
│   │       export interface FormFieldProps {
│   │           field: FieldConfig;
│   │           value: any;
│   │           onChange: (name: string, value: any) => void;
│   │           onBlur?: (name: string) => void;
│   │           error?: string;
│   │           touched?: boolean;
│   │         }
│   │         
│   │         // Form field wrapper component props
│   │         export interface FormFieldWrapperProps {
│   │           label: string;
│   │           required?: boolean;
│   │           error?: string;
│   │           children: React.ReactNode;
│   │           className?: string;
│   │         }
│   │         
│   └── index.ts
│           export * from './fieldConfig';
│           export * from './fieldProps';
│           export * from './buttonConfig';
└── index.ts
        export * from './base';
        export * from './fields';

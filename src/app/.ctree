app/
├── dashboard/
│   └── page.tsx
├── favicon.ico
├── globals.css
├── home/
│   └── page.tsx
├── layout.tsx
│       import type { Metadata } from "next";
│       import { Geist, Geist_Mono } from "next/font/google";
│       import "./globals.css";
│       
│       const geistSans = Geist({
│         variable: "--font-geist-sans",
│         subsets: ["latin"],
│       });
│       
│       const geistMono = Geist_Mono({
│         variable: "--font-geist-mono",
│         subsets: ["latin"],
│       });
│       
│       export const metadata: Metadata = {
│         title: "Create Next App",
│         description: "Generated by create next app",
│       };
│       
│       export default function RootLayout({
│         children,
│       }: Readonly<{
│         children: React.ReactNode;
│       }>) {
│         return (
│           <html lang="en">
│             <body
│               className={`${geistSans.variable} ${geistMono.variable} antialiased`}
│             >
│               {children}
│             </body>
│           </html>
│         );
│       }
├── objectives/
│   └── page.tsx
│           
│           // src/app/objectives/page.tsx
│           'use client';
│           
│           import React from 'react';
│           import { useObjectives } from '@/hooks/useObjectives';
│           import { ObjectiveForm } from '@/components/forms';
│           import { useProjects } from '@/hooks/useProjects';
│           
│           export default function ObjectivesPage() {
│             const { objectives, loading } = useObjectives();
│             const { projects } = useProjects();
│           
│             if (loading) return <div>Loading...</div>;
│           
│             return (
│               <div className="p-8">
│                 <h1 className="text-3xl font-bold mb-6">Objectives</h1>
│                 <ObjectiveForm onSubmit={() => {}} projects={projects} />
│                 <div className="mt-6 space-y-4">
│                   {objectives.map((objective) => (
│                     <div key={objective.id} className="p-4 bg-gray-800 rounded-lg">
│                       <h3 className="text-xl font-semibold">{objective.name}</h3>
│                       <p className="text-gray-400">{objective.description}</p>
│                     </div>
│                   ))}
│                 </div>
│               </div>
│             );
│           }
├── page.tsx
│       'use client';
│       
│       import React from 'react';
│       import { useProjects } from '@/hooks/useProjects';
│       import { useObjectives } from '@/hooks/useObjectives';
│       import { useTasks } from '@/hooks/useTasks';
│       import { useTodoLists } from '@/hooks/useTodoLists';
│       import { DashboardLayout } from '@/components/dashboard/DashboardLayout';
│       import { QuickAddDialogs } from '@/components/dialogs';
│       import { PROJECT_STATUS, TASK_STATUS } from '@/constants';
│       import Link from 'next/link';
│       import { Button } from '@/components/ui/button';
│       import { Menu } from 'lucide-react';
│       
│       export default function Home() {
│         const { 
│           projects, 
│           loading: projectsLoading, 
│           error: projectsError,
│           createProject,
│           refresh: refreshProjects 
│         } = useProjects();
│         
│         const { 
│           objectives, 
│           loading: objectivesLoading, 
│           error: objectivesError,
│           createObjective,
│           refresh: refreshObjectives 
│         } = useObjectives();
│         
│         const { 
│           tasks, 
│           loading: tasksLoading, 
│           error: tasksError,
│           createTask,
│           refresh: refreshTasks 
│         } = useTasks();
│         
│         const {
│           todoLists,
│           loading: todoListsLoading,
│           error: todoListsError,
│           refresh: refreshTodoLists
│         } = useTodoLists();
│       
│         const isLoading = projectsLoading || objectivesLoading || tasksLoading || todoListsLoading;
│         const hasError = projectsError || objectivesError || tasksError || todoListsError;
│       
│         // Handle loading and error states
│         if (isLoading || hasError) {
│           return (
│             <div className="flex min-h-screen items-center justify-center bg-neutral-900">
│               <div className="text-xl text-neutral-100">
│                 {isLoading ? (
│                   'Loading dashboard...'
│                 ) : (
│                   <span className="text-red-500">
│                     Error loading dashboard data. Please try again later.
│                   </span>
│                 )}
│               </div>
│             </div>
│           );
│         }
│       
│         // Refresh all data
│         const handleRefresh = async () => {
│           await Promise.all([
│             refreshProjects(),
│             refreshObjectives(),
│             refreshTasks(),
│             refreshTodoLists()
│           ]);
│         };
│       
│         // Filter active projects
│         const activeProjects = projects.filter(
│           project => project.status !== PROJECT_STATUS.COMPLETED
│         );
│       
│         // Calculate task statistics
│         const taskStats = {
│           todo: tasks.filter(task => task.status === TASK_STATUS.TODO).length,
│           inProgress: tasks.filter(task => task.status === TASK_STATUS.IN_PROGRESS).length,
│           done: tasks.filter(task => task.status === TASK_STATUS.DONE).length,
│         };
│       
│         const handleTimeEntryAdd = async (data) => {
│           console.log('Time entry to be implemented', data);
│           await handleRefresh();
│         };
│       
│         return (
│           <div className="min-h-screen bg-neutral-900">
│             {/* Header with Navigation */}
│             <div className="border-b border-neutral-800 bg-neutral-900/50 backdrop-blur-sm sticky top-0 z-50">
│               <div className="flex items-center justify-between px-4 py-3">
│                 <h1 className="text-xl font-bold text-white">Dashboard</h1>
│                 <div className="flex items-center gap-4">
│                   <Button variant="ghost" size="sm" asChild>
│                     <Link href="/projects">Projects</Link>
│                   </Button>
│                   <Button variant="ghost" size="sm" asChild>
│                     <Link href="/objectives">Objectives</Link>
│                   </Button>
│                   <Button variant="ghost" size="sm" asChild>
│                     <Link href="/tasks">Tasks</Link>
│                   </Button>
│                   <Button variant="ghost" size="sm" asChild>
│                     <Link href="/time">Time</Link>
│                   </Button>
│                   <Button variant="ghost" size="sm" asChild>
│                     <Link href="/todo">Todo</Link>
│                   </Button>
│                 </div>
│               </div>
│             </div>
│       
│             <div className="p-4">
│               {/* Quick Add Section */}
│               <QuickAddDialogs
│                 projects={projects}
│                 objectives={objectives}
│                 tasks={tasks.filter(t => t.status !== 'done')}
│                 onProjectAdd={createProject}
│                 onObjectiveAdd={createObjective}
│                 onTaskAdd={createTask}
│                 onTimeEntryAdd={handleTimeEntryAdd}
│               />
│       
│               {/* Dashboard Layout */}
│               <DashboardLayout 
│                 projects={projects}
│                 objectives={objectives}
│                 tasks={tasks}
│                 todoLists={todoLists}
│                 taskStats={taskStats}
│                 onRefresh={handleRefresh}
│               />
│             </div>
│           </div>
│         );
│       }
├── page.tsx.md
├── projects/
│   └── page.tsx
│           // src/app/projects/page.tsx
│           'use client';
│           
│           import React from 'react';
│           import { useProjects } from '@/hooks/useProjects';
│           import { ProjectForm } from '@/components/forms';
│           
│           export default function ProjectsPage() {
│             const { projects, loading } = useProjects();
│           
│             if (loading) return <div>Loading...</div>;
│           
│             return (
│               <div className="p-8">
│                 <h1 className="text-3xl font-bold mb-6">Projects</h1>
│                 <ProjectForm onSubmit={() => {}} />
│                 <div className="mt-6 space-y-4">
│                   {projects.map((project) => (
│                     <div key={project.id} className="p-4 bg-gray-800 rounded-lg">
│                       <h3 className="text-xl font-semibold">{project.name}</h3>
│                       <p className="text-gray-400">{project.description}</p>
│                     </div>
│                   ))}
│                 </div>
│               </div>
│             );
│           }
├── tasks/
│   └── page.tsx
│           
│           // src/app/tasks/page.tsx
│           'use client';
│           
│           import React from 'react';
│           import { useTasks } from '@/hooks/useTasks';
│           import { TaskForm } from '@/components/forms';
│           import { useProjects } from '@/hooks/useProjects';
│           import { useObjectives } from '@/hooks/useObjectives';
│           
│           export default function TasksPage() {
│             const { tasks, loading } = useTasks();
│             const { projects } = useProjects();
│             const { objectives } = useObjectives();
│           
│             if (loading) return <div>Loading...</div>;
│           
│             return (
│               <div className="p-8">
│                 <h1 className="text-3xl font-bold mb-6">Tasks</h1>
│                 <TaskForm onSubmit={() => {}} projects={projects} objectives={objectives} />
│                 <div className="mt-6 space-y-4">
│                   {tasks.map((task) => (
│                     <div key={task.id} className="p-4 bg-gray-800 rounded-lg">
│                       <h3 className="text-xl font-semibold">{task.content}</h3>
│                       <p className="text-gray-400">{task.description}</p>
│                     </div>
│                   ))}
│                 </div>
│               </div>
│             );
│           }
├── time/
│   └── page.tsx
│           
│           // src/app/time/page.tsx
│           'use client';
│           
│           import React from 'react';
│           import { useTimeEntries } from '@/hooks/useTimeEntries';
│           import { TimeEntryForm } from '@/components/forms';
│           import { useTasks } from '@/hooks/useTasks';
│           
│           export default function TimePage() {
│             const { timeEntries, loading } = useTimeEntries();
│             const { tasks } = useTasks();
│           
│             if (loading) return <div>Loading...</div>;
│           
│             return (
│               <div className="p-8">
│                 <h1 className="text-3xl font-bold mb-6">Time Tracking</h1>
│                 <TimeEntryForm onSubmit={() => {}} tasks={tasks} />
│                 <div className="mt-6 space-y-4">
│                   {timeEntries.map((entry) => (
│                     <div key={entry.id} className="p-4 bg-gray-800 rounded-lg">
│                       <h3 className="text-xl font-semibold">
│                         {entry.task?.content || 'Unknown Task'}
│                       </h3>
│                       <p className="text-gray-400">{entry.description}</p>
│                     </div>
│                   ))}
│                 </div>
│               </div>
│             );
│           }
└── todo/
    └── page.tsx
            
            // src/app/todo/page.tsx
            'use client';
            
            import React from 'react';
            import { useTodoLists } from '@/hooks/useTodoLists';
            import { TodoListForm } from '@/components/forms';
            
            export default function TodoPage() {
              const { todoLists, loading } = useTodoLists();
            
              if (loading) return <div>Loading...</div>;
            
              return (
                <div className="p-8">
                  <h1 className="text-3xl font-bold mb-6">Todo Lists</h1>
                  <TodoListForm onSubmit={() => {}} />
                  <div className="mt-6 space-y-4">
                    {todoLists.map((list) => (
                      <div key={list.id} className="p-4 bg-gray-800 rounded-lg">
                        <h3 className="text-xl font-semibold">{list.name}</h3>
                        <p className="text-gray-400">Type: {list.type}</p>
                        <p className="text-gray-400">Tasks: {list.tasks?.length || 0}</p>
                      </div>
                    ))}
                  </div>
                </div>
              );
            }

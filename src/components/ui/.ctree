ui/
├── button.tsx
│       import * as React from "react"
│       import { Slot } from "@radix-ui/react-slot"
│       import { cva, type VariantProps } from "class-variance-authority"
│       
│       import { cn } from "@/lib/utils"
│       
│       const buttonVariants = cva(
│         "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300",
│         {
│           variants: {
│             variant: {
│               default: "bg-neutral-900 text-neutral-50 hover:bg-neutral-900/90 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50/90",
│               destructive:
│                 "bg-red-500 text-neutral-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-neutral-50 dark:hover:bg-red-900/90",
│               outline:
│                 "border border-neutral-200 bg-white hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800 dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50",
│               secondary:
│                 "bg-neutral-100 text-neutral-900 hover:bg-neutral-100/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80",
│               ghost: "hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50",
│               link: "text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50",
│             },
│             size: {
│               default: "h-10 px-4 py-2",
│               sm: "h-9 rounded-md px-3",
│               lg: "h-11 rounded-md px-8",
│               icon: "h-10 w-10",
│             },
│           },
│           defaultVariants: {
│             variant: "default",
│             size: "default",
│           },
│         }
│       )
│       
│       export interface ButtonProps
│         extends React.ButtonHTMLAttributes<HTMLButtonElement>,
│           VariantProps<typeof buttonVariants> {
│         asChild?: boolean
│       }
│       
│       const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
│         ({ className, variant, size, asChild = false, ...props }, ref) => {
│           const Comp = asChild ? Slot : "button"
│           return (
│             <Comp
│               className={cn(buttonVariants({ variant, size, className }))}
│               ref={ref}
│               {...props}
│             />
│           )
│         }
│       )
│       Button.displayName = "Button"
│       
│       export { Button, buttonVariants }
├── card/
│   ├── Card.tsx
│   │       // src/components/core/Card/Card.tsx
│   │       import React from 'react';
│   │       
│   │       interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
│   │         children: React.ReactNode;
│   │       }
│   │       
│   │       export function Card({ children, className = '', ...props }: CardProps) {
│   │         return (
│   │           <div 
│   │             className={`rounded-lg border border-gray-700 bg-gray-800/40 shadow-sm ${className}`}
│   │             {...props}
│   │           >
│   │             {children}
│   │           </div>
│   │         );
│   │       }
│   ├── CardContent.tsx
│   │       // src/components/core/Card/CardContent.tsx
│   │       import React from 'react';
│   │       
│   │       interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {
│   │         children: React.ReactNode;
│   │       }
│   │       
│   │       export function CardContent({ children, className = '', ...props }: CardContentProps) {
│   │         return (
│   │           <div 
│   │             className={`p-6 pt-0 ${className}`}
│   │             {...props}
│   │           >
│   │             {children}
│   │           </div>
│   │         );
│   │       }
│   │       
│   ├── CardHeader.tsx
│   │       // src/components/core/Card/CardHeader.tsx
│   │       import React from 'react';
│   │       
│   │       interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
│   │         children: React.ReactNode;
│   │       }
│   │       
│   │       export function CardHeader({ children, className = '', ...props }: CardHeaderProps) {
│   │         return (
│   │           <div 
│   │             className={`flex flex-col space-y-1.5 p-6 ${className}`}
│   │             {...props}
│   │           >
│   │             {children}
│   │           </div>
│   │         );
│   │       }
│   │       
│   ├── CardTitle.tsx
│   │       // src/components/core/Card/CardTitle.tsx
│   │       import React from 'react';
│   │       
│   │       interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {
│   │         children: React.ReactNode;
│   │       }
│   │       
│   │       export function CardTitle({ children, className = '', ...props }: CardTitleProps) {
│   │         return (
│   │           <h3 
│   │             className={`font-semibold leading-none tracking-tight text-lg ${className}`}
│   │             {...props}
│   │           >
│   │             {children}
│   │           </h3>
│   │         );
│   │       }
│   │       
│   └── index.ts
│           // src/components/core/Card/index.ts
│           export * from './Card';
│           export * from './CardHeader';
│           export * from './CardTitle';
│           export * from './CardContent';
├── dialog.tsx
│       "use client"
│       
│       import * as React from "react"
│       import * as DialogPrimitive from "@radix-ui/react-dialog"
│       import { X } from "lucide-react"
│       
│       import { cn } from "@/lib/utils"
│       
│       const Dialog = DialogPrimitive.Root
│       
│       const DialogTrigger = DialogPrimitive.Trigger
│       
│       const DialogPortal = DialogPrimitive.Portal
│       
│       const DialogClose = DialogPrimitive.Close
│       
│       const DialogOverlay = React.forwardRef<
│         React.ElementRef<typeof DialogPrimitive.Overlay>,
│         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
│       >(({ className, ...props }, ref) => (
│         <DialogPrimitive.Overlay
│           ref={ref}
│           className={cn(
│             "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
│             className
│           )}
│           {...props}
│         />
│       ))
│       DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
│       
│       const DialogContent = React.forwardRef<
│         React.ElementRef<typeof DialogPrimitive.Content>,
│         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
│       >(({ className, children, ...props }, ref) => (
│         <DialogPortal>
│           <DialogOverlay />
│           <DialogPrimitive.Content
│             ref={ref}
│             className={cn(
│               "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-neutral-200 bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg dark:border-neutral-800 dark:bg-neutral-950",
│               className
│             )}
│             {...props}
│           >
│             {children}
│             <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-neutral-100 data-[state=open]:text-neutral-500 dark:ring-offset-neutral-950 dark:focus:ring-neutral-300 dark:data-[state=open]:bg-neutral-800 dark:data-[state=open]:text-neutral-400">
│               <X className="h-4 w-4" />
│               <span className="sr-only">Close</span>
│             </DialogPrimitive.Close>
│           </DialogPrimitive.Content>
│         </DialogPortal>
│       ))
│       DialogContent.displayName = DialogPrimitive.Content.displayName
│       
│       const DialogHeader = ({
│         className,
│         ...props
│       }: React.HTMLAttributes<HTMLDivElement>) => (
│         <div
│           className={cn(
│             "flex flex-col space-y-1.5 text-center sm:text-left",
│             className
│           )}
│           {...props}
│         />
│       )
│       DialogHeader.displayName = "DialogHeader"
│       
│       const DialogFooter = ({
│         className,
│         ...props
│       }: React.HTMLAttributes<HTMLDivElement>) => (
│         <div
│           className={cn(
│             "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
│             className
│           )}
│           {...props}
│         />
│       )
│       DialogFooter.displayName = "DialogFooter"
│       
│       const DialogTitle = React.forwardRef<
│         React.ElementRef<typeof DialogPrimitive.Title>,
│         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
│       >(({ className, ...props }, ref) => (
│         <DialogPrimitive.Title
│           ref={ref}
│           className={cn(
│             "text-lg font-semibold leading-none tracking-tight",
│             className
│           )}
│           {...props}
│         />
│       ))
│       DialogTitle.displayName = DialogPrimitive.Title.displayName
│       
│       const DialogDescription = React.forwardRef<
│         React.ElementRef<typeof DialogPrimitive.Description>,
│         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
│       >(({ className, ...props }, ref) => (
│         <DialogPrimitive.Description
│           ref={ref}
│           className={cn("text-sm text-neutral-500 dark:text-neutral-400", className)}
│           {...props}
│         />
│       ))
│       DialogDescription.displayName = DialogPrimitive.Description.displayName
│       
│       export {
│         Dialog,
│         DialogPortal,
│         DialogOverlay,
│         DialogClose,
│         DialogTrigger,
│         DialogContent,
│         DialogHeader,
│         DialogFooter,
│         DialogTitle,
│         DialogDescription,
│       }
├── index.ts
│       export * from './button';
│       export * from './dialog';
│       export * from './input';
│       export * from './select';
│       export * from './switch';
│       export * from './textarea';
│       export * from './card';
│       export * from './modal';
├── input.tsx
│       import * as React from "react"
│       
│       import { cn } from "@/lib/utils"
│       
│       const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
│         ({ className, type, ...props }, ref) => {
│           return (
│             <input
│               type={type}
│               className={cn(
│                 "flex h-10 w-full rounded-md border border-neutral-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-neutral-950 placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:file:text-neutral-50 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300",
│                 className
│               )}
│               ref={ref}
│               {...props}
│             />
│           )
│         }
│       )
│       Input.displayName = "Input"
│       
│       export { Input }
├── modal/
│   ├── Modal.tsx
│   │       // src/components/core/Modal.tsx
│   │       import React from 'react';
│   │       
│   │       interface ModalProps {
│   │         children: React.ReactNode;
│   │         onClose: () => void;
│   │       }
│   │       
│   │       export const Modal: React.FC<ModalProps> = ({ children, onClose }) => {
│   │         return (
│   │           <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
│   │             <div className="bg-white rounded shadow-lg w-11/12 md:w-1/2 lg:w-1/3 p-6 relative">
│   │               <button
│   │                 onClick={onClose}
│   │                 className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
│   │               >
│   │                 &times;
│   │               </button>
│   │               {children}
│   │             </div>
│   │           </div>
│   │         );
│   │       };
│   └── index.ts
│           export * from './Modal';
├── select.tsx
│       "use client"
│       
│       import * as React from "react"
│       import * as SelectPrimitive from "@radix-ui/react-select"
│       import { Check, ChevronDown, ChevronUp } from "lucide-react"
│       
│       import { cn } from "@/lib/utils"
│       
│       const Select = SelectPrimitive.Root
│       
│       const SelectGroup = SelectPrimitive.Group
│       
│       const SelectValue = SelectPrimitive.Value
│       
│       const SelectTrigger = React.forwardRef<
│         React.ElementRef<typeof SelectPrimitive.Trigger>,
│         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
│       >(({ className, children, ...props }, ref) => (
│         <SelectPrimitive.Trigger
│           ref={ref}
│           className={cn(
│             "flex h-10 w-full items-center justify-between rounded-md border border-neutral-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus:ring-neutral-300",
│             className
│           )}
│           {...props}
│         >
│           {children}
│           <SelectPrimitive.Icon asChild>
│             <ChevronDown className="h-4 w-4 opacity-50" />
│           </SelectPrimitive.Icon>
│         </SelectPrimitive.Trigger>
│       ))
│       SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
│       
│       const SelectScrollUpButton = React.forwardRef<
│         React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
│         React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
│       >(({ className, ...props }, ref) => (
│         <SelectPrimitive.ScrollUpButton
│           ref={ref}
│           className={cn(
│             "flex cursor-default items-center justify-center py-1",
│             className
│           )}
│           {...props}
│         >
│           <ChevronUp className="h-4 w-4" />
│         </SelectPrimitive.ScrollUpButton>
│       ))
│       SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
│       
│       const SelectScrollDownButton = React.forwardRef<
│         React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
│         React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
│       >(({ className, ...props }, ref) => (
│         <SelectPrimitive.ScrollDownButton
│           ref={ref}
│           className={cn(
│             "flex cursor-default items-center justify-center py-1",
│             className
│           )}
│           {...props}
│         >
│           <ChevronDown className="h-4 w-4" />
│         </SelectPrimitive.ScrollDownButton>
│       ))
│       SelectScrollDownButton.displayName =
│         SelectPrimitive.ScrollDownButton.displayName
│       
│       const SelectContent = React.forwardRef<
│         React.ElementRef<typeof SelectPrimitive.Content>,
│         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
│       >(({ className, children, position = "popper", ...props }, ref) => (
│         <SelectPrimitive.Portal>
│           <SelectPrimitive.Content
│             ref={ref}
│             className={cn(
│               "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-neutral-200 bg-white text-neutral-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50",
│               position === "popper" &&
│                 "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
│               className
│             )}
│             position={position}
│             {...props}
│           >
│             <SelectScrollUpButton />
│             <SelectPrimitive.Viewport
│               className={cn(
│                 "p-1",
│                 position === "popper" &&
│                   "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
│               )}
│             >
│               {children}
│             </SelectPrimitive.Viewport>
│             <SelectScrollDownButton />
│           </SelectPrimitive.Content>
│         </SelectPrimitive.Portal>
│       ))
│       SelectContent.displayName = SelectPrimitive.Content.displayName
│       
│       const SelectLabel = React.forwardRef<
│         React.ElementRef<typeof SelectPrimitive.Label>,
│         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
│       >(({ className, ...props }, ref) => (
│         <SelectPrimitive.Label
│           ref={ref}
│           className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
│           {...props}
│         />
│       ))
│       SelectLabel.displayName = SelectPrimitive.Label.displayName
│       
│       const SelectItem = React.forwardRef<
│         React.ElementRef<typeof SelectPrimitive.Item>,
│         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
│       >(({ className, children, ...props }, ref) => (
│         <SelectPrimitive.Item
│           ref={ref}
│           className={cn(
│             "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-neutral-100 focus:text-neutral-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-neutral-800 dark:focus:text-neutral-50",
│             className
│           )}
│           {...props}
│         >
│           <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
│             <SelectPrimitive.ItemIndicator>
│               <Check className="h-4 w-4" />
│             </SelectPrimitive.ItemIndicator>
│           </span>
│       
│           <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
│         </SelectPrimitive.Item>
│       ))
│       SelectItem.displayName = SelectPrimitive.Item.displayName
│       
│       const SelectSeparator = React.forwardRef<
│         React.ElementRef<typeof SelectPrimitive.Separator>,
│         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
│       >(({ className, ...props }, ref) => (
│         <SelectPrimitive.Separator
│           ref={ref}
│           className={cn("-mx-1 my-1 h-px bg-neutral-100 dark:bg-neutral-800", className)}
│           {...props}
│         />
│       ))
│       SelectSeparator.displayName = SelectPrimitive.Separator.displayName
│       
│       export {
│         Select,
│         SelectGroup,
│         SelectValue,
│         SelectTrigger,
│         SelectContent,
│         SelectLabel,
│         SelectItem,
│         SelectSeparator,
│         SelectScrollUpButton,
│         SelectScrollDownButton,
│       }
├── switch.tsx
│       "use client"
│       
│       import * as React from "react"
│       import * as SwitchPrimitives from "@radix-ui/react-switch"
│       
│       import { cn } from "@/lib/utils"
│       
│       const Switch = React.forwardRef<
│         React.ElementRef<typeof SwitchPrimitives.Root>,
│         React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
│       >(({ className, ...props }, ref) => (
│         <SwitchPrimitives.Root
│           className={cn(
│             "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 focus-visible:ring-offset-white disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-neutral-900 data-[state=unchecked]:bg-neutral-200 dark:focus-visible:ring-neutral-300 dark:focus-visible:ring-offset-neutral-950 dark:data-[state=checked]:bg-neutral-50 dark:data-[state=unchecked]:bg-neutral-800",
│             className
│           )}
│           {...props}
│           ref={ref}
│         >
│           <SwitchPrimitives.Thumb
│             className={cn(
│               "pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0 dark:bg-neutral-950"
│             )}
│           />
│         </SwitchPrimitives.Root>
│       ))
│       Switch.displayName = SwitchPrimitives.Root.displayName
│       
│       export { Switch }
└── textarea.tsx
        import * as React from "react"
        
        import { cn } from "@/lib/utils"
        
        const Textarea = React.forwardRef<
          HTMLTextAreaElement,
          React.ComponentProps<"textarea">
        >(({ className, ...props }, ref) => {
          return (
            <textarea
              className={cn(
                "flex min-h-[80px] w-full rounded-md border border-neutral-200 bg-white px-3 py-2 text-base ring-offset-white placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300",
                className
              )}
              ref={ref}
              {...props}
            />
          )
        })
        Textarea.displayName = "Textarea"
        
        export { Textarea }

components/
├── dashboard/
│   ├── DashboardLayout/
│   │   ├── DashboardLayout.tsx
│   │   │       // src/components/dashboard/DashboardLayout/DashboardLayout.tsx
│   │   │       import React, { useMemo } from 'react';
│   │   │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       import { ProjectStats } from './ProjectStats';
│   │   │       import { TaskList } from './TaskList';
│   │   │       import { ProjectList } from './ProjectList';
│   │   │       import { TodoListSummary } from './TodoListSummary';
│   │   │       import type { Project, Objective, Task, TodoList } from '@/types';
│   │   │       
│   │   │       // src/components/dashboard/DashboardLayout/DashboardLayout.tsx
│   │   │       export interface DashboardLayoutProps {
│   │   │         projects: Project[];
│   │   │         objectives: Objective[];
│   │   │         tasks: Task[];
│   │   │         todoLists: TodoList[];
│   │   │         onRefresh: () => void;
│   │   │       }
│   │   │       
│   │   │       export function DashboardLayout({ 
│   │   │         projects, 
│   │   │         objectives, 
│   │   │         tasks, 
│   │   │         todoLists,
│   │   │         onRefresh 
│   │   │       }: DashboardLayoutProps) {
│   │   │         // Calculate statistics for ProjectStats component
│   │   │         const stats = useMemo(() => ({
│   │   │           projectCount: projects.length,
│   │   │           objectiveCount: objectives.length,
│   │   │           taskCount: tasks.length,
│   │   │           completedTasks: tasks.filter(t => t.status === 'done').length,
│   │   │           inProgressTasks: tasks.filter(t => t.status === 'in-progress').length,
│   │   │           highPriorityTasks: tasks.filter(t => t.priority === 'high').length
│   │   │         }), [projects, objectives, tasks]);
│   │   │       
│   │   │         return (
│   │   │           <div className="min-h-screen bg-gray-900 text-white p-6 space-y-6">
│   │   │             <header className="mb-8">
│   │   │               <h1 className="text-3xl font-bold mb-2">Project Dashboard</h1>
│   │   │               <p className="text-gray-400">
│   │   │                 Managing {projects.length} projects with {objectives.length} objectives and {tasks.length} tasks
│   │   │               </p>
│   │   │             </header>
│   │   │       
│   │   │             {/* Project Statistics */}
│   │   │             <ProjectStats {...stats} />
│   │   │       
│   │   │             <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
│   │   │               {/* Main Project List - Takes up 2 columns */}
│   │   │               <div className="lg:col-span-2">
│   │   │                 <Card>
│   │   │                   <CardHeader>
│   │   │                     <CardTitle>Projects Overview</CardTitle>
│   │   │                   </CardHeader>
│   │   │                   <CardContent>
│   │   │                     <ProjectList
│   │   │                       projects={projects}
│   │   │                       objectives={objectives}
│   │   │                       tasks={tasks}
│   │   │                       onRefresh={onRefresh}
│   │   │                     />
│   │   │                   </CardContent>
│   │   │                 </Card>
│   │   │               </div>
│   │   │       
│   │   │               {/* Side Column - Tasks and Todo Lists */}
│   │   │               <div className="space-y-6">
│   │   │                 <TaskList
│   │   │                   tasks={tasks}
│   │   │                   projects={projects}
│   │   │                   objectives={objectives}
│   │   │                   onRefresh={onRefresh}
│   │   │                 />
│   │   │                 <TodoListSummary todoLists={todoLists} />
│   │   │               </div>
│   │   │             </div>
│   │   │           </div>
│   │   │         );
│   │   │       }
│   │   ├── ProjectList.tsx
│   │   │       // src/components/dashboard/DashboardLayout/ProjectList.tsx
│   │   │       import React from 'react';
│   │   │       import type { Project, Objective, Task } from '@/types';
│   │   │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       
│   │   │       
│   │   │       // src/components/dashboard/DashboardLayout/ProjectList.tsx
│   │   │       interface ProjectListProps {
│   │   │         projects: Project[];
│   │   │         objectives: Objective[];
│   │   │         tasks: Task[];
│   │   │         onRefresh: () => void;
│   │   │       }
│   │   │       
│   │   │       export function ProjectList({ projects }: ProjectListProps) {
│   │   │         return (
│   │   │           <Card>
│   │   │             <CardHeader>
│   │   │               <CardTitle>Projects</CardTitle>
│   │   │             </CardHeader>
│   │   │             <CardContent>
│   │   │               {projects.length === 0 ? (
│   │   │                 <p>No projects available.</p>
│   │   │               ) : (
│   │   │                 <ul className="space-y-2">
│   │   │                   {projects.map((project) => (
│   │   │                     <li key={project.id} className="p-2 border rounded-md">
│   │   │                       <h3 className="text-lg font-semibold">{project.name}</h3>
│   │   │                       <p className="text-sm text-gray-600">{project.description}</p>
│   │   │                       <p className="text-sm text-gray-500">
│   │   │                         Status: {project.status} | Estimated Hours: {project.estimatedHours || 'N/A'}
│   │   │                       </p>
│   │   │                       <p className="text-sm text-gray-500">
│   │   │                         Start Date: {project.startDate ? new Date(project.startDate).toLocaleDateString() : 'N/A'} | Due Date: {project.dueDate ? new Date(project.dueDate).toLocaleDateString() : 'N/A'}
│   │   │                       </p>
│   │   │                     </li>
│   │   │                   ))}
│   │   │                 </ul>
│   │   │               )}
│   │   │             </CardContent>
│   │   │           </Card>
│   │   │         );
│   │   │       }
│   │   ├── ProjectStats.tsx
│   │   │       // src/components/dashboard/DashboardLayout/ProjectStats.tsx
│   │   │       import React from 'react';
│   │   │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       
│   │   │       interface ProjectStatsProps {
│   │   │         projectCount: number;
│   │   │         objectiveCount: number;
│   │   │         taskCount: number;
│   │   │         completedTasks: number;
│   │   │         inProgressTasks: number;
│   │   │         highPriorityTasks: number;
│   │   │         onRefresh: () => void;
│   │   │       }
│   │   │       
│   │   │       export function ProjectStats({
│   │   │         projectCount,
│   │   │         objectiveCount,
│   │   │         taskCount,
│   │   │         completedTasks,
│   │   │         inProgressTasks,
│   │   │         highPriorityTasks,
│   │   │       }: ProjectStatsProps) {
│   │   │         return (
│   │   │           <Card>
│   │   │             <CardHeader>
│   │   │               <CardTitle>Statistics</CardTitle>
│   │   │             </CardHeader>
│   │   │             <CardContent>
│   │   │               <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
│   │   │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │                   <h4 className="text-xl font-bold">{projectCount}</h4>
│   │   │                   <p className="text-sm text-gray-600">Total Projects</p>
│   │   │                 </div>
│   │   │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │                   <h4 className="text-xl font-bold">{objectiveCount}</h4>
│   │   │                   <p className="text-sm text-gray-600">Total Objectives</p>
│   │   │                 </div>
│   │   │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │                   <h4 className="text-xl font-bold">{taskCount}</h4>
│   │   │                   <p className="text-sm text-gray-600">Total Tasks</p>
│   │   │                 </div>
│   │   │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │                   <h4 className="text-xl font-bold">{completedTasks}</h4>
│   │   │                   <p className="text-sm text-gray-600">Completed Tasks</p>
│   │   │                 </div>
│   │   │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │                   <h4 className="text-xl font-bold">{inProgressTasks}</h4>
│   │   │                   <p className="text-sm text-gray-600">Tasks In Progress</p>
│   │   │                 </div>
│   │   │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │                   <h4 className="text-xl font-bold">{highPriorityTasks}</h4>
│   │   │                   <p className="text-sm text-gray-600">High Priority Tasks</p>
│   │   │                 </div>
│   │   │               </div>
│   │   │             </CardContent>
│   │   │           </Card>
│   │   │         );
│   │   │       }
│   │   ├── TaskList.tsx
│   │   │       // src/components/dashboard/DashboardLayout/TaskList.tsx
│   │   │       import React from 'react';
│   │   │       import type { Task, Project } from '@/types';
│   │   │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       import { Objective } from '@/types';
│   │   │       
│   │   │       
│   │   │       // src/components/dashboard/DashboardLayout/TaskList.tsx
│   │   │       interface TaskListProps {
│   │   │         tasks: Task[];
│   │   │         projects: Project[];
│   │   │         objectives: Objective[];
│   │   │         onRefresh: () => void;
│   │   │       }
│   │   │       
│   │   │       export function TaskList({ tasks, projects }: TaskListProps) {
│   │   │         const getProjectName = (projectId: string) => {
│   │   │           const project = projects.find((p) => p.id === projectId);
│   │   │           return project ? project.name : 'Unknown Project';
│   │   │         };
│   │   │       
│   │   │         return (
│   │   │           <Card>
│   │   │             <CardHeader>
│   │   │               <CardTitle>Tasks</CardTitle>
│   │   │             </CardHeader>
│   │   │             <CardContent>
│   │   │               {tasks.length === 0 ? (
│   │   │                 <p>No tasks available.</p>
│   │   │               ) : (
│   │   │                 <ul className="space-y-2">
│   │   │                   {tasks.map((task) => (
│   │   │                     <li key={task.id} className="p-2 border rounded-md">
│   │   │                       <h3 className="text-lg font-semibold">{task.content}</h3>
│   │   │                       <p className="text-sm text-gray-600">{task.description}</p>
│   │   │                       <p className="text-sm text-gray-500">
│   │   │                         Status: {task.status} | Priority: {task.priority}
│   │   │                       </p>
│   │   │                       <p className="text-sm text-gray-500">
│   │   │                         Project: {getProjectName(task.projectId)}
│   │   │                       </p>
│   │   │                       <p className="text-sm text-gray-500">
│   │   │                         Estimated Hours: {task.estimatedHours || 'N/A'} | Actual Hours: {task.actualHours || 'N/A'}
│   │   │                       </p>
│   │   │                       <p className="text-sm text-gray-500">
│   │   │                         Start Date: {task.startDate ? new Date(task.startDate).toLocaleDateString() : 'N/A'} | Due Date: {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'N/A'}
│   │   │                       </p>
│   │   │                     </li>
│   │   │                   ))}
│   │   │                 </ul>
│   │   │               )}
│   │   │             </CardContent>
│   │   │           </Card>
│   │   │         );
│   │   │       }
│   │   ├── TodoListSummary.tsx
│   │   │       // src/components/dashboard/DashboardLayout/TodoListSummary.tsx
│   │   │       import React from 'react';
│   │   │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       import type { TodoList } from '@/types';
│   │   │       
│   │   │       interface TodoListSummaryProps {
│   │   │         todoLists: TodoList[];
│   │   │       }
│   │   │       
│   │   │       export function TodoListSummary({ todoLists }: TodoListSummaryProps) {
│   │   │         return (
│   │   │           <Card>
│   │   │             <CardHeader>
│   │   │               <CardTitle>Todo Lists</CardTitle>
│   │   │             </CardHeader>
│   │   │             <CardContent>
│   │   │               <div className="space-y-3">
│   │   │                 {todoLists.map(list => (
│   │   │                   <div
│   │   │                     key={list.id}
│   │   │                     className="flex justify-between items-center p-3 bg-gray-800/50 rounded-lg hover:bg-gray-800/70 transition-colors"
│   │   │                   >
│   │   │                     <span>{list.name}</span>
│   │   │                     <span className="text-sm text-gray-400">
│   │   │                       {list.tasks?.length || 0} tasks
│   │   │                     </span>
│   │   │                   </div>
│   │   │                 ))}
│   │   │                 {todoLists.length === 0 && (
│   │   │                   <div className="text-center text-gray-500 py-4">
│   │   │                     No todo lists available
│   │   │                   </div>
│   │   │                 )}
│   │   │               </div>
│   │   │             </CardContent>
│   │   │           </Card>
│   │   │         );
│   │   │       }
│   │   └── index.ts
│   │           // src/components/dashboard/DashboardLayout/index.ts
│   │           export { DashboardLayout } from './DashboardLayout';
│   │           export type { DashboardLayoutProps } from './DashboardLayout';
│   │           export * from './ProjectStats';
│   │           export * from './TaskList';
│   │           export * from './ProjectList';
│   │           export * from './TodoListSummary';
│   │           
│   └── index.ts
│           export * from './DashboardLayout';
├── dialogs/
│   ├── base/
│   │   ├── BaseDialog.tsx
│   │   │       // src/components/dialogs/base/BaseDialog.tsx
│   │   │       import React from 'react';
│   │   │       import {
│   │   │         Dialog,
│   │   │         DialogContent,
│   │   │         DialogDescription,
│   │   │         DialogHeader,
│   │   │         DialogTitle,
│   │   │         DialogTrigger,
│   │   │       } from "@/components/ui/dialog";
│   │   │       import type { BaseDialogProps } from '@/types/dialogs';
│   │   │       import { cn } from '@/lib/utils';
│   │   │       
│   │   │       export function BaseDialog({
│   │   │         title,
│   │   │         description,
│   │   │         trigger,
│   │   │         isOpen,
│   │   │         onOpenChange,
│   │   │         children,
│   │   │         className,
│   │   │       }: BaseDialogProps) {
│   │   │         return (
│   │   │           <Dialog open={isOpen} onOpenChange={onOpenChange}>
│   │   │             <DialogTrigger asChild>
│   │   │               {trigger}
│   │   │             </DialogTrigger>
│   │   │             <DialogContent className={cn("sm:max-w-[425px]", className)}>
│   │   │               <DialogHeader>
│   │   │                 <DialogTitle>{title}</DialogTitle>
│   │   │                 {description && (
│   │   │                   <DialogDescription>{description}</DialogDescription>
│   │   │                 )}
│   │   │               </DialogHeader>
│   │   │               {children}
│   │   │             </DialogContent>
│   │   │           </Dialog>
│   │   │         );
│   │   │       }
│   │   ├── ConfirmDialog.tsx
│   │   │       // src/components/dialogs/base/ConfirmDialog.tsx
│   │   │       import React from 'react';
│   │   │       import { Button } from '@/components/ui/button';
│   │   │       import type { ConfirmDialogProps } from '@/types/dialogs';
│   │   │       import { BaseDialog } from './BaseDialog';
│   │   │       
│   │   │       export function ConfirmDialog({
│   │   │         title,
│   │   │         description,
│   │   │         trigger,
│   │   │         confirmLabel = 'Confirm',
│   │   │         cancelLabel = 'Cancel',
│   │   │         onConfirm,
│   │   │         variant = 'default',
│   │   │         isOpen,
│   │   │         onOpenChange,
│   │   │       }: ConfirmDialogProps) {
│   │   │         const [isSubmitting, setIsSubmitting] = React.useState(false);
│   │   │       
│   │   │         const handleConfirm = async () => {
│   │   │           setIsSubmitting(true);
│   │   │           try {
│   │   │             await onConfirm();
│   │   │             onOpenChange?.(false);
│   │   │           } finally {
│   │   │             setIsSubmitting(false);
│   │   │           }
│   │   │         };
│   │   │       
│   │   │         return (
│   │   │           <BaseDialog
│   │   │             title={title}
│   │   │             description={description}
│   │   │             trigger={trigger}
│   │   │             isOpen={isOpen}
│   │   │             onOpenChange={onOpenChange}
│   │   │           >
│   │   │             <div className="mt-4 flex justify-end gap-3">
│   │   │               <Button
│   │   │                 variant="outline"
│   │   │                 onClick={() => onOpenChange?.(false)}
│   │   │                 disabled={isSubmitting}
│   │   │               >
│   │   │                 {cancelLabel}
│   │   │               </Button>
│   │   │               <Button
│   │   │                 variant={variant}
│   │   │                 onClick={handleConfirm}
│   │   │                 disabled={isSubmitting}
│   │   │               >
│   │   │                 {isSubmitting ? 'Processing...' : confirmLabel}
│   │   │               </Button>
│   │   │             </div>
│   │   │           </BaseDialog>
│   │   │         );
│   │   │       }
│   │   ├── FormDialog.tsx
│   │   │       // src/components/dialogs/base/FormDialog.tsx
│   │   │       import React from 'react';
│   │   │       import { Button } from '@/components/ui/button';
│   │   │       import type { FormDialogProps } from '@/types/dialogs';
│   │   │       import { BaseDialog } from './BaseDialog';
│   │   │       
│   │   │       export function FormDialog<T extends Record<string, any>>({
│   │   │         title,
│   │   │         description,
│   │   │         trigger,
│   │   │         form,
│   │   │         submitLabel = 'Save',
│   │   │         cancelLabel = 'Cancel',
│   │   │         isSubmitting,
│   │   │         onSubmit,
│   │   │         isOpen,
│   │   │         onOpenChange,
│   │   │         children,
│   │   │       }: FormDialogProps<T>) {
│   │   │         const handleSubmit = async (e: React.FormEvent) => {
│   │   │           e.preventDefault();
│   │   │           await onSubmit(form.values);
│   │   │         };
│   │   │       
│   │   │         return (
│   │   │           <BaseDialog
│   │   │             title={title}
│   │   │             description={description}
│   │   │             trigger={trigger}
│   │   │             isOpen={isOpen}
│   │   │             onOpenChange={onOpenChange}
│   │   │           >
│   │   │             <form onSubmit={handleSubmit} className="space-y-4">
│   │   │               {children}
│   │   │               <div className="mt-4 flex justify-end gap-3">
│   │   │                 <Button
│   │   │                   type="button"
│   │   │                   variant="outline"
│   │   │                   onClick={() => onOpenChange?.(false)}
│   │   │                   disabled={isSubmitting}
│   │   │                 >
│   │   │                   {cancelLabel}
│   │   │                 </Button>
│   │   │                 <Button
│   │   │                   type="submit"
│   │   │                   disabled={isSubmitting}
│   │   │                 >
│   │   │                   {isSubmitting ? 'Saving...' : submitLabel}
│   │   │                 </Button>
│   │   │               </div>
│   │   │             </form>
│   │   │           </BaseDialog>
│   │   │         );
│   │   │       }
│   │   └── index.ts
│   │           export * from './BaseDialog';
│   │           export * from './ConfirmDialog';
│   │           export * from './FormDialog';
│   ├── forms/
│   │   ├── QuickAdd.tsx
│   │   │       // src/components/dialogs/forms/QuickAdd.tsx
│   │   │       import React from 'react';
│   │   │       import { FormDialog } from '@/components/dialogs/base/FormDialog';
│   │   │       import { Button } from '@/components/ui/button';
│   │   │       import { FormField } from '@/components/forms/fields';
│   │   │       import type { FieldConfig } from '@/types/forms/fields';
│   │   │       import { useForm } from '@/hooks/forms/useForm';
│   │   │       
│   │   │       interface QuickAddButtonProps {
│   │   │         onClick: () => void;
│   │   │         icon: React.ReactNode;
│   │   │         label: string;
│   │   │       }
│   │   │       
│   │   │       const QuickAddButton = ({ onClick, icon, label }: QuickAddButtonProps) => (
│   │   │         <Button
│   │   │           variant="outline"
│   │   │           className="w-full h-24 flex flex-col items-center justify-center gap-2 bg-neutral-800/50 hover:bg-neutral-800"
│   │   │           onClick={onClick}
│   │   │         >
│   │   │           {icon}
│   │   │           <span>{label}</span>
│   │   │         </Button>
│   │   │       );
│   │   │       
│   │   │       interface QuickAddProps<T> {
│   │   │         title: string;
│   │   │         description: string;
│   │   │         icon: React.ReactNode;
│   │   │         label: string;
│   │   │         fields: FieldConfig[];
│   │   │         initialValues: T;
│   │   │         isOpen: boolean;
│   │   │         onOpenChange: (open: boolean) => void;
│   │   │         onSubmit: (values: T) => Promise<void>;
│   │   │       }
│   │   │       
│   │   │       export function QuickAdd<T extends Record<string, any>>({
│   │   │         title,
│   │   │         description,
│   │   │         icon,
│   │   │         label,
│   │   │         fields,
│   │   │         initialValues,
│   │   │         isOpen,
│   │   │         onOpenChange,
│   │   │         onSubmit,
│   │   │       }: QuickAddProps<T>) {
│   │   │         const form = useForm<T>({
│   │   │           initialValues,
│   │   │           onSubmit: async (values) => {
│   │   │             await onSubmit(values);
│   │   │             onOpenChange(false);
│   │   │           },
│   │   │         });
│   │   │       
│   │   │         return (
│   │   │           <FormDialog
│   │   │             title={title}
│   │   │             description={description}
│   │   │             trigger={
│   │   │               <QuickAddButton 
│   │   │                 onClick={() => onOpenChange(true)}
│   │   │                 icon={icon}
│   │   │                 label={label}
│   │   │               />
│   │   │             }
│   │   │             form={form}
│   │   │             isOpen={isOpen}
│   │   │             onOpenChange={onOpenChange}
│   │   │             onSubmit={form.handleSubmit}
│   │   │             submitLabel={`Create ${label.split(' ')[1]}`} // "Add Project" -> "Create Project"
│   │   │           >
│   │   │             <div className="space-y-4 py-4">
│   │   │               {fields.map((field) => (
│   │   │                 <FormField
│   │   │                   key={field.name}
│   │   │                   field={field}
│   │   │                   value={form.values[field.name]}
│   │   │                   onChange={form.setFieldValue}
│   │   │                   onBlur={form.handleBlur}
│   │   │                   error={form.errors[field.name]}
│   │   │                   touched={form.touched[field.name]}
│   │   │                 />
│   │   │               ))}
│   │   │             </div>
│   │   │           </FormDialog>
│   │   │         );
│   │   │       }
│   │   ├── QuickAddDialogs.tsx
│   │   │       // src/components/dialogs/forms/QuickAddDialogs.tsx
│   │   │       import React from 'react';
│   │   │       import { QuickAdd } from './QuickAdd';
│   │   │       import { ProjectFields, ObjectiveFields, TaskFields, TimeEntryFields } from './QuickAddFields';
│   │   │       import { Folder, Target, CheckSquare, Clock } from 'lucide-react';
│   │   │       import type { 
│   │   │         ProjectFormData, 
│   │   │         ObjectiveFormData, 
│   │   │         TaskFormData, 
│   │   │         TimeEntryFormData 
│   │   │       } from '@/types';
│   │   │       import { PROJECT_STATUS, TASK_STATUS } from '@/constants';
│   │   │       
│   │   │       interface QuickAddDialogsProps {
│   │   │         projects: any[];
│   │   │         objectives: any[];
│   │   │         tasks: any[];
│   │   │         onProjectAdd: (data: ProjectFormData) => Promise<void>;
│   │   │         onObjectiveAdd: (data: ObjectiveFormData) => Promise<void>;
│   │   │         onTaskAdd: (data: TaskFormData) => Promise<void>;
│   │   │         onTimeEntryAdd: (data: TimeEntryFormData) => Promise<void>;
│   │   │       }
│   │   │       
│   │   │       export function QuickAddDialogs({
│   │   │         projects,
│   │   │         objectives,
│   │   │         tasks,
│   │   │         onProjectAdd,
│   │   │         onObjectiveAdd,
│   │   │         onTaskAdd,
│   │   │         onTimeEntryAdd
│   │   │       }: QuickAddDialogsProps) {
│   │   │         const [activeDialog, setActiveDialog] = React.useState<string | null>(null);
│   │   │       
│   │   │         // Initial values for forms
│   │   │         const initialValues = {
│   │   │           project: {
│   │   │             name: '',
│   │   │             description: '',
│   │   │             status: PROJECT_STATUS.NOT_STARTED,
│   │   │             startDate: '',
│   │   │             dueDate: '',
│   │   │             estimatedHours: ''
│   │   │           },
│   │   │           objective: {
│   │   │             name: '',
│   │   │             description: '',
│   │   │             projectId: '',
│   │   │             status: PROJECT_STATUS.NOT_STARTED,
│   │   │             startDate: '',
│   │   │             dueDate: '',
│   │   │             estimatedHours: ''
│   │   │           },
│   │   │           task: {
│   │   │             content: '',
│   │   │             description: '',
│   │   │             status: TASK_STATUS.TODO,
│   │   │             priority: 'medium',
│   │   │             projectId: '',
│   │   │             objectiveId: '',
│   │   │             startDate: '',
│   │   │             dueDate: '',
│   │   │             estimatedHours: '',
│   │   │             actualHours: ''
│   │   │           },
│   │   │           timeEntry: {
│   │   │             taskId: '',
│   │   │             startTime: '',
│   │   │             endTime: '',
│   │   │             description: ''
│   │   │           }
│   │   │         };
│   │   │       
│   │   │         return (
│   │   │           <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
│   │   │             <QuickAdd
│   │   │               title="Add New Project"
│   │   │               description="Create a new project to organize your work."
│   │   │               icon={<Folder className="h-6 w-6" />}
│   │   │               label="Add Project"
│   │   │               fields={ProjectFields}
│   │   │               initialValues={initialValues.project}
│   │   │               isOpen={activeDialog === 'project'}
│   │   │               onOpenChange={(open) => setActiveDialog(open ? 'project' : null)}
│   │   │               onSubmit={onProjectAdd}
│   │   │             />
│   │   │       
│   │   │             <QuickAdd
│   │   │               title="Add New Objective"
│   │   │               description="Create a new objective for your project."
│   │   │               icon={<Target className="h-6 w-6" />}
│   │   │               label="Add Objective"
│   │   │               fields={ObjectiveFields(projects)}
│   │   │               initialValues={initialValues.objective}
│   │   │               isOpen={activeDialog === 'objective'}
│   │   │               onOpenChange={(open) => setActiveDialog(open ? 'objective' : null)}
│   │   │               onSubmit={onObjectiveAdd}
│   │   │             />
│   │   │       
│   │   │             <QuickAdd
│   │   │               title="Add New Task"
│   │   │               description="Create a new task for your project or objective."
│   │   │               icon={<CheckSquare className="h-6 w-6" />}
│   │   │               label="Add Task"
│   │   │               fields={TaskFields(projects, objectives)}
│   │   │               initialValues={initialValues.task}
│   │   │               isOpen={activeDialog === 'task'}
│   │   │               onOpenChange={(open) => setActiveDialog(open ? 'task' : null)}
│   │   │               onSubmit={onTaskAdd}
│   │   │             />
│   │   │       
│   │   │             <QuickAdd
│   │   │               title="Add Time Entry"
│   │   │               description="Track time spent on a task."
│   │   │               icon={<Clock className="h-6 w-6" />}
│   │   │               label="Add Time"
│   │   │               fields={TimeEntryFields(tasks)}
│   │   │               initialValues={initialValues.timeEntry}
│   │   │               isOpen={activeDialog === 'time'}
│   │   │               onOpenChange={(open) => setActiveDialog(open ? 'time' : null)}
│   │   │               onSubmit={onTimeEntryAdd}
│   │   │             />
│   │   │           </div>
│   │   │         );
│   │   │       }
│   │   ├── QuickAddFields.tsx
│   │   │       // src/components/dialogs/forms/QuickAddFields.tsx
│   │   │       import React from 'react';
│   │   │       import { FormField } from '@/components/forms/fields';
│   │   │       import type { FieldConfig } from '@/types/forms/fields';
│   │   │       
│   │   │       export const ProjectFields: FieldConfig[] = [
│   │   │         {
│   │   │           name: 'name',
│   │   │           type: 'text',
│   │   │           label: 'Project Name',
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'description',
│   │   │           type: 'textarea',
│   │   │           label: 'Description',
│   │   │           rows: 3,
│   │   │         },
│   │   │         {
│   │   │           name: 'status',
│   │   │           type: 'select',
│   │   │           label: 'Status',
│   │   │           options: [
│   │   │             { value: 'not-started', label: 'Not Started' },
│   │   │             { value: 'active', label: 'Active' },
│   │   │             { value: 'completed', label: 'Completed' },
│   │   │           ],
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'startDate',
│   │   │           type: 'date',
│   │   │           label: 'Start Date',
│   │   │         },
│   │   │         {
│   │   │           name: 'dueDate',
│   │   │           type: 'date',
│   │   │           label: 'Due Date',
│   │   │         },
│   │   │         {
│   │   │           name: 'estimatedHours',
│   │   │           type: 'number',
│   │   │           label: 'Estimated Hours',
│   │   │           min: 0,
│   │   │           step: 0.5,
│   │   │         },
│   │   │       ];
│   │   │       
│   │   │       export const ObjectiveFields = (projects: any[]): FieldConfig[] => [
│   │   │         {
│   │   │           name: 'projectId',
│   │   │           type: 'select',
│   │   │           label: 'Project',
│   │   │           options: projects.map(p => ({ value: p.id, label: p.name })),
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'name',
│   │   │           type: 'text',
│   │   │           label: 'Objective Name',
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'description',
│   │   │           type: 'textarea',
│   │   │           label: 'Description',
│   │   │           rows: 3,
│   │   │         },
│   │   │         {
│   │   │           name: 'status',
│   │   │           type: 'select',
│   │   │           label: 'Status',
│   │   │           options: [
│   │   │             { value: 'not-started', label: 'Not Started' },
│   │   │             { value: 'active', label: 'Active' },
│   │   │             { value: 'completed', label: 'Completed' },
│   │   │           ],
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'startDate',
│   │   │           type: 'date',
│   │   │           label: 'Start Date',
│   │   │         },
│   │   │         {
│   │   │           name: 'dueDate',
│   │   │           type: 'date',
│   │   │           label: 'Due Date',
│   │   │         },
│   │   │         {
│   │   │           name: 'estimatedHours',
│   │   │           type: 'number',
│   │   │           label: 'Estimated Hours',
│   │   │           min: 0,
│   │   │           step: 0.5,
│   │   │         },
│   │   │       ];
│   │   │       
│   │   │       export const TaskFields = (projects: any[], objectives: any[]): FieldConfig[] => [
│   │   │         {
│   │   │           name: 'content',
│   │   │           type: 'text',
│   │   │           label: 'Task Content',
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'description',
│   │   │           type: 'textarea',
│   │   │           label: 'Description',
│   │   │           rows: 3,
│   │   │         },
│   │   │         {
│   │   │           name: 'projectId',
│   │   │           type: 'select',
│   │   │           label: 'Project',
│   │   │           options: projects.map(p => ({ value: p.id, label: p.name })),
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'objectiveId',
│   │   │           type: 'select',
│   │   │           label: 'Objective',
│   │   │           options: objectives.map(o => ({ value: o.id, label: o.name })),
│   │   │         },
│   │   │         {
│   │   │           name: 'status',
│   │   │           type: 'select',
│   │   │           label: 'Status',
│   │   │           options: [
│   │   │             { value: 'todo', label: 'Todo' },
│   │   │             { value: 'in-progress', label: 'In Progress' },
│   │   │             { value: 'done', label: 'Done' },
│   │   │           ],
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'priority',
│   │   │           type: 'select',
│   │   │           label: 'Priority',
│   │   │           options: [
│   │   │             { value: 'low', label: 'Low' },
│   │   │             { value: 'medium', label: 'Medium' },
│   │   │             { value: 'high', label: 'High' },
│   │   │           ],
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'startDate',
│   │   │           type: 'date',
│   │   │           label: 'Start Date',
│   │   │         },
│   │   │         {
│   │   │           name: 'dueDate',
│   │   │           type: 'date',
│   │   │           label: 'Due Date',
│   │   │         },
│   │   │         {
│   │   │           name: 'estimatedHours',
│   │   │           type: 'number',
│   │   │           label: 'Estimated Hours',
│   │   │           min: 0,
│   │   │           step: 0.5,
│   │   │         },
│   │   │         {
│   │   │           name: 'actualHours',
│   │   │           type: 'number',
│   │   │           label: 'Actual Hours',
│   │   │           min: 0,
│   │   │           step: 0.5,
│   │   │         },
│   │   │       ];
│   │   │       
│   │   │       export const TimeEntryFields = (tasks: any[]): FieldConfig[] => [
│   │   │         {
│   │   │           name: 'taskId',
│   │   │           type: 'select',
│   │   │           label: 'Task',
│   │   │           options: tasks.map(t => ({ value: t.id, label: t.content })),
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'startTime',
│   │   │           type: 'datetime-local',
│   │   │           label: 'Start Time',
│   │   │           required: true,
│   │   │         },
│   │   │         {
│   │   │           name: 'endTime',
│   │   │           type: 'datetime-local',
│   │   │           label: 'End Time',
│   │   │         },
│   │   │         {
│   │   │           name: 'description',
│   │   │           type: 'textarea',
│   │   │           label: 'Description',
│   │   │           rows: 3,
│   │   │         },
│   │   │       ];
│   │   └── index.ts
│   │           export * from './QuickAddFields';
│   │           export * from './QuickAdd';
│   │           export * from './QuickAddDialogs';
│   └── index.ts
│           export * from './forms/QuickAddDialogs';
│           export * from './forms/QuickAddFields';
│           export * from './forms/QuickAdd';
│           export * from './base'
├── forms/
│   ├── BaseForm.tsx
│   │       // src/components/forms/BaseForm.tsx
│   │       import React from 'react';
│   │       import {
│   │         Dialog,
│   │         DialogContent,
│   │         DialogDescription,
│   │         DialogHeader,
│   │         DialogTitle,
│   │         DialogTrigger,
│   │       } from "@/components/ui/dialog";
│   │       import { Button } from "@/components/ui/button";
│   │       import { PlusCircle } from 'lucide-react';
│   │       import type { FieldConfig } from '@/types/forms/fields';
│   │       import { FormField } from './fields';
│   │       
│   │       interface BaseFormProps<T> {
│   │         title: string;
│   │         description?: string;
│   │         triggerButton: {
│   │           label: string;
│   │           icon?: React.ReactNode;
│   │         };
│   │         fields: FieldConfig[];
│   │         onSubmit: (data: T) => Promise<void>;
│   │         defaultValues?: Partial<T>;
│   │         submitLabel?: string;
│   │       }
│   │       
│   │       export function BaseForm<T extends Record<string, any>>({
│   │         title,
│   │         description,
│   │         triggerButton,
│   │         fields,
│   │         onSubmit,
│   │         defaultValues = {},
│   │         submitLabel = 'Save'
│   │       }: BaseFormProps<T>) {
│   │         const [open, setOpen] = React.useState(false);
│   │         const [formData, setFormData] = React.useState<Partial<T>>(defaultValues);
│   │         const [errors, setErrors] = React.useState<Record<string, string>>({});
│   │         const [isSubmitting, setIsSubmitting] = React.useState(false);
│   │       
│   │         const handleFieldChange = (name: string, value: any) => {
│   │           setFormData(prev => ({
│   │             ...prev,
│   │             [name]: value
│   │           }));
│   │           if (errors[name]) {
│   │             setErrors(prev => {
│   │               const { [name]: _, ...rest } = prev;
│   │               return rest;
│   │             });
│   │           }
│   │         };
│   │       
│   │         const handleSubmit = async (e: React.FormEvent) => {
│   │           e.preventDefault();
│   │           setIsSubmitting(true);
│   │           try {
│   │             await onSubmit(formData as T);
│   │             setOpen(false);
│   │             setFormData(defaultValues);
│   │             setErrors({});
│   │           } catch (error: any) {
│   │             setErrors(prev => ({
│   │               ...prev,
│   │               submit: error.message
│   │             }));
│   │           } finally {
│   │             setIsSubmitting(false);
│   │           }
│   │         };
│   │       
│   │         return (
│   │           <Dialog open={open} onOpenChange={setOpen}>
│   │             <DialogTrigger asChild>
│   │               <Button variant="outline" className="gap-2">
│   │                 {triggerButton.icon || <PlusCircle className="h-4 w-4" />}
│   │                 {triggerButton.label}
│   │               </Button>
│   │             </DialogTrigger>
│   │             <DialogContent className="sm:max-w-[425px]">
│   │               <DialogHeader>
│   │                 <DialogTitle>{title}</DialogTitle>
│   │                 {description && <DialogDescription>{description}</DialogDescription>}
│   │               </DialogHeader>
│   │               <form onSubmit={handleSubmit} className="space-y-4 pt-4">
│   │                 {fields.map((field) => (
│   │                   <FormField
│   │                     key={field.name}
│   │                     field={field}
│   │                     value={formData[field.name]}
│   │                     onChange={handleFieldChange}
│   │                     error={errors[field.name]}
│   │                   />
│   │                 ))}
│   │                 
│   │                 {errors.submit && (
│   │                   <div className="bg-red-500/10 border border-red-500 rounded-md p-3">
│   │                     <p className="text-sm text-red-500">{errors.submit}</p>
│   │                   </div>
│   │                 )}
│   │       
│   │                 <div className="flex justify-end gap-3 pt-4">
│   │                   <Button
│   │                     type="button"
│   │                     variant="outline"
│   │                     onClick={() => setOpen(false)}
│   │                     disabled={isSubmitting}
│   │                   >
│   │                     Cancel
│   │                   </Button>
│   │                   <Button type="submit" disabled={isSubmitting}>
│   │                     {isSubmitting ? "Saving..." : submitLabel}
│   │                   </Button>
│   │                 </div>
│   │               </form>
│   │             </DialogContent>
│   │           </Dialog>
│   │         );
│   │       }
│   ├── Form.tsx
│   │       // src/components/forms/Form.tsx
│   │       import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui';
│   │       import { Button } from '@/components/ui';
│   │       import type { FormConfig, FormField } from '@/types/forms';
│   │       
│   │       interface FormProps {
│   │         config: FormConfig;
│   │         fields: FormField[];
│   │         onSubmit: (data: Record<string, any>) => Promise<void>;
│   │         icon?: React.ReactNode;
│   │       }
│   │       
│   │       export function Form({ config, fields, onSubmit, icon }: FormProps) {
│   │         const [values, setValues] = useState<Record<string, any>>({});
│   │         const [errors, setErrors] = useState<Record<string, string>>({});
│   │         const [isSubmitting, setIsSubmitting] = useState(false);
│   │       
│   │         const handleSubmit = async (e: React.FormEvent) => {
│   │           e.preventDefault();
│   │           setIsSubmitting(true);
│   │           try {
│   │             await onSubmit(values);
│   │             config.onSuccess?.();
│   │           } catch (error) {
│   │             // Handle error
│   │           } finally {
│   │             setIsSubmitting(false);
│   │           }
│   │         };
│   │       
│   │         return (
│   │           <Card className="bg-gray-800 border-gray-700">
│   │             <CardHeader>
│   │               <CardTitle className="flex items-center gap-2 text-gray-100">
│   │                 {icon}
│   │                 {config.title}
│   │               </CardTitle>
│   │             </CardHeader>
│   │             <CardContent>
│   │               <FormContext.Provider value={{ values, errors, setFieldValue }}>
│   │                 <form onSubmit={handleSubmit} className="space-y-4">
│   │                   {fields.map((field) => (
│   │                     <FormField key={field.name} field={field} />
│   │                   ))}
│   │                   <div className="flex justify-end gap-3">
│   │                     {config.showCancel && (
│   │                       <Button variant="outline" onClick={config.onCancel}>
│   │                         Cancel
│   │                       </Button>
│   │                     )}
│   │                     <Button type="submit" disabled={isSubmitting}>
│   │                       {isSubmitting ? "Saving..." : config.submitLabel || "Submit"}
│   │                     </Button>
│   │                   </div>
│   │                 </form>
│   │               </FormContext.Provider>
│   │             </CardContent>
│   │           </Card>
│   │         );
│   │       }
│   ├── FormContext.tsx
│   │       // src/components/forms/FormContext.tsx
│   │       import React from 'react';
│   │       
│   │       interface FormContextValue {
│   │         values: Record<string, any>;
│   │         errors: Record<string, string>;
│   │         touched: Record<string, boolean>;
│   │         setFieldValue: (name: string, value: any) => void;
│   │         setFieldError: (name: string, error: string) => void;
│   │         setFieldTouched: (name: string, touched: boolean) => void;
│   │       }
│   │       
│   │       const FormContext = React.createContext<FormContextValue | undefined>(undefined);
│   │       
│   │       // Example usage with ProjectForm
│   │       // src/app/page.tsx 
│   │       
│   │       // function Home() {
│   │       //   const projectConfig: FormConfig = {
│   │       //     title: "Add Project",
│   │       //     submitLabel: "Create Project",
│   │       //     onSuccess: () => {
│   │       //       refreshProjects();
│   │       //     }
│   │       //   };
│   │       
│   │       //   const projectFields: FormField[] = [
│   │       //     {
│   │       //       name: "name",
│   │       //       label: "Project Name",
│   │       //       type: "text",
│   │       //       required: true
│   │       //     },
│   │       //     {
│   │       //       name: "description", 
│   │       //       label: "Description",
│   │       //       type: "textarea"
│   │       //     },
│   │       //     {
│   │       //       name: "status",
│   │       //       label: "Status",
│   │       //       type: "select",
│   │       //       options: [
│   │       //         { label: "Not Started", value: "not-started" },
│   │       //         { label: "In Progress", value: "in-progress" },
│   │       //         { label: "Completed", value: "completed" }
│   │       //       ]
│   │       //     },
│   │       //     {
│   │       //       name: "startDate",
│   │       //       label: "Start Date", 
│   │       //       type: "date"
│   │       //     },
│   │       //     {
│   │       //       name: "dueDate",
│   │       //       label: "Due Date",
│   │       //       type: "date" 
│   │       //     }
│   │       //   ];
│   │       
│   │       //   return (
│   │       //     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
│   │       //       <Form
│   │       //         config={projectConfig}
│   │       //         fields={projectFields}
│   │       //         onSubmit={handleProjectSubmit}
│   │       //         icon={<Folder size={20} />}
│   │       //       />
│   │       
│   │       //       <Form
│   │       //         config={{
│   │       //           title: "Add Task",
│   │       //           submitLabel: "Create Task"
│   │       //         }}
│   │       //         fields={taskFields}
│   │       //         onSubmit={handleTaskSubmit}
│   │       //         icon={<CheckSquare size={20} />}
│   │       //       />
│   │       
│   │       //       {/* Similar pattern for Objective and TimeEntry forms */}
│   │       //     </div>
│   │       //   );
│   │       // }
│   │       
│   │       // src/types/forms.ts
│   │       export interface FormConfig {
│   │         title: string;
│   │         submitLabel?: string;
│   │         showCancel?: boolean;
│   │         onCancel?: () => void;
│   │         onSuccess?: () => void;
│   │       }
│   │       
│   │       export interface FormField {
│   │         name: string;
│   │         label: string;
│   │         type: 'text' | 'textarea' | 'select' | 'date' | 'number';
│   │         required?: boolean;
│   │         options?: Array<{label: string, value: string}>;
│   │         placeholder?: string;
│   │         defaultValue?: any;
│   │         validate?: (value: any) => string | undefined;
│   │       }
│   ├── fields/
│   │   ├── FormButton.tsx
│   │   │       // src/components/forms/fields/FormButtons.tsx
│   │   │       import React from 'react';
│   │   │       import { Button } from '@/components/ui/button';
│   │   │       import { cn } from '@/lib/utils';
│   │   │       import type { FormButtonsProps, ButtonColor } from '@/types/forms/fields';
│   │   │       
│   │   │       const colorVariants: Record<ButtonColor, string> = {
│   │   │         blue: 'bg-blue-600 hover:bg-blue-700',
│   │   │         green: 'bg-green-600 hover:bg-green-700',
│   │   │         yellow: 'bg-yellow-600 hover:bg-yellow-700',
│   │   │         purple: 'bg-purple-600 hover:bg-purple-700',
│   │   │         indigo: 'bg-indigo-600 hover:bg-indigo-700',
│   │   │       };
│   │   │       
│   │   │       export function FormButtons({
│   │   │         config,
│   │   │         onCancel,
│   │   │         onReset,
│   │   │         isSubmitting = false,
│   │   │         submitText = 'Save',
│   │   │         cancelText = 'Cancel',
│   │   │         color = 'blue',
│   │   │         disabled = false,
│   │   │         className
│   │   │       }: FormButtonsProps) {
│   │   │         const submitConfig = config?.submit || {
│   │   │           label: submitText,
│   │   │           color: color,
│   │   │           disabled: disabled || isSubmitting,
│   │   │         };
│   │   │       
│   │   │         const cancelConfig = config?.cancel || (onCancel ? {
│   │   │           label: cancelText,
│   │   │           variant: 'outline' as const,
│   │   │           disabled: disabled || isSubmitting,
│   │   │         } : undefined);
│   │   │       
│   │   │         return (
│   │   │           <div className={cn('flex justify-end gap-3 pt-4', className)}>
│   │   │             {cancelConfig && onCancel && (
│   │   │               <Button
│   │   │                 type="button"
│   │   │                 variant={cancelConfig.variant || 'outline'}
│   │   │                 size={cancelConfig.size}
│   │   │                 onClick={onCancel}
│   │   │                 disabled={cancelConfig.disabled}
│   │   │                 className={cancelConfig.className}
│   │   │               >
│   │   │                 {cancelConfig.icon}
│   │   │                 {cancelConfig.label}
│   │   │               </Button>
│   │   │             )}
│   │   │             
│   │   │             <Button
│   │   │               type="submit"
│   │   │               variant={submitConfig.variant || 'default'}
│   │   │               size={submitConfig.size}
│   │   │               disabled={submitConfig.disabled}
│   │   │               className={cn(
│   │   │                 colorVariants[submitConfig.color || color],
│   │   │                 submitConfig.className
│   │   │               )}
│   │   │             >
│   │   │               {submitConfig.icon}
│   │   │               {isSubmitting ? 'Saving...' : submitConfig.label}
│   │   │             </Button>
│   │   │       
│   │   │             {config?.reset && onReset && (
│   │   │               <Button
│   │   │                 type="button"
│   │   │                 variant={config.reset.variant || 'ghost'}
│   │   │                 size={config.reset.size}
│   │   │                 onClick={onReset}
│   │   │                 disabled={config.reset.disabled}
│   │   │                 className={config.reset.className}
│   │   │               >
│   │   │                 {config.reset.icon}
│   │   │                 {config.reset.label}
│   │   │               </Button>
│   │   │             )}
│   │   │           </div>
│   │   │         );
│   │   │       }
│   │   ├── FormField.tsx
│   │   │       // src/components/forms/fields/FormField.tsx
│   │   │       import React from 'react';
│   │   │       import type { FieldConfig, FormFieldProps } from '@/types/forms/fields';
│   │   │       import { Input } from "@/components/ui/input";
│   │   │       import { Textarea } from "@/components/ui/textarea";
│   │   │       import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
│   │   │       
│   │   │       // Separate the wrapper into its own component file
│   │   │       export const FormFieldLabel: React.FC<{
│   │   │         label: string;
│   │   │         required?: boolean;
│   │   │         htmlFor?: string;
│   │   │       }> = ({ label, required, htmlFor }) => (
│   │   │         <label 
│   │   │           htmlFor={htmlFor}
│   │   │           className="text-sm font-medium text-gray-200"
│   │   │         >
│   │   │           {label}
│   │   │           {required && <span className="text-red-500 ml-1">*</span>}
│   │   │         </label>
│   │   │       );
│   │   │       
│   │   │       // Field wrapper with error handling
│   │   │       export const FormFieldWrapper: React.FC<{
│   │   │         children: React.ReactNode;
│   │   │         label: string;
│   │   │         required?: boolean;
│   │   │         error?: string;
│   │   │         htmlFor?: string;
│   │   │       }> = ({ children, label, required, error, htmlFor }) => (
│   │   │         <div className="space-y-2">
│   │   │           <FormFieldLabel label={label} required={required} htmlFor={htmlFor} />
│   │   │           {children}
│   │   │           {error && <p className="text-sm text-red-500">{error}</p>}
│   │   │         </div>
│   │   │       );
│   │   │       
│   │   │       // Main FormField component
│   │   │       export const FormField = React.forwardRef<HTMLDivElement, FormFieldProps>(({
│   │   │         field,
│   │   │         value,
│   │   │         onChange,
│   │   │         onBlur,
│   │   │         error,
│   │   │         touched
│   │   │       }, ref) => {
│   │   │         if (!field) {
│   │   │           return null;
│   │   │         }
│   │   │       
│   │   │         const handleChange = (newValue: string) => {
│   │   │           onChange?.(field.name, newValue);
│   │   │         };
│   │   │       
│   │   │         const handleBlur = () => {
│   │   │           onBlur?.(field.name);
│   │   │         };
│   │   │       
│   │   │         const commonProps = {
│   │   │           id: field.name,
│   │   │           name: field.name,
│   │   │           value: value ?? '',
│   │   │           onChange: (e: React.ChangeEvent<any>) => handleChange(e.target.value),
│   │   │           onBlur: handleBlur,
│   │   │           required: field.required,
│   │   │           disabled: field.disabled,
│   │   │           placeholder: field.placeholder,
│   │   │           className: field.className,
│   │   │         };
│   │   │       
│   │   │         const renderInput = () => {
│   │   │           switch (field.type) {
│   │   │             case 'textarea':
│   │   │               return (
│   │   │                 <Textarea
│   │   │                   {...commonProps}
│   │   │                   rows={field.rows}
│   │   │                 />
│   │   │               );
│   │   │       
│   │   │             case 'select':
│   │   │               return (
│   │   │                 <Select
│   │   │                   value={value ?? ''}
│   │   │                   onValueChange={handleChange}
│   │   │                   disabled={field.disabled}
│   │   │                 >
│   │   │                   <SelectTrigger>
│   │   │                     <SelectValue placeholder={field.placeholder || `Select ${field.label}`} />
│   │   │                   </SelectTrigger>
│   │   │                   <SelectContent>
│   │   │                     {field.options?.map((option) => (
│   │   │                       <SelectItem key={option.value} value={option.value}>
│   │   │                         {option.label}
│   │   │                       </SelectItem>
│   │   │                     ))}
│   │   │                   </SelectContent>
│   │   │                 </Select>
│   │   │               );
│   │   │       
│   │   │             case 'number':
│   │   │               return (
│   │   │                 <Input
│   │   │                   {...commonProps}
│   │   │                   type="number"
│   │   │                   min={field.min}
│   │   │                   max={field.max}
│   │   │                   step={field.step}
│   │   │                 />
│   │   │               );
│   │   │       
│   │   │             case 'date':
│   │   │             case 'datetime-local':
│   │   │               return (
│   │   │                 <Input
│   │   │                   {...commonProps}
│   │   │                   type={field.type}
│   │   │                   min={field.min}
│   │   │                   max={field.max}
│   │   │                 />
│   │   │               );
│   │   │       
│   │   │             default:
│   │   │               return (
│   │   │                 <Input
│   │   │                   {...commonProps}
│   │   │                   type="text"
│   │   │                 />
│   │   │               );
│   │   │           }
│   │   │         };
│   │   │       
│   │   │         return (
│   │   │           <FormFieldWrapper
│   │   │             label={field.label}
│   │   │             required={field.required}
│   │   │             error={error}
│   │   │             htmlFor={field.name}
│   │   │           >
│   │   │             {renderInput()}
│   │   │           </FormFieldWrapper>
│   │   │         );
│   │   │       });
│   │   │       
│   │   │       FormField.displayName = 'FormField';
│   │   └── index.ts
│   │           // src/components/forms/fields/index.ts
│   │           export { FormField, FormFieldWrapper, FormFieldLabel } from './FormField';
│   │           export { FormButtons, } from './FormButton';
│   └── index.ts
│           
│           // src/components/forms/index.ts
│           export * from './BaseForm';
│           export * from './fields'
├── index.ts
│       export * from './dashboard';
│       // export * from './dialogs';
│       export * from './forms';
│       export * from './ui';
└── ui/
    ├── button.tsx
    │       import * as React from "react"
    │       import { Slot } from "@radix-ui/react-slot"
    │       import { cva, type VariantProps } from "class-variance-authority"
    │       
    │       import { cn } from "@/lib/utils"
    │       
    │       const buttonVariants = cva(
    │         "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300",
    │         {
    │           variants: {
    │             variant: {
    │               default: "bg-neutral-900 text-neutral-50 hover:bg-neutral-900/90 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50/90",
    │               destructive:
    │                 "bg-red-500 text-neutral-50 hover:bg-red-500/90 dark:bg-red-900 dark:text-neutral-50 dark:hover:bg-red-900/90",
    │               outline:
    │                 "border border-neutral-200 bg-white hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800 dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50",
    │               secondary:
    │                 "bg-neutral-100 text-neutral-900 hover:bg-neutral-100/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80",
    │               ghost: "hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50",
    │               link: "text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50",
    │             },
    │             size: {
    │               default: "h-10 px-4 py-2",
    │               sm: "h-9 rounded-md px-3",
    │               lg: "h-11 rounded-md px-8",
    │               icon: "h-10 w-10",
    │             },
    │           },
    │           defaultVariants: {
    │             variant: "default",
    │             size: "default",
    │           },
    │         }
    │       )
    │       
    │       export interface ButtonProps
    │         extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    │           VariantProps<typeof buttonVariants> {
    │         asChild?: boolean
    │       }
    │       
    │       const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    │         ({ className, variant, size, asChild = false, ...props }, ref) => {
    │           const Comp = asChild ? Slot : "button"
    │           return (
    │             <Comp
    │               className={cn(buttonVariants({ variant, size, className }))}
    │               ref={ref}
    │               {...props}
    │             />
    │           )
    │         }
    │       )
    │       Button.displayName = "Button"
    │       
    │       export { Button, buttonVariants }
    ├── card/
    │   ├── Card.tsx
    │   │       // src/components/core/Card/Card.tsx
    │   │       import React from 'react';
    │   │       
    │   │       interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
    │   │         children: React.ReactNode;
    │   │       }
    │   │       
    │   │       export function Card({ children, className = '', ...props }: CardProps) {
    │   │         return (
    │   │           <div 
    │   │             className={`rounded-lg border border-gray-700 bg-gray-800/40 shadow-sm ${className}`}
    │   │             {...props}
    │   │           >
    │   │             {children}
    │   │           </div>
    │   │         );
    │   │       }
    │   ├── CardContent.tsx
    │   │       // src/components/core/Card/CardContent.tsx
    │   │       import React from 'react';
    │   │       
    │   │       interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {
    │   │         children: React.ReactNode;
    │   │       }
    │   │       
    │   │       export function CardContent({ children, className = '', ...props }: CardContentProps) {
    │   │         return (
    │   │           <div 
    │   │             className={`p-6 pt-0 ${className}`}
    │   │             {...props}
    │   │           >
    │   │             {children}
    │   │           </div>
    │   │         );
    │   │       }
    │   │       
    │   ├── CardHeader.tsx
    │   │       // src/components/core/Card/CardHeader.tsx
    │   │       import React from 'react';
    │   │       
    │   │       interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
    │   │         children: React.ReactNode;
    │   │       }
    │   │       
    │   │       export function CardHeader({ children, className = '', ...props }: CardHeaderProps) {
    │   │         return (
    │   │           <div 
    │   │             className={`flex flex-col space-y-1.5 p-6 ${className}`}
    │   │             {...props}
    │   │           >
    │   │             {children}
    │   │           </div>
    │   │         );
    │   │       }
    │   │       
    │   ├── CardTitle.tsx
    │   │       // src/components/core/Card/CardTitle.tsx
    │   │       import React from 'react';
    │   │       
    │   │       interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {
    │   │         children: React.ReactNode;
    │   │       }
    │   │       
    │   │       export function CardTitle({ children, className = '', ...props }: CardTitleProps) {
    │   │         return (
    │   │           <h3 
    │   │             className={`font-semibold leading-none tracking-tight text-lg ${className}`}
    │   │             {...props}
    │   │           >
    │   │             {children}
    │   │           </h3>
    │   │         );
    │   │       }
    │   │       
    │   └── index.ts
    │           // src/components/core/Card/index.ts
    │           export * from './Card';
    │           export * from './CardHeader';
    │           export * from './CardTitle';
    │           export * from './CardContent';
    ├── dialog.tsx
    │       "use client"
    │       
    │       import * as React from "react"
    │       import * as DialogPrimitive from "@radix-ui/react-dialog"
    │       import { X } from "lucide-react"
    │       
    │       import { cn } from "@/lib/utils"
    │       
    │       const Dialog = DialogPrimitive.Root
    │       
    │       const DialogTrigger = DialogPrimitive.Trigger
    │       
    │       const DialogPortal = DialogPrimitive.Portal
    │       
    │       const DialogClose = DialogPrimitive.Close
    │       
    │       const DialogOverlay = React.forwardRef<
    │         React.ElementRef<typeof DialogPrimitive.Overlay>,
    │         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
    │       >(({ className, ...props }, ref) => (
    │         <DialogPrimitive.Overlay
    │           ref={ref}
    │           className={cn(
    │             "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
    │             className
    │           )}
    │           {...props}
    │         />
    │       ))
    │       DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
    │       
    │       const DialogContent = React.forwardRef<
    │         React.ElementRef<typeof DialogPrimitive.Content>,
    │         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
    │       >(({ className, children, ...props }, ref) => (
    │         <DialogPortal>
    │           <DialogOverlay />
    │           <DialogPrimitive.Content
    │             ref={ref}
    │             className={cn(
    │               "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-neutral-200 bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg dark:border-neutral-800 dark:bg-neutral-950",
    │               className
    │             )}
    │             {...props}
    │           >
    │             {children}
    │             <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-neutral-100 data-[state=open]:text-neutral-500 dark:ring-offset-neutral-950 dark:focus:ring-neutral-300 dark:data-[state=open]:bg-neutral-800 dark:data-[state=open]:text-neutral-400">
    │               <X className="h-4 w-4" />
    │               <span className="sr-only">Close</span>
    │             </DialogPrimitive.Close>
    │           </DialogPrimitive.Content>
    │         </DialogPortal>
    │       ))
    │       DialogContent.displayName = DialogPrimitive.Content.displayName
    │       
    │       const DialogHeader = ({
    │         className,
    │         ...props
    │       }: React.HTMLAttributes<HTMLDivElement>) => (
    │         <div
    │           className={cn(
    │             "flex flex-col space-y-1.5 text-center sm:text-left",
    │             className
    │           )}
    │           {...props}
    │         />
    │       )
    │       DialogHeader.displayName = "DialogHeader"
    │       
    │       const DialogFooter = ({
    │         className,
    │         ...props
    │       }: React.HTMLAttributes<HTMLDivElement>) => (
    │         <div
    │           className={cn(
    │             "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
    │             className
    │           )}
    │           {...props}
    │         />
    │       )
    │       DialogFooter.displayName = "DialogFooter"
    │       
    │       const DialogTitle = React.forwardRef<
    │         React.ElementRef<typeof DialogPrimitive.Title>,
    │         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
    │       >(({ className, ...props }, ref) => (
    │         <DialogPrimitive.Title
    │           ref={ref}
    │           className={cn(
    │             "text-lg font-semibold leading-none tracking-tight",
    │             className
    │           )}
    │           {...props}
    │         />
    │       ))
    │       DialogTitle.displayName = DialogPrimitive.Title.displayName
    │       
    │       const DialogDescription = React.forwardRef<
    │         React.ElementRef<typeof DialogPrimitive.Description>,
    │         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
    │       >(({ className, ...props }, ref) => (
    │         <DialogPrimitive.Description
    │           ref={ref}
    │           className={cn("text-sm text-neutral-500 dark:text-neutral-400", className)}
    │           {...props}
    │         />
    │       ))
    │       DialogDescription.displayName = DialogPrimitive.Description.displayName
    │       
    │       export {
    │         Dialog,
    │         DialogPortal,
    │         DialogOverlay,
    │         DialogClose,
    │         DialogTrigger,
    │         DialogContent,
    │         DialogHeader,
    │         DialogFooter,
    │         DialogTitle,
    │         DialogDescription,
    │       }
    ├── index.ts
    │       export * from './button';
    │       export * from './dialog';
    │       export * from './input';
    │       export * from './select';
    │       export * from './switch';
    │       export * from './textarea';
    │       export * from './card';
    │       export * from './modal';
    ├── input.tsx
    │       import * as React from "react"
    │       
    │       import { cn } from "@/lib/utils"
    │       
    │       const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
    │         ({ className, type, ...props }, ref) => {
    │           return (
    │             <input
    │               type={type}
    │               className={cn(
    │                 "flex h-10 w-full rounded-md border border-neutral-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-neutral-950 placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:file:text-neutral-50 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300",
    │                 className
    │               )}
    │               ref={ref}
    │               {...props}
    │             />
    │           )
    │         }
    │       )
    │       Input.displayName = "Input"
    │       
    │       export { Input }
    ├── modal/
    │   ├── Modal.tsx
    │   │       // src/components/core/Modal.tsx
    │   │       import React from 'react';
    │   │       
    │   │       interface ModalProps {
    │   │         children: React.ReactNode;
    │   │         onClose: () => void;
    │   │       }
    │   │       
    │   │       export const Modal: React.FC<ModalProps> = ({ children, onClose }) => {
    │   │         return (
    │   │           <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
    │   │             <div className="bg-white rounded shadow-lg w-11/12 md:w-1/2 lg:w-1/3 p-6 relative">
    │   │               <button
    │   │                 onClick={onClose}
    │   │                 className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
    │   │               >
    │   │                 &times;
    │   │               </button>
    │   │               {children}
    │   │             </div>
    │   │           </div>
    │   │         );
    │   │       };
    │   └── index.ts
    │           export * from './Modal';
    ├── select.tsx
    │       "use client"
    │       
    │       import * as React from "react"
    │       import * as SelectPrimitive from "@radix-ui/react-select"
    │       import { Check, ChevronDown, ChevronUp } from "lucide-react"
    │       
    │       import { cn } from "@/lib/utils"
    │       
    │       const Select = SelectPrimitive.Root
    │       
    │       const SelectGroup = SelectPrimitive.Group
    │       
    │       const SelectValue = SelectPrimitive.Value
    │       
    │       const SelectTrigger = React.forwardRef<
    │         React.ElementRef<typeof SelectPrimitive.Trigger>,
    │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
    │       >(({ className, children, ...props }, ref) => (
    │         <SelectPrimitive.Trigger
    │           ref={ref}
    │           className={cn(
    │             "flex h-10 w-full items-center justify-between rounded-md border border-neutral-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus:ring-neutral-300",
    │             className
    │           )}
    │           {...props}
    │         >
    │           {children}
    │           <SelectPrimitive.Icon asChild>
    │             <ChevronDown className="h-4 w-4 opacity-50" />
    │           </SelectPrimitive.Icon>
    │         </SelectPrimitive.Trigger>
    │       ))
    │       SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
    │       
    │       const SelectScrollUpButton = React.forwardRef<
    │         React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
    │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
    │       >(({ className, ...props }, ref) => (
    │         <SelectPrimitive.ScrollUpButton
    │           ref={ref}
    │           className={cn(
    │             "flex cursor-default items-center justify-center py-1",
    │             className
    │           )}
    │           {...props}
    │         >
    │           <ChevronUp className="h-4 w-4" />
    │         </SelectPrimitive.ScrollUpButton>
    │       ))
    │       SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
    │       
    │       const SelectScrollDownButton = React.forwardRef<
    │         React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
    │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
    │       >(({ className, ...props }, ref) => (
    │         <SelectPrimitive.ScrollDownButton
    │           ref={ref}
    │           className={cn(
    │             "flex cursor-default items-center justify-center py-1",
    │             className
    │           )}
    │           {...props}
    │         >
    │           <ChevronDown className="h-4 w-4" />
    │         </SelectPrimitive.ScrollDownButton>
    │       ))
    │       SelectScrollDownButton.displayName =
    │         SelectPrimitive.ScrollDownButton.displayName
    │       
    │       const SelectContent = React.forwardRef<
    │         React.ElementRef<typeof SelectPrimitive.Content>,
    │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
    │       >(({ className, children, position = "popper", ...props }, ref) => (
    │         <SelectPrimitive.Portal>
    │           <SelectPrimitive.Content
    │             ref={ref}
    │             className={cn(
    │               "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-neutral-200 bg-white text-neutral-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50",
    │               position === "popper" &&
    │                 "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
    │               className
    │             )}
    │             position={position}
    │             {...props}
    │           >
    │             <SelectScrollUpButton />
    │             <SelectPrimitive.Viewport
    │               className={cn(
    │                 "p-1",
    │                 position === "popper" &&
    │                   "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
    │               )}
    │             >
    │               {children}
    │             </SelectPrimitive.Viewport>
    │             <SelectScrollDownButton />
    │           </SelectPrimitive.Content>
    │         </SelectPrimitive.Portal>
    │       ))
    │       SelectContent.displayName = SelectPrimitive.Content.displayName
    │       
    │       const SelectLabel = React.forwardRef<
    │         React.ElementRef<typeof SelectPrimitive.Label>,
    │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
    │       >(({ className, ...props }, ref) => (
    │         <SelectPrimitive.Label
    │           ref={ref}
    │           className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    │           {...props}
    │         />
    │       ))
    │       SelectLabel.displayName = SelectPrimitive.Label.displayName
    │       
    │       const SelectItem = React.forwardRef<
    │         React.ElementRef<typeof SelectPrimitive.Item>,
    │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
    │       >(({ className, children, ...props }, ref) => (
    │         <SelectPrimitive.Item
    │           ref={ref}
    │           className={cn(
    │             "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-neutral-100 focus:text-neutral-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-neutral-800 dark:focus:text-neutral-50",
    │             className
    │           )}
    │           {...props}
    │         >
    │           <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
    │             <SelectPrimitive.ItemIndicator>
    │               <Check className="h-4 w-4" />
    │             </SelectPrimitive.ItemIndicator>
    │           </span>
    │       
    │           <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    │         </SelectPrimitive.Item>
    │       ))
    │       SelectItem.displayName = SelectPrimitive.Item.displayName
    │       
    │       const SelectSeparator = React.forwardRef<
    │         React.ElementRef<typeof SelectPrimitive.Separator>,
    │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
    │       >(({ className, ...props }, ref) => (
    │         <SelectPrimitive.Separator
    │           ref={ref}
    │           className={cn("-mx-1 my-1 h-px bg-neutral-100 dark:bg-neutral-800", className)}
    │           {...props}
    │         />
    │       ))
    │       SelectSeparator.displayName = SelectPrimitive.Separator.displayName
    │       
    │       export {
    │         Select,
    │         SelectGroup,
    │         SelectValue,
    │         SelectTrigger,
    │         SelectContent,
    │         SelectLabel,
    │         SelectItem,
    │         SelectSeparator,
    │         SelectScrollUpButton,
    │         SelectScrollDownButton,
    │       }
    ├── switch.tsx
    │       "use client"
    │       
    │       import * as React from "react"
    │       import * as SwitchPrimitives from "@radix-ui/react-switch"
    │       
    │       import { cn } from "@/lib/utils"
    │       
    │       const Switch = React.forwardRef<
    │         React.ElementRef<typeof SwitchPrimitives.Root>,
    │         React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
    │       >(({ className, ...props }, ref) => (
    │         <SwitchPrimitives.Root
    │           className={cn(
    │             "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 focus-visible:ring-offset-white disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-neutral-900 data-[state=unchecked]:bg-neutral-200 dark:focus-visible:ring-neutral-300 dark:focus-visible:ring-offset-neutral-950 dark:data-[state=checked]:bg-neutral-50 dark:data-[state=unchecked]:bg-neutral-800",
    │             className
    │           )}
    │           {...props}
    │           ref={ref}
    │         >
    │           <SwitchPrimitives.Thumb
    │             className={cn(
    │               "pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0 dark:bg-neutral-950"
    │             )}
    │           />
    │         </SwitchPrimitives.Root>
    │       ))
    │       Switch.displayName = SwitchPrimitives.Root.displayName
    │       
    │       export { Switch }
    └── textarea.tsx
            import * as React from "react"
            
            import { cn } from "@/lib/utils"
            
            const Textarea = React.forwardRef<
              HTMLTextAreaElement,
              React.ComponentProps<"textarea">
            >(({ className, ...props }, ref) => {
              return (
                <textarea
                  className={cn(
                    "flex min-h-[80px] w-full rounded-md border border-neutral-200 bg-white px-3 py-2 text-base ring-offset-white placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300",
                    className
                  )}
                  ref={ref}
                  {...props}
                />
              )
            })
            Textarea.displayName = "Textarea"
            
            export { Textarea }

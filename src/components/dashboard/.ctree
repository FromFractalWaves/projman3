dashboard/
├── DashboardLayout/
│   ├── DashboardGrid.tsx
│   │       import React from 'react';
│   │       import { cn } from '@/lib/utils';
│   │       
│   │       interface DashboardGridProps {
│   │         children: React.ReactNode;
│   │         className?: string;
│   │         fullWidth?: boolean;
│   │         gap?: 'sm' | 'md' | 'lg';
│   │         columns?: 1 | 2 | 3 | 4;
│   │       }
│   │       
│   │       export function DashboardGrid({
│   │         children,
│   │         className,
│   │         fullWidth = false,
│   │         gap = 'md',
│   │         columns = 3
│   │       }: DashboardGridProps) {
│   │         const gapClasses = {
│   │           sm: 'gap-3',
│   │           md: 'gap-6',
│   │           lg: 'gap-8'
│   │         };
│   │       
│   │         const columnClasses = {
│   │           1: 'grid-cols-1',
│   │           2: 'grid-cols-1 lg:grid-cols-2',
│   │           3: 'grid-cols-1 lg:grid-cols-3',
│   │           4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4'
│   │         };
│   │       
│   │         return (
│   │           <div className={cn(
│   │             'grid',
│   │             columnClasses[columns],
│   │             gapClasses[gap],
│   │             fullWidth ? 'w-full' : 'max-w-screen-2xl mx-auto',
│   │             className
│   │           )}>
│   │             {children}
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       // Item wrapper component for grid items
│   │       interface DashboardGridItemProps {
│   │         children: React.ReactNode;
│   │         className?: string;
│   │         colSpan?: 1 | 2 | 3;
│   │       }
│   │       
│   │       export function DashboardGridItem({
│   │         children,
│   │         className,
│   │         colSpan = 1
│   │       }: DashboardGridItemProps) {
│   │         const spanClasses = {
│   │           1: '',
│   │           2: 'lg:col-span-2',
│   │           3: 'lg:col-span-3'
│   │         };
│   │       
│   │         return (
│   │           <div className={cn(spanClasses[colSpan], className)}>
│   │             {children}
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export default DashboardGrid;
│   ├── DashboardHeader.tsx
│   │       import React from 'react';
│   │       import { Button } from '@/components/ui/button';
│   │       import { cn } from '@/lib/utils';
│   │       import { RefreshCw, Bell } from 'lucide-react';
│   │       
│   │       import type { DashboardHeaderProps } from '@/types/dashboard';
│   │       
│   │       export function DashboardHeader({
│   │         title,
│   │         description,
│   │         stats,
│   │         onRefresh,
│   │         className,
│   │         actions
│   │       }: DashboardHeaderProps) {
│   │         const [isRefreshing, setIsRefreshing] = React.useState(false);
│   │       
│   │         const handleRefresh = async () => {
│   │           if (!onRefresh || isRefreshing) return;
│   │           
│   │           setIsRefreshing(true);
│   │           try {
│   │             await onRefresh();
│   │           } finally {
│   │             setIsRefreshing(false);
│   │           }
│   │         };
│   │       
│   │         return (
│   │           <div className={cn('space-y-4', className)}>
│   │             <div className="flex items-start justify-between">
│   │               <div className="space-y-1">
│   │                 <h1 className="text-2xl font-bold text-zinc-100">{title}</h1>
│   │                 {description && (
│   │                   <p className="text-sm text-zinc-400">{description}</p>
│   │                 )}
│   │               </div>
│   │       
│   │               <div className="flex items-center gap-2">
│   │                 {actions}
│   │                 {onRefresh && (
│   │                   <Button
│   │                     variant="outline"
│   │                     size="sm"
│   │                     onClick={handleRefresh}
│   │                     disabled={isRefreshing}
│   │                     className={cn(
│   │                       'gap-2',
│   │                       isRefreshing && 'opacity-50'
│   │                     )}
│   │                   >
│   │                     <RefreshCw className={cn(
│   │                       'h-4 w-4',
│   │                       isRefreshing && 'animate-spin'
│   │                     )} />
│   │                     <span className="hidden sm:inline">Refresh</span>
│   │                   </Button>
│   │                 )}
│   │                 <Button
│   │                   variant="outline"
│   │                   size="icon"
│   │                   className="relative"
│   │                 >
│   │                   <Bell className="h-4 w-4" />
│   │                   <span className="absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-[10px] font-medium text-white">
│   │                     3
│   │                   </span>
│   │                 </Button>
│   │               </div>
│   │             </div>
│   │       
│   │             {stats && stats.length > 0 && (
│   │               <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
│   │                 {stats.map((stat, index) => (
│   │                   <div
│   │                     key={index}
│   │                     className="rounded-lg border border-zinc-800 bg-zinc-900/50 p-4"
│   │                   >
│   │                     <p className="text-sm font-medium text-zinc-400">{stat.label}</p>
│   │                     <p className="mt-2 text-3xl font-semibold text-zinc-100">
│   │                       {stat.value}
│   │                     </p>
│   │                   </div>
│   │                 ))}
│   │               </div>
│   │             )}
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export default DashboardHeader;
│   ├── DashboardLayout.tsx
│   │       import React from 'react';
│   │       import { DashboardHeader } from './DashboardHeader';
│   │       import { DashboardGrid, DashboardGridItem } from './DashboardGrid';
│   │       import { DashboardStats } from './DashboardStats';
│   │       import { Card } from '@/components/ui/card';
│   │       import { CardList } from '@/components/cards';
│   │       import { 
│   │         Folder, 
│   │         CheckSquare,
│   │         ListChecks,
│   │       } from 'lucide-react';
│   │       import type { Project, Objective, Task, TodoList } from '@/types';
│   │       
│   │       export interface DashboardLayoutProps {
│   │         projects: Project[];
│   │         objectives: Objective[];
│   │         tasks: Task[];
│   │         todoLists: TodoList[];
│   │         taskStats: {
│   │           todo: number;
│   │           inProgress: number;
│   │           done: number;
│   │         };
│   │         onRefresh: () => Promise<void>;
│   │       }
│   │       
│   │       export function DashboardLayout({
│   │         projects,
│   │         objectives,
│   │         tasks,
│   │         todoLists,
│   │         taskStats,
│   │         onRefresh,
│   │       }: DashboardLayoutProps) {
│   │         const stats = {
│   │           totalProjects: projects.length,
│   │           activeProjects: projects.filter(p => p.status === 'active').length,
│   │           totalTasks: tasks.length,
│   │           completedTasks: taskStats.done,
│   │           totalObjectives: objectives.length,
│   │           achievedObjectives: objectives.filter(o => o.status === 'completed').length,
│   │           overdueTasks: tasks.filter(t => t.dueDate && new Date(t.dueDate) < new Date()).length,
│   │           projectProgress: Math.round((projects.filter(p => p.status === 'completed').length / projects.length) * 100)
│   │         };
│   │       
│   │         return (
│   │           <div className="min-h-screen bg-zinc-900 p-6 space-y-8">
│   │             <DashboardHeader
│   │               title="Dashboard"
│   │               description={`Managing ${projects.length} projects with ${objectives.length} objectives and ${tasks.length} tasks`}
│   │               onRefresh={onRefresh}
│   │             />
│   │       
│   │             <DashboardStats stats={stats} />
│   │       
│   │             <DashboardGrid>
│   │               <DashboardGridItem colSpan={2}>
│   │                 {/* Projects Section */}
│   │                 <Card className="bg-zinc-800/40 border-zinc-700/50">
│   │                   <div className="p-6 space-y-4">
│   │                     <div className="flex items-center gap-2">
│   │                       <Folder className="h-5 w-5 text-zinc-400" />
│   │                       <h2 className="text-lg font-semibold text-zinc-100">Projects</h2>
│   │                     </div>
│   │                     <CardList
│   │                       type="project"
│   │                       items={projects}
│   │                       variant="compact"
│   │                     />
│   │                   </div>
│   │                 </Card>
│   │       
│   │                 {/* Tasks Section */}
│   │                 <Card className="bg-zinc-800/40 border-zinc-700/50 mt-6">
│   │                   <div className="p-6 space-y-4">
│   │                     <div className="flex items-center gap-2">
│   │                       <CheckSquare className="h-5 w-5 text-zinc-400" />
│   │                       <h2 className="text-lg font-semibold text-zinc-100">Recent Tasks</h2>
│   │                     </div>
│   │                     <CardList
│   │                       type="task"
│   │                       items={tasks.slice(0, 5)}
│   │                       variant="compact"
│   │                     />
│   │                   </div>
│   │                 </Card>
│   │               </DashboardGridItem>
│   │       
│   │               <DashboardGridItem>
│   │                 {/* Todo Lists */}
│   │                 <Card className="bg-zinc-800/40 border-zinc-700/50">
│   │                   <div className="p-6 space-y-4">
│   │                     <div className="flex items-center gap-2">
│   │                       <ListChecks className="h-5 w-5 text-zinc-400" />
│   │                       <h2 className="text-lg font-semibold text-zinc-100">Todo Lists</h2>
│   │                     </div>
│   │                     <CardList
│   │                       type="todoList"
│   │                       items={todoLists}
│   │                       variant="compact"
│   │                     />
│   │                   </div>
│   │                 </Card>
│   │               </DashboardGridItem>
│   │             </DashboardGrid>
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export default DashboardLayout;
│   ├── DashboardStats.tsx
│   │       import React from 'react';
│   │       import { Card } from '@/components/ui/card';
│   │       import { cn } from '@/lib/utils';
│   │       import { 
│   │         BarChart2, 
│   │         TrendingUp, 
│   │         TrendingDown,
│   │         Clock,
│   │         Target,
│   │         CheckSquare,
│   │         AlertTriangle
│   │       } from 'lucide-react';
│   │       import { Progress } from '@/components/ui/progress';
│   │       
│   │       interface StatCardProps {
│   │         title: string;
│   │         value: string | number;
│   │         icon?: React.ReactNode;
│   │         trend?: {
│   │           value: number;
│   │           label: string;
│   │           direction: 'up' | 'down' | 'neutral';
│   │         };
│   │         progress?: {
│   │           value: number;
│   │           max: number;
│   │         };
│   │         className?: string;
│   │       }
│   │       
│   │       function StatCard({
│   │         title,
│   │         value,
│   │         icon,
│   │         trend,
│   │         progress,
│   │         className
│   │       }: StatCardProps) {
│   │         return (
│   │           <Card className={cn(
│   │             "bg-zinc-900/50 border-zinc-800/50", 
│   │             className
│   │           )}>
│   │             <div className="p-6 space-y-4">
│   │               <div className="flex items-center justify-between">
│   │                 <div className="flex items-center gap-2 text-sm text-zinc-400">
│   │                   {icon}
│   │                   <span>{title}</span>
│   │                 </div>
│   │                 <div className="text-2xl font-semibold text-zinc-100">
│   │                   {value}
│   │                 </div>
│   │               </div>
│   │       
│   │               {trend && (
│   │                 <div className="flex items-center gap-2 text-sm">
│   │                   {trend.direction === 'up' ? (
│   │                     <>
│   │                       <TrendingUp className="h-4 w-4 text-emerald-500" />
│   │                       <span className="text-emerald-500">{trend.value}%</span>
│   │                     </>
│   │                   ) : trend.direction === 'down' ? (
│   │                     <>
│   │                       <TrendingDown className="h-4 w-4 text-red-500" />
│   │                       <span className="text-red-500">{trend.value}%</span>
│   │                     </>
│   │                   ) : null}
│   │                   <span className="text-zinc-400">{trend.label}</span>
│   │                 </div>
│   │               )}
│   │       
│   │               {progress && (
│   │                 <div className="space-y-2">
│   │                   <Progress 
│   │                     value={progress.value} 
│   │                     max={progress.max}
│   │                     className="h-1 bg-zinc-800" 
│   │                   />
│   │                   <div className="flex justify-between text-xs text-zinc-400">
│   │                     <span>{progress.value}/{progress.max}</span>
│   │                     <span>{Math.round((progress.value / progress.max) * 100)}%</span>
│   │                   </div>
│   │                 </div>
│   │               )}
│   │             </div>
│   │           </Card>
│   │         );
│   │       }
│   │       
│   │       interface DashboardStatsProps {
│   │         stats: {
│   │           totalProjects: number;
│   │           activeProjects: number;
│   │           totalTasks: number;
│   │           completedTasks: number;
│   │           totalObjectives: number;
│   │           achievedObjectives: number;
│   │           overdueTasks: number;
│   │           projectProgress: number;
│   │         };
│   │         className?: string;
│   │       }
│   │       
│   │       export function DashboardStats({
│   │         stats,
│   │         className
│   │       }: DashboardStatsProps) {
│   │         return (
│   │           <div className={cn("grid gap-4 md:grid-cols-2 lg:grid-cols-4", className)}>
│   │             <StatCard
│   │               title="Total Projects"
│   │               value={stats.totalProjects}
│   │               icon={<BarChart2 className="h-4 w-4" />}
│   │               progress={{
│   │                 value: stats.activeProjects,
│   │                 max: stats.totalProjects
│   │               }}
│   │             />
│   │             
│   │             <StatCard
│   │               title="Task Completion"
│   │               value={`${stats.completedTasks}/${stats.totalTasks}`}
│   │               icon={<CheckSquare className="h-4 w-4" />}
│   │               trend={{
│   │                 value: Math.round((stats.completedTasks / stats.totalTasks) * 100),
│   │                 label: "completion rate",
│   │                 direction: "up"
│   │               }}
│   │             />
│   │             
│   │             <StatCard
│   │               title="Objectives Progress"
│   │               value={`${stats.achievedObjectives}/${stats.totalObjectives}`}
│   │               icon={<Target className="h-4 w-4" />}
│   │               progress={{
│   │                 value: stats.achievedObjectives,
│   │                 max: stats.totalObjectives
│   │               }}
│   │             />
│   │             
│   │             <StatCard
│   │               title="Project Progress"
│   │               value={`${stats.projectProgress}%`}
│   │               icon={<Clock className="h-4 w-4" />}
│   │               trend={{
│   │                 value: stats.overdueTasks,
│   │                 label: "tasks overdue",
│   │                 direction: "down"
│   │               }}
│   │             />
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export default DashboardStats;
│   └── index.ts
│           export * from './DashboardGrid';
│           export * from './DashboardHeader';
│           export * from './DashboardLayout';
│           export * from './DashboardStats';
├── DashboardObjectives/
│   ├── DashboardObjectives.tsx
│   │       import React, { useMemo } from 'react';
│   │       import { Card } from '@/components/ui/card';
│   │       import { Button } from '@/components/ui/button';
│   │       import { Progress } from '@/components/ui/progress';
│   │       import { CardList } from '@/components/cards';
│   │       import { Target, PlusCircle } from 'lucide-react';
│   │       import { cn } from '@/lib/utils';
│   │       import type { DashboardObjectivesProps, ObjectiveProgressProps } from '@/types/dashboard/objectives';
│   │       
│   │       function ObjectiveProgress({ completed, total, className }: ObjectiveProgressProps) {
│   │         const percentage = total > 0 ? (completed / total) * 100 : 0;
│   │         
│   │         return (
│   │           <div className={cn("space-y-1", className)}>
│   │             <div className="flex justify-between text-xs text-zinc-400">
│   │               <span>{completed}/{total} Completed</span>
│   │               <span>{Math.round(percentage)}%</span>
│   │             </div>
│   │             <Progress 
│   │               value={percentage} 
│   │               max={100}
│   │               className={cn(
│   │                 "h-1 bg-zinc-800",
│   │                 percentage === 100 && "bg-emerald-500",
│   │                 percentage > 0 && percentage < 100 && "bg-blue-500"
│   │               )}
│   │             />
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       function ObjectiveStats({ objectives }: { objectives: DashboardObjectivesProps['objectives'] }) {
│   │         const stats = useMemo(() => {
│   │           const total = objectives.length;
│   │           const completed = objectives.filter(o => o.status === 'completed').length;
│   │           const inProgress = objectives.filter(o => o.status === 'in-progress').length;
│   │           const overdue = objectives.filter(o => 
│   │             o.dueDate && new Date(o.dueDate) < new Date() && o.status !== 'completed'
│   │           ).length;
│   │       
│   │           return {
│   │             totalObjectives: total,
│   │             completedObjectives: completed,
│   │             inProgressObjectives: inProgress,
│   │             overdue,
│   │             completionRate: total > 0 ? (completed / total) * 100 : 0
│   │           };
│   │         }, [objectives]);
│   │       
│   │         return (
│   │           <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="text-sm text-zinc-400">Total Objectives</div>
│   │               <div className="text-2xl font-bold text-zinc-100">{stats.totalObjectives}</div>
│   │             </Card>
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="text-sm text-zinc-400">In Progress</div>
│   │               <div className="text-2xl font-bold text-zinc-100">{stats.inProgressObjectives}</div>
│   │             </Card>
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="text-sm text-zinc-400">Completion Rate</div>
│   │               <div className="text-2xl font-bold text-zinc-100">
│   │                 {Math.round(stats.completionRate)}%
│   │               </div>
│   │             </Card>
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="text-sm text-zinc-400">Overdue</div>
│   │               <div className="text-2xl font-bold text-zinc-100">{stats.overdue}</div>
│   │             </Card>
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export function DashboardObjectives({
│   │         objectives,
│   │         projects,
│   │         onObjectiveClick,
│   │         onAddObjective,
│   │         onEditObjective,
│   │         onDeleteObjective,
│   │         className
│   │       }: DashboardObjectivesProps) {
│   │         const getProjectName = (projectId: string) => {
│   │           const project = projects.find(p => p.id === projectId);
│   │           return project?.name || 'Unknown Project';
│   │         };
│   │       
│   │         return (
│   │           <div className={cn("space-y-6", className)}>
│   │             {/* Header */}
│   │             <div className="flex items-center justify-between">
│   │               <div className="flex items-center gap-2">
│   │                 <Target className="h-5 w-5 text-zinc-400" />
│   │                 <h2 className="text-lg font-semibold text-zinc-100">Objectives</h2>
│   │               </div>
│   │               {onAddObjective && (
│   │                 <Button 
│   │                   variant="outline" 
│   │                   size="sm" 
│   │                   onClick={onAddObjective}
│   │                   className="gap-2"
│   │                 >
│   │                   <PlusCircle className="h-4 w-4" />
│   │                   Add Objective
│   │                 </Button>
│   │               )}
│   │             </div>
│   │       
│   │             {/* Stats */}
│   │             <ObjectiveStats objectives={objectives} />
│   │       
│   │             {/* Main List */}
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50">
│   │               <div className="p-6 space-y-4">
│   │                 <div className="text-sm text-zinc-400">All Objectives</div>
│   │                 <CardList
│   │                   type="objective"
│   │                   items={objectives}
│   │                   variant="compact"
│   │                   onClick={onObjectiveClick}
│   │                 />
│   │               </div>
│   │             </Card>
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export default DashboardObjectives;
│   └── index.ts
│           // src/components/dashboard/DashboardObjectives/index.ts
│           export { DashboardObjectives } from './DashboardObjectives';
│           export type { DashboardObjectivesProps } from '@/types/dashboard/objectives';
├── DashboardProjects/
│   ├── DashboardProjects.tsx
│   │       // src/types/dashboard/projects.ts
│   │       import { Project, Task, Objective } from '@/types';
│   │       
│   │       export interface ProjectStats {
│   │         totalProjects: number;
│   │         activeProjects: number;
│   │         completedProjects: number;
│   │         overdueProjects: number;
│   │         projectProgress: number;
│   │         totalTasks: number;
│   │         completedTasks: number;
│   │       }
│   │       
│   │       export interface ProjectProgressProps {
│   │         completed: number;
│   │         total: number;
│   │         overdue: number;
│   │         className?: string;
│   │       }
│   │       
│   │       export interface DashboardProjectsProps {
│   │         projects: Project[];
│   │         tasks: Task[];
│   │         objectives: Objective[];
│   │         onProjectClick?: (project: Project) => void;
│   │         onAddProject?: () => void;
│   │         onEditProject?: (project: Project) => void;
│   │         onDeleteProject?: (project: Project) => void;
│   │         className?: string;
│   │       }
│   └── index.ts
│           // src/components/dashboard/DashboardProjects/index.ts
│           export * from './DashboardProjects';
│           export type { DashboardProjectsProps } from '@/types/dashboard/projects';
├── DashboardTasks/
│   ├── DashboardTasks.tsx
│   │       import React, { useMemo, useState } from 'react';
│   │       import { Card } from '@/components/ui/card';
│   │       import { Button } from '@/components/ui/button';
│   │       import { Input } from '@/components/ui/input';
│   │       import { 
│   │         Select, 
│   │         SelectContent, 
│   │         SelectItem, 
│   │         SelectTrigger, 
│   │         SelectValue 
│   │       } from '@/components/ui/select';
│   │       import { CardList } from '@/components/cards';
│   │       import { 
│   │         CheckSquare, 
│   │         PlusCircle, 
│   │         Search,
│   │         Filter,
│   │         Clock,
│   │         AlertTriangle,
│   │         ArrowUpCircle
│   │       } from 'lucide-react';
│   │       import { cn } from '@/lib/utils';
│   │       import type { 
│   │         DashboardTasksProps, 
│   │         TaskStats, 
│   │         TaskFilterState,
│   │         TaskFilterProps 
│   │       } from '@/types/dashboard/tasks';
│   │       
│   │       function TaskFilters({
│   │         projects,
│   │         objectives,
│   │         filters,
│   │         onFilterChange
│   │       }: TaskFilterProps) {
│   │         return (
│   │           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
│   │             <div className="relative">
│   │               <Search className="absolute left-2 top-2.5 h-4 w-4 text-zinc-400" />
│   │               <Input
│   │                 placeholder="Search tasks..."
│   │                 className="pl-8"
│   │                 value={filters.search}
│   │                 onChange={(e) => onFilterChange({ ...filters, search: e.target.value })}
│   │               />
│   │             </div>
│   │             
│   │             <Select
│   │               value={filters.status}
│   │               onValueChange={(value) => onFilterChange({ ...filters, status: value })}
│   │             >
│   │               <SelectTrigger>
│   │                 <SelectValue placeholder="Filter by status" />
│   │               </SelectTrigger>
│   │               <SelectContent>
│   │                 <SelectItem value="">All Status</SelectItem>
│   │                 <SelectItem value="todo">Todo</SelectItem>
│   │                 <SelectItem value="in-progress">In Progress</SelectItem>
│   │                 <SelectItem value="done">Done</SelectItem>
│   │               </SelectContent>
│   │             </Select>
│   │       
│   │             <Select
│   │               value={filters.priority}
│   │               onValueChange={(value) => onFilterChange({ ...filters, priority: value })}
│   │             >
│   │               <SelectTrigger>
│   │                 <SelectValue placeholder="Filter by priority" />
│   │               </SelectTrigger>
│   │               <SelectContent>
│   │                 <SelectItem value="">All Priorities</SelectItem>
│   │                 <SelectItem value="high">High</SelectItem>
│   │                 <SelectItem value="medium">Medium</SelectItem>
│   │                 <SelectItem value="low">Low</SelectItem>
│   │               </SelectContent>
│   │             </Select>
│   │       
│   │             <Select
│   │               value={filters.projectId}
│   │               onValueChange={(value) => onFilterChange({ ...filters, projectId: value })}
│   │             >
│   │               <SelectTrigger>
│   │                 <SelectValue placeholder="Filter by project" />
│   │               </SelectTrigger>
│   │               <SelectContent>
│   │                 <SelectItem value="">All Projects</SelectItem>
│   │                 {projects.map((project) => (
│   │                   <SelectItem key={project.id} value={project.id}>
│   │                     {project.name}
│   │                   </SelectItem>
│   │                 ))}
│   │               </SelectContent>
│   │             </Select>
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       function TaskStats({ tasks }: { tasks: DashboardTasksProps['tasks'] }) {
│   │         const stats = useMemo<TaskStats>(() => {
│   │           const totalTasks = tasks.length;
│   │           const completedTasks = tasks.filter(t => t.status === 'done').length;
│   │           const inProgressTasks = tasks.filter(t => t.status === 'in-progress').length;
│   │           const todoTasks = tasks.filter(t => t.status === 'todo').length;
│   │           const overdueTasks = tasks.filter(t => 
│   │             t.dueDate && new Date(t.dueDate) < new Date() && t.status !== 'done'
│   │           ).length;
│   │           const highPriorityTasks = tasks.filter(t => t.priority === 'high').length;
│   │       
│   │           return {
│   │             totalTasks,
│   │             completedTasks,
│   │             inProgressTasks,
│   │             todoTasks,
│   │             overdueTasks,
│   │             highPriorityTasks
│   │           };
│   │         }, [tasks]);
│   │       
│   │         return (
│   │           <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="flex items-center gap-2">
│   │                 <CheckSquare className="h-5 w-5 text-emerald-500" />
│   │                 <div>
│   │                   <div className="text-sm text-zinc-400">Completed</div>
│   │                   <div className="text-2xl font-bold text-zinc-100">
│   │                     {stats.completedTasks}/{stats.totalTasks}
│   │                   </div>
│   │                 </div>
│   │               </div>
│   │             </Card>
│   │             
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="flex items-center gap-2">
│   │                 <Clock className="h-5 w-5 text-blue-500" />
│   │                 <div>
│   │                   <div className="text-sm text-zinc-400">In Progress</div>
│   │                   <div className="text-2xl font-bold text-zinc-100">
│   │                     {stats.inProgressTasks}
│   │                   </div>
│   │                 </div>
│   │               </div>
│   │             </Card>
│   │             
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="flex items-center gap-2">
│   │                 <AlertTriangle className="h-5 w-5 text-red-500" />
│   │                 <div>
│   │                   <div className="text-sm text-zinc-400">Overdue</div>
│   │                   <div className="text-2xl font-bold text-zinc-100">
│   │                     {stats.overdueTasks}
│   │                   </div>
│   │                 </div>
│   │               </div>
│   │             </Card>
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export function DashboardTasks({
│   │         tasks,
│   │         projects,
│   │         objectives,
│   │         onTaskClick,
│   │         onAddTask,
│   │         onEditTask,
│   │         onDeleteTask,
│   │         onStatusChange,
│   │         onPriorityChange,
│   │         className
│   │       }: DashboardTasksProps) {
│   │         const [filters, setFilters] = useState<TaskFilterState>({});
│   │       
│   │         const filteredTasks = useMemo(() => {
│   │           return tasks.filter(task => {
│   │             if (filters.status && task.status !== filters.status) return false;
│   │             if (filters.priority && task.priority !== filters.priority) return false;
│   │             if (filters.projectId && task.projectId !== filters.projectId) return false;
│   │             if (filters.objectiveId && task.objectiveId !== filters.objectiveId) return false;
│   │             if (filters.search) {
│   │               const search = filters.search.toLowerCase();
│   │               return task.content.toLowerCase().includes(search) ||
│   │                      task.description?.toLowerCase().includes(search);
│   │             }
│   │             return true;
│   │           });
│   │         }, [tasks, filters]);
│   │       
│   │         return (
│   │           <div className={cn("space-y-6", className)}>
│   │             {/* Header */}
│   │             <div className="flex items-center justify-between">
│   │               <div className="flex items-center gap-2">
│   │                 <CheckSquare className="h-5 w-5 text-zinc-400" />
│   │                 <h2 className="text-lg font-semibold text-zinc-100">Tasks</h2>
│   │               </div>
│   │               {onAddTask && (
│   │                 <Button 
│   │                   variant="outline" 
│   │                   size="sm" 
│   │                   onClick={onAddTask}
│   │                   className="gap-2"
│   │                 >
│   │                   <PlusCircle className="h-4 w-4" />
│   │                   Add Task
│   │                 </Button>
│   │               )}
│   │             </div>
│   │       
│   │             {/* Stats */}
│   │             <TaskStats tasks={tasks} />
│   │       
│   │             {/* Filters */}
│   │             <TaskFilters
│   │               projects={projects}
│   │               objectives={objectives}
│   │               filters={filters}
│   │               onFilterChange={setFilters}
│   │             />
│   │       
│   │             {/* Task List */}
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50">
│   │               <div className="p-6 space-y-4">
│   │                 <div className="text-sm text-zinc-400">
│   │                   Showing {filteredTasks.length} tasks
│   │                 </div>
│   │                 <CardList
│   │                   type="task"
│   │                   items={filteredTasks}
│   │                   variant="compact"
│   │                   onClick={onTaskClick}
│   │                 />
│   │               </div>
│   │             </Card>
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export default DashboardTasks;
│   └── index.ts
│           // src/components/dashboard/DashboardTasks/index.ts
│           export { DashboardTasks } from './DashboardTasks';
│           export type { DashboardTasksProps } from '@/types/dashboard/tasks';
├── DashboardTodoLists/
│   ├── DashboardTodoLists.tsx
│   │       import React, { useMemo } from 'react';
│   │       import { Card } from '@/components/ui/card';
│   │       import { Button } from '@/components/ui/button';
│   │       import { Progress } from '@/components/ui/progress';
│   │       import { CardList } from '@/components/cards';
│   │       import { ListChecks, PlusCircle, Archive, ListTodo } from 'lucide-react';
│   │       import { cn } from '@/lib/utils';
│   │       import type { DashboardTodoListsProps, TodoListProgressProps, TodoListStats } from '@/types/dashboard/todolists';
│   │       
│   │       function TodoListProgress({ tasks, className }: TodoListProgressProps) {
│   │         const stats = useMemo(() => {
│   │           const completed = tasks.filter(t => t.status === 'done').length;
│   │           const total = tasks.length;
│   │           const percentage = total > 0 ? (completed / total) * 100 : 0;
│   │           return { completed, total, percentage };
│   │         }, [tasks]);
│   │         
│   │         return (
│   │           <div className={cn("space-y-1", className)}>
│   │             <div className="flex justify-between text-xs text-zinc-400">
│   │               <span>{stats.completed}/{stats.total} Tasks</span>
│   │               <span>{Math.round(stats.percentage)}%</span>
│   │             </div>
│   │             <Progress 
│   │               value={stats.percentage} 
│   │               max={100}
│   │               className={cn(
│   │                 "h-1 bg-zinc-800",
│   │                 stats.percentage === 100 && "bg-emerald-500",
│   │                 stats.percentage > 0 && stats.percentage < 100 && "bg-blue-500"
│   │               )}
│   │             />
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       function TodoListStatsOverview({ todoLists }: { todoLists: DashboardTodoListsProps['todoLists'] }) {
│   │         const stats: TodoListStats = useMemo(() => {
│   │           const activeLists = todoLists.filter(list => list.type === 'daily').length;
│   │           const totalTasks = todoLists.reduce((acc, list) => acc + (list.tasks?.length || 0), 0);
│   │           const completedTasks = todoLists.reduce((acc, list) => 
│   │             acc + (list.tasks?.filter(t => t.status === 'done').length || 0), 0
│   │           );
│   │           const overdueTasks = todoLists.reduce((acc, list) => 
│   │             acc + (list.tasks?.filter(t => 
│   │               t.dueDate && new Date(t.dueDate) < new Date() && t.status !== 'done'
│   │             ).length || 0), 0
│   │           );
│   │       
│   │           return {
│   │             totalLists: todoLists.length,
│   │             activeLists,
│   │             totalTasks,
│   │             completedTasks,
│   │             overdueTasks
│   │           };
│   │         }, [todoLists]);
│   │       
│   │         return (
│   │           <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="text-sm text-zinc-400">Total Lists</div>
│   │               <div className="text-2xl font-bold text-zinc-100">{stats.totalLists}</div>
│   │             </Card>
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="text-sm text-zinc-400">Active Lists</div>
│   │               <div className="text-2xl font-bold text-zinc-100">{stats.activeLists}</div>
│   │             </Card>
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="text-sm text-zinc-400">Task Completion</div>
│   │               <div className="text-2xl font-bold text-zinc-100">
│   │                 {Math.round((stats.completedTasks / stats.totalTasks) * 100)}%
│   │               </div>
│   │             </Card>
│   │             <Card className="bg-zinc-800/40 border-zinc-700/50 p-4">
│   │               <div className="text-sm text-zinc-400">Overdue Tasks</div>
│   │               <div className="text-2xl font-bold text-zinc-100">{stats.overdueTasks}</div>
│   │             </Card>
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       function TodoListsByType({ 
│   │         todoLists, 
│   │         type,
│   │         onTodoListClick,
│   │         onAddTask
│   │       }: { 
│   │         todoLists: DashboardTodoListsProps['todoLists']; 
│   │         type: 'daily' | 'weekly' | 'monthly';
│   │         onTodoListClick?: (todoList: TodoList) => void;
│   │         onAddTask?: (todoList: TodoList) => void;
│   │       }) {
│   │         const filteredLists = todoLists.filter(list => list.type === type);
│   │         
│   │         if (filteredLists.length === 0) return null;
│   │       
│   │         return (
│   │           <Card className="bg-zinc-800/40 border-zinc-700/50">
│   │             <div className="p-6 space-y-4">
│   │               <div className="flex items-center justify-between">
│   │                 <div className="flex items-center gap-2">
│   │                   <ListTodo className="h-4 w-4 text-zinc-400" />
│   │                   <h3 className="text-sm font-medium text-zinc-100">
│   │                     {type.charAt(0).toUpperCase() + type.slice(1)} Lists
│   │                   </h3>
│   │                 </div>
│   │               </div>
│   │               <CardList
│   │                 type="todoList"
│   │                 items={filteredLists}
│   │                 variant="compact"
│   │                 onClick={onTodoListClick}
│   │               />
│   │             </div>
│   │           </Card>
│   │         );
│   │       }
│   │       
│   │       export function DashboardTodoLists({
│   │         todoLists,
│   │         onTodoListClick,
│   │         onAddTodoList,
│   │         onEditTodoList,
│   │         onDeleteTodoList,
│   │         onAddTask,
│   │         className
│   │       }: DashboardTodoListsProps) {
│   │         return (
│   │           <div className={cn("space-y-6", className)}>
│   │             {/* Header */}
│   │             <div className="flex items-center justify-between">
│   │               <div className="flex items-center gap-2">
│   │                 <ListChecks className="h-5 w-5 text-zinc-400" />
│   │                 <h2 className="text-lg font-semibold text-zinc-100">Todo Lists</h2>
│   │               </div>
│   │               <div className="flex items-center gap-2">
│   │                 {onAddTodoList && (
│   │                   <Button 
│   │                     variant="outline" 
│   │                     size="sm" 
│   │                     onClick={onAddTodoList}
│   │                     className="gap-2"
│   │                   >
│   │                     <PlusCircle className="h-4 w-4" />
│   │                     New List
│   │                   </Button>
│   │                 )}
│   │               </div>
│   │             </div>
│   │       
│   │             {/* Stats */}
│   │             <TodoListStatsOverview todoLists={todoLists} />
│   │       
│   │             {/* Lists by Type */}
│   │             <div className="space-y-4">
│   │               <TodoListsByType 
│   │                 todoLists={todoLists} 
│   │                 type="daily" 
│   │                 onTodoListClick={onTodoListClick}
│   │                 onAddTask={onAddTask}
│   │               />
│   │               <TodoListsByType 
│   │                 todoLists={todoLists} 
│   │                 type="weekly" 
│   │                 onTodoListClick={onTodoListClick}
│   │                 onAddTask={onAddTask}
│   │               />
│   │               <TodoListsByType 
│   │                 todoLists={todoLists} 
│   │                 type="monthly" 
│   │                 onTodoListClick={onTodoListClick}
│   │                 onAddTask={onAddTask}
│   │               />
│   │             </div>
│   │           </div>
│   │         );
│   │       }
│   │       
│   │       export default DashboardTodoLists;
│   └── index.ts
│           // src/components/dashboard/DashboardTodoLists/index.ts
│           export { DashboardTodoLists } from './DashboardTodoLists';
│           export type { DashboardTodoListsProps } from '@/types/dashboard/todoLists';
└── index.ts
        export * from './DashboardLayout';
        export * from './DashboardLayout/DashboardGrid';
        export * from './DashboardLayout/DashboardHeader';
        export * from './DashboardLayout/DashboardStats';
        export * from './DashboardProjects';
        export * from './DashboardTasks';
        export * from './DashboardObjectives';
        export * from './DashboardTodoLists';

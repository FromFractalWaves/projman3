dashboard/
├── DashboardLayout.tsx
│       import React, { useMemo } from 'react';
│       import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui';
│       import { Timeline } from '@/components/ui/timeline';
│       import { useTimeline } from '@/hooks/useTimeline';
│       import type { Project, Objective, Task, TodoList } from '@/types';
│       import { 
│         LayoutGrid,
│         CheckCircle2,
│         Clock,
│         AlertCircle
│       } from 'lucide-react';
│       import { useRouter } from 'next/navigation';
│       
│       export interface DashboardLayoutProps {
│         projects: Project[];
│         objectives: Objective[];
│         tasks: Task[];
│         todoLists: TodoList[];
│         taskStats: {
│           todo: number;
│           inProgress: number;
│           done: number;
│         };
│         onRefresh: () => Promise<void>;
│       }
│       
│       // Stats Card Component - Keeping it inline as in your code
│       const StatsCard = ({ label, value, icon, color }: { 
│         label: string;
│         value: number | string;
│         icon: React.ReactNode;
│         color: string;
│       }) => (
│         <div className="bg-zinc-900 border border-zinc-800 rounded-lg p-4 flex items-center gap-4">
│           <div className={`p-2 rounded-full ${color}`}>
│             {icon}
│           </div>
│           <div>
│             <p className="text-sm text-zinc-400">{label}</p>
│             <p className="text-2xl font-semibold text-white">{value}</p>
│           </div>
│         </div>
│       );
│       
│       // Project Card Component - Keeping it inline as in your code
│       const ProjectCard = ({ project }: { project: Project }) => (
│         <div className="bg-zinc-900 border border-zinc-800 rounded-lg p-4 hover:bg-zinc-800/80 transition-colors">
│           <h3 className="font-semibold text-lg text-white">{project.name}</h3>
│           {project.description && (
│             <p className="text-sm text-zinc-300 mt-1">{project.description}</p>
│           )}
│           <div className="mt-4 flex gap-4">
│             <div>
│               <p className="text-xs text-zinc-400">Status</p>
│               <p className="text-sm text-white">{project.status}</p>
│             </div>
│             <div>
│               <p className="text-xs text-zinc-400">Tasks</p>
│               <p className="text-sm text-white">
│                 {project.tasks?.length || 0}
│               </p>
│             </div>
│           </div>
│         </div>
│       );
│       
│       // Task List Component - Keeping it inline as in your code
│       const TaskList = ({ tasks }: { tasks: Task[] }) => (
│         <div className="space-y-2">
│           {tasks.map(task => (
│             <div 
│               key={task.id}
│               className="bg-zinc-900 border border-zinc-800 rounded-lg p-3 hover:bg-zinc-800/80 transition-colors"
│             >
│               <div className="flex items-center gap-2">
│                 <div className={`w-2 h-2 rounded-full ${
│                   task.priority === 'high' ? 'bg-red-400' :
│                   task.priority === 'medium' ? 'bg-amber-400' :
│                   'bg-emerald-400'
│                 }`} />
│                 <p className="text-white">{task.content}</p>
│               </div>
│               {task.description && (
│                 <p className="text-sm text-zinc-300 mt-1 ml-4">{task.description}</p>
│               )}
│             </div>
│           ))}
│         </div>
│       );
│       
│       export function DashboardLayout({
│         projects,
│         objectives,
│         tasks,
│         todoLists,
│         taskStats,
│         onRefresh
│       }: DashboardLayoutProps) {
│         const router = useRouter();
│         
│         // Get timeline events using the hook
│         const { events } = useTimeline({ projects, objectives, tasks });
│         const recentEvents = events
│           .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
│           .slice(0, 5);
│       
│         const stats = useMemo(() => [
│           {
│             label: 'Total Tasks',
│             value: tasks.length,
│             icon: <LayoutGrid className="h-5 w-5 text-emerald-400" />,
│             color: 'bg-emerald-400/10'
│           },
│           {
│             label: 'Completed',
│             value: taskStats.done,
│             icon: <CheckCircle2 className="h-5 w-5 text-blue-400" />,
│             color: 'bg-blue-400/10'
│           },
│           {
│             label: 'In Progress',
│             value: taskStats.inProgress,
│             icon: <Clock className="h-5 w-5 text-amber-400" />,
│             color: 'bg-amber-400/10'
│           },
│           {
│             label: 'High Priority',
│             value: tasks.filter(t => t.priority === 'high').length,
│             icon: <AlertCircle className="h-5 w-5 text-red-400" />,
│             color: 'bg-red-400/10'
│           }
│         ], [tasks, taskStats]);
│       
│         const recentTasks = tasks
│           .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
│           .slice(0, 5);
│       
│         const handleTimelineEventClick = (event) => {
│           switch (event.type) {
│             case 'project':
│               router.push(`/projects/${event.entityId}`);
│               break;
│             case 'objective':
│               router.push(`/objectives/${event.entityId}`);
│               break;
│             case 'task':
│               router.push(`/tasks/${event.entityId}`);
│               break;
│           }
│         };
│       
│         return (
│           <div className="space-y-6 p-6 bg-black min-h-screen">
│             {/* Stats Grid */}
│             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
│               {stats.map((stat, index) => (
│                 <StatsCard key={index} {...stat} />
│               ))}
│             </div>
│       
│             <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
│               {/* Projects Section */}
│               <Card className="lg:col-span-2 bg-zinc-900 border-zinc-800">
│                 <CardHeader>
│                   <CardTitle className="text-white">Recent Projects</CardTitle>
│                 </CardHeader>
│                 <CardContent className="space-y-4">
│                   {projects.slice(0, 3).map(project => (
│                     <ProjectCard key={project.id} project={project} />
│                   ))}
│                 </CardContent>
│               </Card>
│       
│               {/* Recent Tasks Section */}
│               <Card className="bg-zinc-900 border-zinc-800">
│                 <CardHeader>
│                   <CardTitle className="text-white">Recent Tasks</CardTitle>
│                 </CardHeader>
│                 <CardContent>
│                   <TaskList tasks={recentTasks} />
│                 </CardContent>
│               </Card>
│             </div>
│       
│             <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
│               {/* Todo Lists Section */}
│               <Card className="bg-zinc-900 border-zinc-800">
│                 <CardHeader>
│                   <CardTitle className="text-white">Todo Lists</CardTitle>
│                 </CardHeader>
│                 <CardContent>
│                   <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
│                     {todoLists.map(list => (
│                       <div 
│                         key={list.id}
│                         className="bg-zinc-900 border border-zinc-800 rounded-lg p-4 hover:bg-zinc-800/80 transition-colors"
│                       >
│                         <h3 className="font-semibold text-white">{list.name}</h3>
│                         <p className="text-sm text-zinc-300 mt-1">
│                           {list.tasks?.length || 0} tasks
│                         </p>
│                       </div>
│                     ))}
│                   </div>
│                 </CardContent>
│               </Card>
│       
│               {/* Timeline Section */}
│               <Card className="bg-zinc-900 border-zinc-800">
│                 <CardHeader>
│                   <CardTitle className="text-white">Recent Activity</CardTitle>
│                 </CardHeader>
│                 <CardContent>
│                   <Timeline 
│                     events={recentEvents} 
│                     onEventClick={handleTimelineEventClick}
│                   />
│                 </CardContent>
│               </Card>
│             </div>
│           </div>
│         );
│       }
│       
│       export default DashboardLayout;
├── DashboardTimeline.tsx
│       import React from 'react';
│       import { Timeline } from '@/components/ui/timeline';
│       import { Project, Objective, Task } from '@/types';
│       import { useTimeline } from '@/hooks/useTimeline';
│       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
│       
│       interface DashboardTimelineProps {
│         projects: Project[];
│         objectives: Objective[];
│         tasks: Task[];
│         onEventClick?: (eventType: string, id: string) => void;
│       }
│       
│       export const DashboardTimeline = ({ 
│         projects, 
│         objectives, 
│         tasks,
│         onEventClick 
│       }: DashboardTimelineProps) => {
│         const { events } = useTimeline({ projects, objectives, tasks });
│         
│         // Get the 5 most recent events
│         const recentEvents = events
│           .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
│           .slice(0, 5);
│       
│         const handleEventClick = (event) => {
│           onEventClick?.(event.type, event.entityId);
│         };
│       
│         return (
│           <Card className="bg-neutral-900 border-neutral-800">
│             <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
│               <CardTitle className="text-xl font-bold text-white">Recent Activity</CardTitle>
│             </CardHeader>
│             <CardContent>
│               <Timeline events={recentEvents} onEventClick={handleEventClick} />
│             </CardContent>
│           </Card>
│         );
│       };
├── index.ts
│       export * from './DashboardLayout';
└── oldDash/
    ├── DashboardLayout.tsx
    │       // src/components/dashboard/DashboardLayout/DashboardLayout.tsx
    │       import React, { useMemo } from 'react';
    │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
    │       import { ProjectStats } from './ProjectStats';
    │       import { TaskList } from './TaskList';
    │       import { ProjectList } from './ProjectList';
    │       import { TodoListSummary } from './TodoListSummary';
    │       import type { Project, Objective, Task, TodoList } from '@/types';
    │       
    │       // src/components/dashboard/DashboardLayout/DashboardLayout.tsx
    │       export interface DashboardLayoutProps {
    │         projects: Project[];
    │         objectives: Objective[];
    │         tasks: Task[];
    │         todoLists: TodoList[];
    │         onRefresh: () => void;
    │       }
    │       
    │       export function DashboardLayout({ 
    │         projects, 
    │         objectives, 
    │         tasks, 
    │         todoLists,
    │         onRefresh 
    │       }: DashboardLayoutProps) {
    │         // Calculate statistics for ProjectStats component
    │         const stats = useMemo(() => ({
    │           projectCount: projects.length,
    │           objectiveCount: objectives.length,
    │           taskCount: tasks.length,
    │           completedTasks: tasks.filter(t => t.status === 'done').length,
    │           inProgressTasks: tasks.filter(t => t.status === 'in-progress').length,
    │           highPriorityTasks: tasks.filter(t => t.priority === 'high').length
    │         }), [projects, objectives, tasks]);
    │       
    │         return (
    │           <div className="min-h-screen bg-gray-900 text-white p-6 space-y-6">
    │             <header className="mb-8">
    │               <h1 className="text-3xl font-bold mb-2">Project Dashboard</h1>
    │               <p className="text-gray-400">
    │                 Managing {projects.length} projects with {objectives.length} objectives and {tasks.length} tasks
    │               </p>
    │             </header>
    │       
    │             {/* Project Statistics */}
    │             <ProjectStats {...stats} />
    │       
    │             <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
    │               {/* Main Project List - Takes up 2 columns */}
    │               <div className="lg:col-span-2">
    │                 <Card>
    │                   <CardHeader>
    │                     <CardTitle>Projects Overview</CardTitle>
    │                   </CardHeader>
    │                   <CardContent>
    │                     <ProjectList
    │                       projects={projects}
    │                       objectives={objectives}
    │                       tasks={tasks}
    │                       onRefresh={onRefresh}
    │                     />
    │                   </CardContent>
    │                 </Card>
    │               </div>
    │       
    │               {/* Side Column - Tasks and Todo Lists */}
    │               <div className="space-y-6">
    │                 <TaskList
    │                   tasks={tasks}
    │                   projects={projects}
    │                   objectives={objectives}
    │                   onRefresh={onRefresh}
    │                 />
    │                 <TodoListSummary todoLists={todoLists} />
    │               </div>
    │             </div>
    │           </div>
    │         );
    │       }
    ├── ProjectList.tsx
    │       // src/components/dashboard/DashboardLayout/ProjectList.tsx
    │       import React from 'react';
    │       import type { Project, Objective, Task } from '@/types';
    │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
    │       
    │       
    │       // src/components/dashboard/DashboardLayout/ProjectList.tsx
    │       interface ProjectListProps {
    │         projects: Project[];
    │         objectives: Objective[];
    │         tasks: Task[];
    │         onRefresh: () => void;
    │       }
    │       
    │       export function ProjectList({ projects }: ProjectListProps) {
    │         return (
    │           <Card>
    │             <CardHeader>
    │               <CardTitle>Projects</CardTitle>
    │             </CardHeader>
    │             <CardContent>
    │               {projects.length === 0 ? (
    │                 <p>No projects available.</p>
    │               ) : (
    │                 <ul className="space-y-2">
    │                   {projects.map((project) => (
    │                     <li key={project.id} className="p-2 border rounded-md">
    │                       <h3 className="text-lg font-semibold">{project.name}</h3>
    │                       <p className="text-sm text-gray-600">{project.description}</p>
    │                       <p className="text-sm text-gray-500">
    │                         Status: {project.status} | Estimated Hours: {project.estimatedHours || 'N/A'}
    │                       </p>
    │                       <p className="text-sm text-gray-500">
    │                         Start Date: {project.startDate ? new Date(project.startDate).toLocaleDateString() : 'N/A'} | Due Date: {project.dueDate ? new Date(project.dueDate).toLocaleDateString() : 'N/A'}
    │                       </p>
    │                     </li>
    │                   ))}
    │                 </ul>
    │               )}
    │             </CardContent>
    │           </Card>
    │         );
    │       }
    ├── ProjectStats.tsx
    │       // src/components/dashboard/DashboardLayout/ProjectStats.tsx
    │       import React from 'react';
    │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
    │       
    │       interface ProjectStatsProps {
    │         projectCount: number;
    │         objectiveCount: number;
    │         taskCount: number;
    │         completedTasks: number;
    │         inProgressTasks: number;
    │         highPriorityTasks: number;
    │         onRefresh: () => void;
    │       }
    │       
    │       export function ProjectStats({
    │         projectCount,
    │         objectiveCount,
    │         taskCount,
    │         completedTasks,
    │         inProgressTasks,
    │         highPriorityTasks,
    │       }: ProjectStatsProps) {
    │         return (
    │           <Card>
    │             <CardHeader>
    │               <CardTitle>Statistics</CardTitle>
    │             </CardHeader>
    │             <CardContent>
    │               <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
    │                 <div className="p-4 bg-gray-100 rounded-md">
    │                   <h4 className="text-xl font-bold">{projectCount}</h4>
    │                   <p className="text-sm text-gray-600">Total Projects</p>
    │                 </div>
    │                 <div className="p-4 bg-gray-100 rounded-md">
    │                   <h4 className="text-xl font-bold">{objectiveCount}</h4>
    │                   <p className="text-sm text-gray-600">Total Objectives</p>
    │                 </div>
    │                 <div className="p-4 bg-gray-100 rounded-md">
    │                   <h4 className="text-xl font-bold">{taskCount}</h4>
    │                   <p className="text-sm text-gray-600">Total Tasks</p>
    │                 </div>
    │                 <div className="p-4 bg-gray-100 rounded-md">
    │                   <h4 className="text-xl font-bold">{completedTasks}</h4>
    │                   <p className="text-sm text-gray-600">Completed Tasks</p>
    │                 </div>
    │                 <div className="p-4 bg-gray-100 rounded-md">
    │                   <h4 className="text-xl font-bold">{inProgressTasks}</h4>
    │                   <p className="text-sm text-gray-600">Tasks In Progress</p>
    │                 </div>
    │                 <div className="p-4 bg-gray-100 rounded-md">
    │                   <h4 className="text-xl font-bold">{highPriorityTasks}</h4>
    │                   <p className="text-sm text-gray-600">High Priority Tasks</p>
    │                 </div>
    │               </div>
    │             </CardContent>
    │           </Card>
    │         );
    │       }
    ├── TaskList.tsx
    │       // src/components/dashboard/DashboardLayout/TaskList.tsx
    │       import React from 'react';
    │       import type { Task, Project } from '@/types';
    │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
    │       import { Objective } from '@/types';
    │       
    │       
    │       // src/components/dashboard/DashboardLayout/TaskList.tsx
    │       interface TaskListProps {
    │         tasks: Task[];
    │         projects: Project[];
    │         objectives: Objective[];
    │         onRefresh: () => void;
    │       }
    │       
    │       export function TaskList({ tasks, projects }: TaskListProps) {
    │         const getProjectName = (projectId: string) => {
    │           const project = projects.find((p) => p.id === projectId);
    │           return project ? project.name : 'Unknown Project';
    │         };
    │       
    │         return (
    │           <Card>
    │             <CardHeader>
    │               <CardTitle>Tasks</CardTitle>
    │             </CardHeader>
    │             <CardContent>
    │               {tasks.length === 0 ? (
    │                 <p>No tasks available.</p>
    │               ) : (
    │                 <ul className="space-y-2">
    │                   {tasks.map((task) => (
    │                     <li key={task.id} className="p-2 border rounded-md">
    │                       <h3 className="text-lg font-semibold">{task.content}</h3>
    │                       <p className="text-sm text-gray-600">{task.description}</p>
    │                       <p className="text-sm text-gray-500">
    │                         Status: {task.status} | Priority: {task.priority}
    │                       </p>
    │                       <p className="text-sm text-gray-500">
    │                         Project: {getProjectName(task.projectId)}
    │                       </p>
    │                       <p className="text-sm text-gray-500">
    │                         Estimated Hours: {task.estimatedHours || 'N/A'} | Actual Hours: {task.actualHours || 'N/A'}
    │                       </p>
    │                       <p className="text-sm text-gray-500">
    │                         Start Date: {task.startDate ? new Date(task.startDate).toLocaleDateString() : 'N/A'} | Due Date: {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'N/A'}
    │                       </p>
    │                     </li>
    │                   ))}
    │                 </ul>
    │               )}
    │             </CardContent>
    │           </Card>
    │         );
    │       }
    ├── TodoListSummary.tsx
    │       // src/components/dashboard/DashboardLayout/TodoListSummary.tsx
    │       import React from 'react';
    │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
    │       import type { TodoList } from '@/types';
    │       
    │       interface TodoListSummaryProps {
    │         todoLists: TodoList[];
    │       }
    │       
    │       export function TodoListSummary({ todoLists }: TodoListSummaryProps) {
    │         return (
    │           <Card>
    │             <CardHeader>
    │               <CardTitle>Todo Lists</CardTitle>
    │             </CardHeader>
    │             <CardContent>
    │               <div className="space-y-3">
    │                 {todoLists.map(list => (
    │                   <div
    │                     key={list.id}
    │                     className="flex justify-between items-center p-3 bg-gray-800/50 rounded-lg hover:bg-gray-800/70 transition-colors"
    │                   >
    │                     <span>{list.name}</span>
    │                     <span className="text-sm text-gray-400">
    │                       {list.tasks?.length || 0} tasks
    │                     </span>
    │                   </div>
    │                 ))}
    │                 {todoLists.length === 0 && (
    │                   <div className="text-center text-gray-500 py-4">
    │                     No todo lists available
    │                   </div>
    │                 )}
    │               </div>
    │             </CardContent>
    │           </Card>
    │         );
    │       }
    └── index.ts
            // src/components/dashboard/DashboardLayout/index.ts
            export { DashboardLayout } from './DashboardLayout';
            export type { DashboardLayoutProps } from './DashboardLayout';
            export * from './ProjectStats';
            export * from './TaskList';
            export * from './ProjectList';
            export * from './TodoListSummary';
            

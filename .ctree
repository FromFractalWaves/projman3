projman3/
├── README.md
├── components.json
│       {
│         "$schema": "https://ui.shadcn.com/schema.json",
│         "style": "default",
│         "rsc": true,
│         "tsx": true,
│         "tailwind": {
│           "config": "tailwind.config.ts",
│           "css": "src/app/globals.css",
│           "baseColor": "neutral",
│           "cssVariables": false,
│           "prefix": ""
│         },
│         "aliases": {
│           "components": "@/components",
│           "utils": "@/lib/utils",
│           "ui": "@/components/ui",
│           "lib": "@/lib",
│           "hooks": "@/hooks"
│         },
│         "iconLibrary": "lucide"
│       }
├── docs/
│   └── plan/
│       ├── plan1.md
│       └── plan2.md
├── eslint.config.mjs
├── next-env.d.ts
│       /// <reference types="next" />
│       /// <reference types="next/image-types/global" />
│       
│       // NOTE: This file should not be edited
│       // see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
├── next.config.ts
│       import type { NextConfig } from "next";
│       
│       const nextConfig: NextConfig = {
│         /* config options here */
│       };
│       
│       export default nextConfig;
├── package.json
│       {
│         "name": "projman3",
│         "version": "0.1.0",
│         "private": true,
│         "scripts": {
│           "dev": "next dev",
│           "build": "next build",
│           "start": "next start",
│           "lint": "next lint"
│         },
│         "dependencies": {
│           "@prisma/client": "^6.2.1",
│           "@radix-ui/react-dialog": "^1.1.4",
│           "@radix-ui/react-select": "^2.1.4",
│           "@radix-ui/react-separator": "^1.1.1",
│           "@radix-ui/react-slot": "^1.1.1",
│           "@radix-ui/react-switch": "^1.1.2",
│           "@radix-ui/react-tooltip": "^1.1.6",
│           "@types/d3": "^7.4.3",
│           "class-variance-authority": "^0.7.1",
│           "clsx": "^2.1.1",
│           "d3": "^7.9.0",
│           "lucide-react": "^0.473.0",
│           "next": "15.1.5",
│           "react": "^19.0.0",
│           "react-dom": "^19.0.0",
│           "tailwind-merge": "^2.6.0",
│           "tailwindcss-animate": "^1.0.7"
│         },
│         "devDependencies": {
│           "@eslint/eslintrc": "^3",
│           "@types/node": "^20",
│           "@types/react": "^19",
│           "@types/react-dom": "^19",
│           "eslint": "^9",
│           "eslint-config-next": "15.1.5",
│           "postcss": "^8",
│           "prisma": "^6.2.1",
│           "tailwindcss": "^3.4.1",
│           "typescript": "^5"
│         }
│       }
├── pnpm-lock.yaml
├── postcss.config.mjs
├── prisma/
│   ├── migrations/
│   │   ├── 20250120153145_init/
│   │   │   └── migration.sql
│   │   └── migration_lock.toml
│   └── schema.prisma
│           // prisma/schema.prisma
│           generator client {
│             provider = "prisma-client-js"
│           }
│           
│           datasource db {
│             provider = "postgresql"
│             url      = env("DATABASE_URL")
│           }
│           
│           model Project {
│             id            String      @id @default(cuid())
│             name          String
│             description   String?
│             startDate     DateTime?
│             dueDate       DateTime?
│             status        String      @default("not-started")
│             estimatedHours Float?
│             objectives    Objective[]
│             tasks         Task[]
│             createdAt     DateTime    @default(now())
│             updatedAt     DateTime    @updatedAt
│           }
│           
│           model Objective {
│             id            String      @id @default(cuid())
│             name          String
│             description   String?
│             startDate     DateTime?
│             dueDate       DateTime?
│             status        String      @default("not-started")
│             estimatedHours Float?
│             project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
│             projectId     String
│             tasks         Task[]
│             createdAt     DateTime    @default(now())
│             updatedAt     DateTime    @updatedAt
│           }
│           
│           model Task {
│             id            String      @id @default(cuid())
│             content       String
│             description   String?
│             status        String      @default("todo")
│             priority      String      @default("medium")
│             startDate     DateTime?
│             dueDate       DateTime?
│             estimatedHours Float?
│             actualHours    Float?
│             project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
│             projectId     String
│             objective     Objective?  @relation(fields: [objectiveId], references: [id], onDelete: SetNull)
│             objectiveId   String?
│             todoLists     TodoList[]
│             timeEntries   TimeEntry[]
│             createdAt     DateTime    @default(now())
│             updatedAt     DateTime    @updatedAt
│           }
│           
│           model TodoList {
│             id        String   @id @default(cuid())
│             name      String
│             type      String   @default("daily")
│             tasks     Task[]
│             createdAt DateTime @default(now())
│             updatedAt DateTime @updatedAt
│           }
│           
│           model TimeEntry {
│             id          String    @id @default(cuid())
│             taskId      String
│             task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
│             startTime   DateTime
│             endTime     DateTime?
│             duration    Float?
│             description String?
│             createdAt   DateTime  @default(now())
│             updatedAt   DateTime  @updatedAt
│           }
├── src/
│   ├── app/
│   │   ├── api/
│   │   │   ├── objectives/
│   │   │   │   ├── [id]/
│   │   │   │   │   └── route.ts
│   │   │   │   │           // src/app/api/objectives/[id]/route.ts
│   │   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │   │           
│   │   │   │   │           // DELETE an objective by ID
│   │   │   │   │           export async function DELETE(request: Request, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               await prisma.objective.delete({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │               });
│   │   │   │   │               return NextResponse.json({ message: 'Objective deleted successfully' }, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error deleting objective:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           // PUT update an objective by ID
│   │   │   │   │           export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               const data = await request.json();
│   │   │   │   │               const { name, description, startDate, dueDate, status, estimatedHours } = data;
│   │   │   │   │           
│   │   │   │   │               const updatedObjective = await prisma.objective.update({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │                 data: {
│   │   │   │   │                   name,
│   │   │   │   │                   description,
│   │   │   │   │                   startDate: startDate ? new Date(startDate) : undefined,
│   │   │   │   │                   dueDate: dueDate ? new Date(dueDate) : undefined,
│   │   │   │   │                   status,
│   │   │   │   │                   estimatedHours: estimatedHours ? parseFloat(estimatedHours) : undefined,
│   │   │   │   │                 },
│   │   │   │   │               });
│   │   │   │   │           
│   │   │   │   │               return NextResponse.json(updatedObjective, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error updating objective:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   └── route.ts
│   │   │   │           // src/app/api/objectives/route.ts
│   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │           
│   │   │   │           // GET all objectives
│   │   │   │           export async function GET() {
│   │   │   │             try {
│   │   │   │               const objectives = await prisma.objective.findMany({
│   │   │   │                 include: {
│   │   │   │                   project: true,
│   │   │   │                   tasks: true,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │               return NextResponse.json(objectives, { status: 200 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error fetching objectives:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   │           
│   │   │   │           // POST create a new objective
│   │   │   │           export async function POST(request: NextRequest) {
│   │   │   │             try {
│   │   │   │               const data = await request.json();
│   │   │   │               const { name, description, projectId, startDate, dueDate, status, estimatedHours } = data;
│   │   │   │           
│   │   │   │               if (!name || !projectId) {
│   │   │   │                 return NextResponse.json({ message: 'Name and Project ID are required' }, { status: 400 });
│   │   │   │               }
│   │   │   │           
│   │   │   │               const newObjective = await prisma.objective.create({
│   │   │   │                 data: {
│   │   │   │                   name,
│   │   │   │                   description,
│   │   │   │                   project: { connect: { id: projectId } },
│   │   │   │                   startDate: startDate ? new Date(startDate) : undefined,
│   │   │   │                   dueDate: dueDate ? new Date(dueDate) : undefined,
│   │   │   │                   status,
│   │   │   │                   estimatedHours: estimatedHours ? parseFloat(estimatedHours) : undefined,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │           
│   │   │   │               return NextResponse.json(newObjective, { status: 201 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error creating objective:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   ├── projects/
│   │   │   │   ├── [id]/
│   │   │   │   │   └── route.ts
│   │   │   │   │           // src/app/api/projects/[id]/route.ts
│   │   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │   │           
│   │   │   │   │           // GET a single project by ID
│   │   │   │   │           export async function GET(request: NextRequest, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               const project = await prisma.project.findUnique({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │                 include: {
│   │   │   │   │                   objectives: true,
│   │   │   │   │                   tasks: true,
│   │   │   │   │                 },
│   │   │   │   │               });
│   │   │   │   │           
│   │   │   │   │               if (!project) {
│   │   │   │   │                 return NextResponse.json({ message: 'Project not found' }, { status: 404 });
│   │   │   │   │               }
│   │   │   │   │           
│   │   │   │   │               return NextResponse.json(project, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error fetching project:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           // DELETE a project by ID
│   │   │   │   │           export async function DELETE(request: Request, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               await prisma.project.delete({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │               });
│   │   │   │   │               return NextResponse.json({ message: 'Project deleted successfully' }, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error deleting project:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           // PUT update a project by ID
│   │   │   │   │           export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               const data = await request.json();
│   │   │   │   │               const { name, description, startDate, dueDate, status, estimatedHours } = data;
│   │   │   │   │           
│   │   │   │   │               const updatedProject = await prisma.project.update({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │                 data: {
│   │   │   │   │                   name,
│   │   │   │   │                   description,
│   │   │   │   │                   startDate: startDate ? new Date(startDate) : undefined,
│   │   │   │   │                   dueDate: dueDate ? new Date(dueDate) : undefined,
│   │   │   │   │                   status,
│   │   │   │   │                   estimatedHours: estimatedHours ? parseFloat(estimatedHours) : undefined,
│   │   │   │   │                 },
│   │   │   │   │               });
│   │   │   │   │           
│   │   │   │   │               return NextResponse.json(updatedProject, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error updating project:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   └── route.ts
│   │   │   │           // src/app/api/projects/route.ts
│   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │           
│   │   │   │           // GET all projects
│   │   │   │           export async function GET() {
│   │   │   │             try {
│   │   │   │               const projects = await prisma.project.findMany({
│   │   │   │                 include: {
│   │   │   │                   objectives: true,
│   │   │   │                   tasks: true,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │               return NextResponse.json(projects, { status: 200 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error fetching projects:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   │           
│   │   │   │           // POST create a new project
│   │   │   │           export async function POST(request: NextRequest) {
│   │   │   │             try {
│   │   │   │               const data = await request.json();
│   │   │   │               const { name, description, startDate, dueDate, status, estimatedHours } = data;
│   │   │   │           
│   │   │   │               if (!name) {
│   │   │   │                 return NextResponse.json({ message: 'Name is required' }, { status: 400 });
│   │   │   │               }
│   │   │   │           
│   │   │   │               const newProject = await prisma.project.create({
│   │   │   │                 data: {
│   │   │   │                   name,
│   │   │   │                   description,
│   │   │   │                   startDate: startDate ? new Date(startDate) : undefined,
│   │   │   │                   dueDate: dueDate ? new Date(dueDate) : undefined,
│   │   │   │                   status,
│   │   │   │                   estimatedHours: estimatedHours ? parseFloat(estimatedHours) : undefined,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │           
│   │   │   │               return NextResponse.json(newProject, { status: 201 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error creating project:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   ├── tasks/
│   │   │   │   ├── [id]/
│   │   │   │   │   └── route.ts
│   │   │   │   │           // src/app/api/tasks/[id]/route.ts
│   │   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │   │           
│   │   │   │   │           // DELETE a task by ID
│   │   │   │   │           export async function DELETE(request: Request, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               await prisma.task.delete({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │               });
│   │   │   │   │               return NextResponse.json({ message: 'Task deleted successfully' }, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error deleting task:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           // PUT update a task by ID
│   │   │   │   │           export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               const data = await request.json();
│   │   │   │   │               const {
│   │   │   │   │                 content,
│   │   │   │   │                 description,
│   │   │   │   │                 status,
│   │   │   │   │                 priority,
│   │   │   │   │                 projectId,
│   │   │   │   │                 objectiveId,
│   │   │   │   │                 startDate,
│   │   │   │   │                 dueDate,
│   │   │   │   │                 estimatedHours,
│   │   │   │   │                 actualHours,
│   │   │   │   │               } = data;
│   │   │   │   │           
│   │   │   │   │               const updatedTask = await prisma.task.update({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │                 data: {
│   │   │   │   │                   content,
│   │   │   │   │                   description,
│   │   │   │   │                   status,
│   │   │   │   │                   priority,
│   │   │   │   │                   project: { connect: { id: projectId } },
│   │   │   │   │                   objective: objectiveId ? { connect: { id: objectiveId } } : { disconnect: true },
│   │   │   │   │                   startDate: startDate ? new Date(startDate) : undefined,
│   │   │   │   │                   dueDate: dueDate ? new Date(dueDate) : undefined,
│   │   │   │   │                   estimatedHours: estimatedHours ? parseFloat(estimatedHours) : undefined,
│   │   │   │   │                   actualHours: actualHours ? parseFloat(actualHours) : undefined,
│   │   │   │   │                 },
│   │   │   │   │               });
│   │   │   │   │           
│   │   │   │   │               return NextResponse.json(updatedTask, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error updating task:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   └── route.ts
│   │   │   │           // src/app/api/tasks/route.ts
│   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │           
│   │   │   │           // GET all tasks
│   │   │   │           export async function GET() {
│   │   │   │             try {
│   │   │   │               const tasks = await prisma.task.findMany({
│   │   │   │                 include: {
│   │   │   │                   project: true,
│   │   │   │                   objective: true,
│   │   │   │                   todoLists: true,
│   │   │   │                   timeEntries: true,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │               return NextResponse.json(tasks, { status: 200 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error fetching tasks:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   │           
│   │   │   │           // POST create a new task
│   │   │   │           export async function POST(request: NextRequest) {
│   │   │   │             try {
│   │   │   │               const data = await request.json();
│   │   │   │               const {
│   │   │   │                 content,
│   │   │   │                 description,
│   │   │   │                 status,
│   │   │   │                 priority,
│   │   │   │                 projectId,
│   │   │   │                 objectiveId,
│   │   │   │                 startDate,
│   │   │   │                 dueDate,
│   │   │   │                 estimatedHours,
│   │   │   │                 actualHours,
│   │   │   │               } = data;
│   │   │   │           
│   │   │   │               if (!content || !projectId) {
│   │   │   │                 return NextResponse.json({ message: 'Content and Project ID are required' }, { status: 400 });
│   │   │   │               }
│   │   │   │           
│   │   │   │               const newTask = await prisma.task.create({
│   │   │   │                 data: {
│   │   │   │                   content,
│   │   │   │                   description,
│   │   │   │                   status,
│   │   │   │                   priority,
│   │   │   │                   project: { connect: { id: projectId } },
│   │   │   │                   objective: objectiveId ? { connect: { id: objectiveId } } : undefined,
│   │   │   │                   startDate: startDate ? new Date(startDate) : undefined,
│   │   │   │                   dueDate: dueDate ? new Date(dueDate) : undefined,
│   │   │   │                   estimatedHours: estimatedHours ? parseFloat(estimatedHours) : undefined,
│   │   │   │                   actualHours: actualHours ? parseFloat(actualHours) : undefined,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │           
│   │   │   │               return NextResponse.json(newTask, { status: 201 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error creating task:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   ├── time-entries/
│   │   │   │   └── route.ts
│   │   │   │           // src/app/api/time_entries/route.ts
│   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │           
│   │   │   │           // GET all time entries
│   │   │   │           export async function GET() {
│   │   │   │             try {
│   │   │   │               const timeEntries = await prisma.timeEntry.findMany({
│   │   │   │                 include: {
│   │   │   │                   task: true,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │               return NextResponse.json(timeEntries, { status: 200 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error fetching time entries:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   │           
│   │   │   │           // POST create a new time entry
│   │   │   │           export async function POST(request: NextRequest) {
│   │   │   │             try {
│   │   │   │               const data = await request.json();
│   │   │   │               const { taskId, startTime, endTime, description } = data;
│   │   │   │           
│   │   │   │               if (!taskId || !startTime) {
│   │   │   │                 return NextResponse.json({ message: 'Task ID and Start Time are required' }, { status: 400 });
│   │   │   │               }
│   │   │   │           
│   │   │   │               const duration = endTime ? (new Date(endTime).getTime() - new Date(startTime).getTime()) / (1000 * 60) : undefined; // Duration in minutes
│   │   │   │           
│   │   │   │               const newTimeEntry = await prisma.timeEntry.create({
│   │   │   │                 data: {
│   │   │   │                   task: { connect: { id: taskId } },
│   │   │   │                   startTime: new Date(startTime),
│   │   │   │                   endTime: endTime ? new Date(endTime) : undefined,
│   │   │   │                   duration,
│   │   │   │                   description,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │           
│   │   │   │               return NextResponse.json(newTimeEntry, { status: 201 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error creating time entry:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   ├── todo_lists/
│   │   │   │   ├── [id]/
│   │   │   │   │   └── route.ts
│   │   │   │   │           // src/app/api/todo_lists/[id]/route.ts
│   │   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │   │           
│   │   │   │   │           // DELETE a todo list by ID
│   │   │   │   │           export async function DELETE(request: Request, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               await prisma.todoList.delete({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │               });
│   │   │   │   │               return NextResponse.json({ message: 'Todo List deleted successfully' }, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error deleting todo list:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           // PUT update a todo list by ID
│   │   │   │   │           export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
│   │   │   │   │             try {
│   │   │   │   │               const data = await request.json();
│   │   │   │   │               const { name, type } = data;
│   │   │   │   │           
│   │   │   │   │               const updatedTodoList = await prisma.todoList.update({
│   │   │   │   │                 where: { id: params.id },
│   │   │   │   │                 data: {
│   │   │   │   │                   name,
│   │   │   │   │                   type,
│   │   │   │   │                 },
│   │   │   │   │               });
│   │   │   │   │           
│   │   │   │   │               return NextResponse.json(updatedTodoList, { status: 200 });
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Error updating todo list:', error);
│   │   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   └── route.ts
│   │   │   │           // src/app/api/todo_lists/route.ts
│   │   │   │           import { NextResponse } from 'next/server';
│   │   │   │           import { prisma } from '@/lib/prisma';
│   │   │   │           import type { NextRequest } from 'next/server';
│   │   │   │           
│   │   │   │           // GET all todo lists
│   │   │   │           export async function GET() {
│   │   │   │             try {
│   │   │   │               const todoLists = await prisma.todoList.findMany({
│   │   │   │                 include: {
│   │   │   │                   tasks: true,
│   │   │   │                 },
│   │   │   │               });
│   │   │   │               return NextResponse.json(todoLists, { status: 200 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error fetching todo lists:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   │           
│   │   │   │           // POST create a new todo list
│   │   │   │           export async function POST(request: NextRequest) {
│   │   │   │             try {
│   │   │   │               const data = await request.json();
│   │   │   │               const { name, type } = data;
│   │   │   │           
│   │   │   │               if (!name) {
│   │   │   │                 return NextResponse.json({ message: 'Name is required' }, { status: 400 });
│   │   │   │               }
│   │   │   │           
│   │   │   │               const newTodoList = await prisma.todoList.create({
│   │   │   │                 data: {
│   │   │   │                   name,
│   │   │   │                   type: type || 'daily',
│   │   │   │                 },
│   │   │   │               });
│   │   │   │           
│   │   │   │               return NextResponse.json(newTodoList, { status: 201 });
│   │   │   │             } catch (error) {
│   │   │   │               console.error('Error creating todo list:', error);
│   │   │   │               return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │   │             }
│   │   │   │           }
│   │   │   └── todo_tasks/
│   │   │       ├── [todoListId]/
│   │   │       │   └── [taskId]/
│   │   │       │       └── route.ts
│   │   │       │               // src/app/api/todo_tasks/[todoListId]/[taskId]/route.ts
│   │   │       │               import { NextResponse } from 'next/server';
│   │   │       │               import { prisma } from '@/lib/prisma';
│   │   │       │               import type { NextRequest } from 'next/server';
│   │   │       │               
│   │   │       │               // DELETE a task from a todo list
│   │   │       │               export async function DELETE(request: Request, { params }: { params: { todoListId: string; taskId: string } }) {
│   │   │       │                 try {
│   │   │       │                   await prisma.todoList.update({
│   │   │       │                     where: { id: params.todoListId },
│   │   │       │                     data: {
│   │   │       │                       tasks: {
│   │   │       │                         disconnect: { id: params.taskId },
│   │   │       │                       },
│   │   │       │                     },
│   │   │       │                   });
│   │   │       │                   return NextResponse.json({ message: 'Task removed from Todo List successfully' }, { status: 200 });
│   │   │       │                 } catch (error) {
│   │   │       │                   console.error('Error removing task from todo list:', error);
│   │   │       │                   return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │       │                 }
│   │   │       │               }
│   │   │       │               
│   │   │       │               // POST associate a task with a todo list
│   │   │       │               export async function POST(request: NextRequest, { params }: { params: { todoListId: string; taskId: string } }) {
│   │   │       │                 try {
│   │   │       │                   const { todoListId, taskId } = params;
│   │   │       │               
│   │   │       │                   await prisma.todoList.update({
│   │   │       │                     where: { id: todoListId },
│   │   │       │                     data: {
│   │   │       │                       tasks: {
│   │   │       │                         connect: { id: taskId },
│   │   │       │                       },
│   │   │       │                     },
│   │   │       │                   });
│   │   │       │               
│   │   │       │                   return NextResponse.json({ message: 'Task added to Todo List successfully' }, { status: 200 });
│   │   │       │                 } catch (error) {
│   │   │       │                   console.error('Error adding task to todo list:', error);
│   │   │       │                   return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });
│   │   │       │                 }
│   │   │       │               }
│   │   │       └── route.ts
│   │   │               // app/api/todo_tasks/route.ts
│   │   │               import { NextResponse } from 'next/server'
│   │   │               import { prisma } from '@/lib/prisma'
│   │   │               
│   │   │               export async function POST(request: Request) {
│   │   │                 const json = await request.json()
│   │   │                 const task = await prisma.task.update({
│   │   │                   where: { id: json.taskId },
│   │   │                   data: {
│   │   │                     todoLists: {
│   │   │                       connect: { id: json.todoListId },
│   │   │                     },
│   │   │                   },
│   │   │                 })
│   │   │                 return NextResponse.json(task)
│   │   │               }
│   │   ├── dashboard/
│   │   │   └── page.tsx
│   │   ├── favicon.ico
│   │   ├── globals.css
│   │   ├── home/
│   │   │   └── page.tsx
│   │   ├── layout.tsx
│   │   │       import type { Metadata } from "next";
│   │   │       import { Geist, Geist_Mono } from "next/font/google";
│   │   │       import "./globals.css";
│   │   │       
│   │   │       const geistSans = Geist({
│   │   │         variable: "--font-geist-sans",
│   │   │         subsets: ["latin"],
│   │   │       });
│   │   │       
│   │   │       const geistMono = Geist_Mono({
│   │   │         variable: "--font-geist-mono",
│   │   │         subsets: ["latin"],
│   │   │       });
│   │   │       
│   │   │       export const metadata: Metadata = {
│   │   │         title: "Create Next App",
│   │   │         description: "Generated by create next app",
│   │   │       };
│   │   │       
│   │   │       export default function RootLayout({
│   │   │         children,
│   │   │       }: Readonly<{
│   │   │         children: React.ReactNode;
│   │   │       }>) {
│   │   │         return (
│   │   │           <html lang="en" className="dark">
│   │   │             <body
│   │   │               className={`${geistSans.variable} ${geistMono.variable} min-h-screen bg-background text-foreground antialiased`}
│   │   │             >
│   │   │               {children}
│   │   │             </body>
│   │   │           </html>
│   │   │         );
│   │   │       }
│   │   ├── notepad/
│   │   │   └── page.tsx
│   │   │           // src/app/notepad/page.tsx
│   │   │           'use client';
│   │   │           
│   │   │           import React, { useState, useEffect } from 'react';
│   │   │           import { Save } from 'lucide-react';
│   │   │           import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui';
│   │   │           import { Button } from '@/components/ui/button';
│   │   │           
│   │   │           export default function NotepadPage() {
│   │   │             const [text, setText] = useState('');
│   │   │             const [savedText, setSavedText] = useState('');
│   │   │             const [showSaved, setShowSaved] = useState(false);
│   │   │           
│   │   │             // Load saved content from localStorage on mount
│   │   │             useEffect(() => {
│   │   │               const saved = localStorage.getItem('notepad-content');
│   │   │               if (saved) {
│   │   │                 setText(saved);
│   │   │                 setSavedText(saved);
│   │   │               }
│   │   │             }, []);
│   │   │           
│   │   │             // Handle text changes
│   │   │             const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
│   │   │               setText(e.target.value);
│   │   │               setShowSaved(false);
│   │   │             };
│   │   │           
│   │   │             // Save content to localStorage
│   │   │             const handleSave = () => {
│   │   │               localStorage.setItem('notepad-content', text);
│   │   │               setSavedText(text);
│   │   │               setShowSaved(true);
│   │   │               setTimeout(() => setShowSaved(false), 2000);
│   │   │             };
│   │   │           
│   │   │             // Handle keyboard shortcuts
│   │   │             const handleKeyDown = (e: React.KeyboardEvent) => {
│   │   │               if (e.ctrlKey && e.key === 's') {
│   │   │                 e.preventDefault();
│   │   │                 handleSave();
│   │   │               }
│   │   │             };
│   │   │           
│   │   │             return (
│   │   │               <div className="min-h-screen bg-black p-6">
│   │   │                 <Card className="bg-zinc-900 border-zinc-800">
│   │   │                   <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
│   │   │                     <CardTitle className="text-white">Notepad</CardTitle>
│   │   │                     <Button 
│   │   │                       onClick={handleSave}
│   │   │                       className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2"
│   │   │                     >
│   │   │                       <Save className="h-4 w-4" />
│   │   │                       Save
│   │   │                     </Button>
│   │   │                   </CardHeader>
│   │   │                   <CardContent>
│   │   │                     {showSaved && (
│   │   │                       <div className="mb-4 p-2 bg-emerald-900/50 text-emerald-400 rounded-md border border-emerald-800">
│   │   │                         Changes saved successfully!
│   │   │                       </div>
│   │   │                     )}
│   │   │           
│   │   │                     <textarea
│   │   │                       className="w-full p-4 bg-zinc-800 border border-zinc-700 rounded-md resize-none 
│   │   │                                focus:outline-none focus:ring-2 focus:ring-blue-500 text-zinc-100 font-mono
│   │   │                                min-h-[calc(100vh-16rem)]"
│   │   │                       value={text}
│   │   │                       onChange={handleTextChange}
│   │   │                       onKeyDown={handleKeyDown}
│   │   │                       spellCheck={true}
│   │   │                       placeholder="Start typing... (Ctrl+S to save)"
│   │   │                     />
│   │   │           
│   │   │                     <div className="mt-4 text-sm text-zinc-400 flex justify-between">
│   │   │                       <span>{text.length} characters</span>
│   │   │                       <span>{text.split(/\s+/).filter(Boolean).length} words</span>
│   │   │                     </div>
│   │   │                   </CardContent>
│   │   │                 </Card>
│   │   │               </div>
│   │   │             );
│   │   │           }
│   │   ├── objectives/
│   │   │   └── page.tsx
│   │   │           
│   │   │           // src/app/objectives/page.tsx
│   │   │           'use client';
│   │   │           
│   │   │           import React from 'react';
│   │   │           import { useObjectives } from '@/hooks/useObjectives';
│   │   │           import { ObjectiveForm } from '@/components/forms';
│   │   │           import { useProjects } from '@/hooks/useProjects';
│   │   │           
│   │   │           export default function ObjectivesPage() {
│   │   │             const { objectives, loading } = useObjectives();
│   │   │             const { projects } = useProjects();
│   │   │           
│   │   │             if (loading) return <div>Loading...</div>;
│   │   │           
│   │   │             return (
│   │   │               <div className="p-8">
│   │   │                 <h1 className="text-3xl font-bold mb-6">Objectives</h1>
│   │   │                 <ObjectiveForm onSubmit={() => {}} projects={projects} />
│   │   │                 <div className="mt-6 space-y-4">
│   │   │                   {objectives.map((objective) => (
│   │   │                     <div key={objective.id} className="p-4 bg-gray-800 rounded-lg">
│   │   │                       <h3 className="text-xl font-semibold">{objective.name}</h3>
│   │   │                       <p className="text-gray-400">{objective.description}</p>
│   │   │                     </div>
│   │   │                   ))}
│   │   │                 </div>
│   │   │               </div>
│   │   │             );
│   │   │           }
│   │   ├── page.tsx
│   │   │       'use client';
│   │   │       
│   │   │       import React from 'react';
│   │   │       import { useProjects } from '@/hooks/useProjects';
│   │   │       import { useObjectives } from '@/hooks/useObjectives';
│   │   │       import { useTasks } from '@/hooks/useTasks';
│   │   │       import { useTodoLists } from '@/hooks/useTodoLists';
│   │   │       import { DashboardLayout } from '@/components/dashboard/DashboardLayout';
│   │   │       import { QuickAddDialogs } from '@/components/dialogs';
│   │   │       import { PROJECT_STATUS, TASK_STATUS } from '@/constants';
│   │   │       import Link from 'next/link';
│   │   │       import { Button } from '@/components/ui/button';
│   │   │       import { Menu, FileEdit } from 'lucide-react';
│   │   │       
│   │   │       export default function Home() {
│   │   │         const { 
│   │   │           projects, 
│   │   │           loading: projectsLoading, 
│   │   │           error: projectsError,
│   │   │           createProject,
│   │   │           refresh: refreshProjects 
│   │   │         } = useProjects();
│   │   │         
│   │   │         const { 
│   │   │           objectives, 
│   │   │           loading: objectivesLoading, 
│   │   │           error: objectivesError,
│   │   │           createObjective,
│   │   │           refresh: refreshObjectives 
│   │   │         } = useObjectives();
│   │   │         
│   │   │         const { 
│   │   │           tasks, 
│   │   │           loading: tasksLoading, 
│   │   │           error: tasksError,
│   │   │           createTask,
│   │   │           refresh: refreshTasks 
│   │   │         } = useTasks();
│   │   │         
│   │   │         const {
│   │   │           todoLists,
│   │   │           loading: todoListsLoading,
│   │   │           error: todoListsError,
│   │   │           refresh: refreshTodoLists
│   │   │         } = useTodoLists();
│   │   │       
│   │   │         const isLoading = projectsLoading || objectivesLoading || tasksLoading || todoListsLoading;
│   │   │         const hasError = projectsError || objectivesError || tasksError || todoListsError;
│   │   │       
│   │   │         // Handle loading and error states
│   │   │         if (isLoading || hasError) {
│   │   │           return (
│   │   │             <div className="flex min-h-screen items-center justify-center bg-neutral-900">
│   │   │               <div className="text-xl text-neutral-100">
│   │   │                 {isLoading ? (
│   │   │                   'Loading dashboard...'
│   │   │                 ) : (
│   │   │                   <span className="text-red-500">
│   │   │                     Error loading dashboard data. Please try again later.
│   │   │                   </span>
│   │   │                 )}
│   │   │               </div>
│   │   │             </div>
│   │   │           );
│   │   │         }
│   │   │       
│   │   │         // Refresh all data
│   │   │         const handleRefresh = async () => {
│   │   │           await Promise.all([
│   │   │             refreshProjects(),
│   │   │             refreshObjectives(),
│   │   │             refreshTasks(),
│   │   │             refreshTodoLists()
│   │   │           ]);
│   │   │         };
│   │   │       
│   │   │         // Filter active projects
│   │   │         const activeProjects = projects.filter(
│   │   │           project => project.status !== PROJECT_STATUS.COMPLETED
│   │   │         );
│   │   │       
│   │   │         // Calculate task statistics
│   │   │         const taskStats = {
│   │   │           todo: tasks.filter(task => task.status === TASK_STATUS.TODO).length,
│   │   │           inProgress: tasks.filter(task => task.status === TASK_STATUS.IN_PROGRESS).length,
│   │   │           done: tasks.filter(task => task.status === TASK_STATUS.DONE).length,
│   │   │         };
│   │   │       
│   │   │         const handleTimeEntryAdd = async (data) => {
│   │   │           console.log('Time entry to be implemented', data);
│   │   │           await handleRefresh();
│   │   │         };
│   │   │       
│   │   │         return (
│   │   │           <div className="min-h-screen bg-neutral-900">
│   │   │             {/* Header with Navigation */}
│   │   │             <div className="border-b border-neutral-800 bg-neutral-900/50 backdrop-blur-sm sticky top-0 z-50">
│   │   │               <div className="flex items-center justify-between px-4 py-3">
│   │   │                 <h1 className="text-xl font-bold text-white">Dashboard</h1>
│   │   │                 <div className="flex items-center gap-4">
│   │   │                   <Button variant="ghost" size="sm" asChild>
│   │   │                     <Link href="/projects">Projects</Link>
│   │   │                   </Button>
│   │   │                   <Button variant="ghost" size="sm" asChild>
│   │   │                     <Link href="/objectives">Objectives</Link>
│   │   │                   </Button>
│   │   │                   <Button variant="ghost" size="sm" asChild>
│   │   │                     <Link href="/tasks">Tasks</Link>
│   │   │                   </Button>
│   │   │                   <Button variant="ghost" size="sm" asChild>
│   │   │                     <Link href="/time">Time</Link>
│   │   │                   </Button>
│   │   │                   <Button variant="ghost" size="sm" asChild>
│   │   │                     <Link href="/todo">Todo</Link>
│   │   │                   </Button>
│   │   │                   <Button variant="ghost" size="sm" asChild className="flex items-center gap-2">
│   │   │                     <Link href="/notepad">
│   │   │                       <span className="flex items-center gap-2">
│   │   │                         <FileEdit className="h-4 w-4" />
│   │   │                         Notes
│   │   │                       </span>
│   │   │                     </Link>
│   │   │                   </Button>
│   │   │                 </div>
│   │   │               </div>
│   │   │             </div>
│   │   │       
│   │   │             <div className="p-4">
│   │   │               {/* Quick Add Section */}
│   │   │               <QuickAddDialogs
│   │   │                 projects={projects}
│   │   │                 objectives={objectives}
│   │   │                 tasks={tasks.filter(t => t.status !== 'done')}
│   │   │                 onProjectAdd={createProject}
│   │   │                 onObjectiveAdd={createObjective}
│   │   │                 onTaskAdd={createTask}
│   │   │                 onTimeEntryAdd={handleTimeEntryAdd}
│   │   │               />
│   │   │       
│   │   │               {/* Dashboard Layout */}
│   │   │               <DashboardLayout 
│   │   │                 projects={projects}
│   │   │                 objectives={objectives}
│   │   │                 tasks={tasks}
│   │   │                 todoLists={todoLists}
│   │   │                 taskStats={taskStats}
│   │   │                 onRefresh={handleRefresh}
│   │   │               />
│   │   │             </div>
│   │   │           </div>
│   │   │         );
│   │   │       }
│   │   ├── page.tsx.md
│   │   ├── projects/
│   │   │   └── page.tsx
│   │   │           // src/app/projects/page.tsx
│   │   │           'use client';
│   │   │           
│   │   │           import React from 'react';
│   │   │           import { useProjects } from '@/hooks/useProjects';
│   │   │           import { ProjectForm } from '@/components/forms';
│   │   │           
│   │   │           export default function ProjectsPage() {
│   │   │             const { projects, loading } = useProjects();
│   │   │           
│   │   │             if (loading) return <div>Loading...</div>;
│   │   │           
│   │   │             return (
│   │   │               <div className="p-8">
│   │   │                 <h1 className="text-3xl font-bold mb-6">Projects</h1>
│   │   │                 <ProjectForm onSubmit={() => {}} />
│   │   │                 <div className="mt-6 space-y-4">
│   │   │                   {projects.map((project) => (
│   │   │                     <div key={project.id} className="p-4 bg-gray-800 rounded-lg">
│   │   │                       <h3 className="text-xl font-semibold">{project.name}</h3>
│   │   │                       <p className="text-gray-400">{project.description}</p>
│   │   │                     </div>
│   │   │                   ))}
│   │   │                 </div>
│   │   │               </div>
│   │   │             );
│   │   │           }
│   │   ├── tasks/
│   │   │   └── page.tsx
│   │   │           
│   │   │           // src/app/tasks/page.tsx
│   │   │           'use client';
│   │   │           
│   │   │           import React from 'react';
│   │   │           import { useTasks } from '@/hooks/useTasks';
│   │   │           import { TaskForm } from '@/components/forms';
│   │   │           import { useProjects } from '@/hooks/useProjects';
│   │   │           import { useObjectives } from '@/hooks/useObjectives';
│   │   │           
│   │   │           export default function TasksPage() {
│   │   │             const { tasks, loading } = useTasks();
│   │   │             const { projects } = useProjects();
│   │   │             const { objectives } = useObjectives();
│   │   │           
│   │   │             if (loading) return <div>Loading...</div>;
│   │   │           
│   │   │             return (
│   │   │               <div className="p-8">
│   │   │                 <h1 className="text-3xl font-bold mb-6">Tasks</h1>
│   │   │                 <TaskForm onSubmit={() => {}} projects={projects} objectives={objectives} />
│   │   │                 <div className="mt-6 space-y-4">
│   │   │                   {tasks.map((task) => (
│   │   │                     <div key={task.id} className="p-4 bg-gray-800 rounded-lg">
│   │   │                       <h3 className="text-xl font-semibold">{task.content}</h3>
│   │   │                       <p className="text-gray-400">{task.description}</p>
│   │   │                     </div>
│   │   │                   ))}
│   │   │                 </div>
│   │   │               </div>
│   │   │             );
│   │   │           }
│   │   ├── time/
│   │   │   └── page.tsx
│   │   │           
│   │   │           // src/app/time/page.tsx
│   │   │           'use client';
│   │   │           
│   │   │           import React from 'react';
│   │   │           import { useTimeEntries } from '@/hooks/useTimeEntries';
│   │   │           import { TimeEntryForm } from '@/components/forms';
│   │   │           import { useTasks } from '@/hooks/useTasks';
│   │   │           
│   │   │           export default function TimePage() {
│   │   │             const { timeEntries, loading } = useTimeEntries();
│   │   │             const { tasks } = useTasks();
│   │   │           
│   │   │             if (loading) return <div>Loading...</div>;
│   │   │           
│   │   │             return (
│   │   │               <div className="p-8">
│   │   │                 <h1 className="text-3xl font-bold mb-6">Time Tracking</h1>
│   │   │                 <TimeEntryForm onSubmit={() => {}} tasks={tasks} />
│   │   │                 <div className="mt-6 space-y-4">
│   │   │                   {timeEntries.map((entry) => (
│   │   │                     <div key={entry.id} className="p-4 bg-gray-800 rounded-lg">
│   │   │                       <h3 className="text-xl font-semibold">
│   │   │                         {entry.task?.content || 'Unknown Task'}
│   │   │                       </h3>
│   │   │                       <p className="text-gray-400">{entry.description}</p>
│   │   │                     </div>
│   │   │                   ))}
│   │   │                 </div>
│   │   │               </div>
│   │   │             );
│   │   │           }
│   │   └── todo/
│   │       └── page.tsx
│   │               
│   │               // src/app/todo/page.tsx
│   │               'use client';
│   │               
│   │               import React from 'react';
│   │               import { useTodoLists } from '@/hooks/useTodoLists';
│   │               import { TodoListForm } from '@/components/forms';
│   │               
│   │               export default function TodoPage() {
│   │                 const { todoLists, loading } = useTodoLists();
│   │               
│   │                 if (loading) return <div>Loading...</div>;
│   │               
│   │                 return (
│   │                   <div className="p-8">
│   │                     <h1 className="text-3xl font-bold mb-6">Todo Lists</h1>
│   │                     <TodoListForm onSubmit={() => {}} />
│   │                     <div className="mt-6 space-y-4">
│   │                       {todoLists.map((list) => (
│   │                         <div key={list.id} className="p-4 bg-gray-800 rounded-lg">
│   │                           <h3 className="text-xl font-semibold">{list.name}</h3>
│   │                           <p className="text-gray-400">Type: {list.type}</p>
│   │                           <p className="text-gray-400">Tasks: {list.tasks?.length || 0}</p>
│   │                         </div>
│   │                       ))}
│   │                     </div>
│   │                   </div>
│   │                 );
│   │               }
│   ├── components/
│   │   ├── dashboard/
│   │   │   ├── DashboardLayout.tsx
│   │   │   │       import React, { useMemo } from 'react';
│   │   │   │       import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui';
│   │   │   │       import type { Project, Objective, Task, TodoList } from '@/types';
│   │   │   │       import { 
│   │   │   │         LayoutGrid,
│   │   │   │         CheckCircle2,
│   │   │   │         Clock,
│   │   │   │         AlertCircle
│   │   │   │       } from 'lucide-react';
│   │   │   │       
│   │   │   │       export interface DashboardLayoutProps {
│   │   │   │         projects: Project[];
│   │   │   │         objectives: Objective[];
│   │   │   │         tasks: Task[];
│   │   │   │         todoLists: TodoList[];
│   │   │   │         taskStats: {
│   │   │   │           todo: number;
│   │   │   │           inProgress: number;
│   │   │   │           done: number;
│   │   │   │         };
│   │   │   │         onRefresh: () => Promise<void>;
│   │   │   │       }
│   │   │   │       
│   │   │   │       // Stats Card Component
│   │   │   │       const StatsCard = ({ label, value, icon, color }: { 
│   │   │   │         label: string;
│   │   │   │         value: number | string;
│   │   │   │         icon: React.ReactNode;
│   │   │   │         color: string;
│   │   │   │       }) => (
│   │   │   │         <div className="bg-zinc-900 border border-zinc-800 rounded-lg p-4 flex items-center gap-4">
│   │   │   │           <div className={`p-2 rounded-full ${color}`}>
│   │   │   │             {icon}
│   │   │   │           </div>
│   │   │   │           <div>
│   │   │   │             <p className="text-sm text-zinc-400">{label}</p>
│   │   │   │             <p className="text-2xl font-semibold text-white">{value}</p>
│   │   │   │           </div>
│   │   │   │         </div>
│   │   │   │       );
│   │   │   │       
│   │   │   │       // Project Card Component
│   │   │   │       const ProjectCard = ({ project }: { project: Project }) => (
│   │   │   │         <div className="bg-zinc-900 border border-zinc-800 rounded-lg p-4 hover:bg-zinc-800/80 transition-colors">
│   │   │   │           <h3 className="font-semibold text-lg text-white">{project.name}</h3>
│   │   │   │           {project.description && (
│   │   │   │             <p className="text-sm text-zinc-300 mt-1">{project.description}</p>
│   │   │   │           )}
│   │   │   │           <div className="mt-4 flex gap-4">
│   │   │   │             <div>
│   │   │   │               <p className="text-xs text-zinc-400">Status</p>
│   │   │   │               <p className="text-sm text-white">{project.status}</p>
│   │   │   │             </div>
│   │   │   │             <div>
│   │   │   │               <p className="text-xs text-zinc-400">Tasks</p>
│   │   │   │               <p className="text-sm text-white">
│   │   │   │                 {project.tasks?.length || 0}
│   │   │   │               </p>
│   │   │   │             </div>
│   │   │   │           </div>
│   │   │   │         </div>
│   │   │   │       );
│   │   │   │       
│   │   │   │       // Task List Component
│   │   │   │       const TaskList = ({ tasks }: { tasks: Task[] }) => (
│   │   │   │         <div className="space-y-2">
│   │   │   │           {tasks.map(task => (
│   │   │   │             <div 
│   │   │   │               key={task.id}
│   │   │   │               className="bg-zinc-900 border border-zinc-800 rounded-lg p-3 hover:bg-zinc-800/80 transition-colors"
│   │   │   │             >
│   │   │   │               <div className="flex items-center gap-2">
│   │   │   │                 <div className={`w-2 h-2 rounded-full ${
│   │   │   │                   task.priority === 'high' ? 'bg-red-400' :
│   │   │   │                   task.priority === 'medium' ? 'bg-amber-400' :
│   │   │   │                   'bg-emerald-400'
│   │   │   │                 }`} />
│   │   │   │                 <p className="text-white">{task.content}</p>
│   │   │   │               </div>
│   │   │   │               {task.description && (
│   │   │   │                 <p className="text-sm text-zinc-300 mt-1 ml-4">{task.description}</p>
│   │   │   │               )}
│   │   │   │             </div>
│   │   │   │           ))}
│   │   │   │         </div>
│   │   │   │       );
│   │   │   │       
│   │   │   │       export function DashboardLayout({
│   │   │   │         projects,
│   │   │   │         objectives,
│   │   │   │         tasks,
│   │   │   │         todoLists,
│   │   │   │         taskStats,
│   │   │   │         onRefresh
│   │   │   │       }: DashboardLayoutProps) {
│   │   │   │         const stats = useMemo(() => [
│   │   │   │           {
│   │   │   │             label: 'Total Tasks',
│   │   │   │             value: tasks.length,
│   │   │   │             icon: <LayoutGrid className="h-5 w-5 text-emerald-400" />,
│   │   │   │             color: 'bg-emerald-400/10'
│   │   │   │           },
│   │   │   │           {
│   │   │   │             label: 'Completed',
│   │   │   │             value: taskStats.done,
│   │   │   │             icon: <CheckCircle2 className="h-5 w-5 text-blue-400" />,
│   │   │   │             color: 'bg-blue-400/10'
│   │   │   │           },
│   │   │   │           {
│   │   │   │             label: 'In Progress',
│   │   │   │             value: taskStats.inProgress,
│   │   │   │             icon: <Clock className="h-5 w-5 text-amber-400" />,
│   │   │   │             color: 'bg-amber-400/10'
│   │   │   │           },
│   │   │   │           {
│   │   │   │             label: 'High Priority',
│   │   │   │             value: tasks.filter(t => t.priority === 'high').length,
│   │   │   │             icon: <AlertCircle className="h-5 w-5 text-red-400" />,
│   │   │   │             color: 'bg-red-400/10'
│   │   │   │           }
│   │   │   │         ], [tasks, taskStats]);
│   │   │   │       
│   │   │   │         const recentTasks = tasks
│   │   │   │           .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
│   │   │   │           .slice(0, 5);
│   │   │   │       
│   │   │   │         return (
│   │   │   │           <div className="space-y-6 p-6 bg-black min-h-screen">
│   │   │   │             {/* Stats Grid */}
│   │   │   │             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
│   │   │   │               {stats.map((stat, index) => (
│   │   │   │                 <StatsCard key={index} {...stat} />
│   │   │   │               ))}
│   │   │   │             </div>
│   │   │   │       
│   │   │   │             <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
│   │   │   │               {/* Projects Section */}
│   │   │   │               <Card className="lg:col-span-2 bg-zinc-900 border-zinc-800">
│   │   │   │                 <CardHeader>
│   │   │   │                   <CardTitle className="text-white">Recent Projects</CardTitle>
│   │   │   │                 </CardHeader>
│   │   │   │                 <CardContent className="space-y-4">
│   │   │   │                   {projects.slice(0, 3).map(project => (
│   │   │   │                     <ProjectCard key={project.id} project={project} />
│   │   │   │                   ))}
│   │   │   │                 </CardContent>
│   │   │   │               </Card>
│   │   │   │       
│   │   │   │               {/* Recent Tasks Section */}
│   │   │   │               <Card className="bg-zinc-900 border-zinc-800">
│   │   │   │                 <CardHeader>
│   │   │   │                   <CardTitle className="text-white">Recent Tasks</CardTitle>
│   │   │   │                 </CardHeader>
│   │   │   │                 <CardContent>
│   │   │   │                   <TaskList tasks={recentTasks} />
│   │   │   │                 </CardContent>
│   │   │   │               </Card>
│   │   │   │             </div>
│   │   │   │       
│   │   │   │             {/* Todo Lists Section */}
│   │   │   │             <Card className="bg-zinc-900 border-zinc-800">
│   │   │   │               <CardHeader>
│   │   │   │                 <CardTitle className="text-white">Todo Lists</CardTitle>
│   │   │   │               </CardHeader>
│   │   │   │               <CardContent>
│   │   │   │                 <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
│   │   │   │                   {todoLists.map(list => (
│   │   │   │                     <div 
│   │   │   │                       key={list.id}
│   │   │   │                       className="bg-zinc-900 border border-zinc-800 rounded-lg p-4 hover:bg-zinc-800/80 transition-colors"
│   │   │   │                     >
│   │   │   │                       <h3 className="font-semibold text-white">{list.name}</h3>
│   │   │   │                       <p className="text-sm text-zinc-300 mt-1">
│   │   │   │                         {list.tasks?.length || 0} tasks
│   │   │   │                       </p>
│   │   │   │                     </div>
│   │   │   │                   ))}
│   │   │   │                 </div>
│   │   │   │               </CardContent>
│   │   │   │             </Card>
│   │   │   │           </div>
│   │   │   │         );
│   │   │   │       }
│   │   │   │       
│   │   │   │       export default DashboardLayout;
│   │   │   ├── index.ts
│   │   │   │       export * from './DashboardLayout';
│   │   │   └── oldDash/
│   │   │       ├── DashboardLayout.tsx
│   │   │       │       // src/components/dashboard/DashboardLayout/DashboardLayout.tsx
│   │   │       │       import React, { useMemo } from 'react';
│   │   │       │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       │       import { ProjectStats } from './ProjectStats';
│   │   │       │       import { TaskList } from './TaskList';
│   │   │       │       import { ProjectList } from './ProjectList';
│   │   │       │       import { TodoListSummary } from './TodoListSummary';
│   │   │       │       import type { Project, Objective, Task, TodoList } from '@/types';
│   │   │       │       
│   │   │       │       // src/components/dashboard/DashboardLayout/DashboardLayout.tsx
│   │   │       │       export interface DashboardLayoutProps {
│   │   │       │         projects: Project[];
│   │   │       │         objectives: Objective[];
│   │   │       │         tasks: Task[];
│   │   │       │         todoLists: TodoList[];
│   │   │       │         onRefresh: () => void;
│   │   │       │       }
│   │   │       │       
│   │   │       │       export function DashboardLayout({ 
│   │   │       │         projects, 
│   │   │       │         objectives, 
│   │   │       │         tasks, 
│   │   │       │         todoLists,
│   │   │       │         onRefresh 
│   │   │       │       }: DashboardLayoutProps) {
│   │   │       │         // Calculate statistics for ProjectStats component
│   │   │       │         const stats = useMemo(() => ({
│   │   │       │           projectCount: projects.length,
│   │   │       │           objectiveCount: objectives.length,
│   │   │       │           taskCount: tasks.length,
│   │   │       │           completedTasks: tasks.filter(t => t.status === 'done').length,
│   │   │       │           inProgressTasks: tasks.filter(t => t.status === 'in-progress').length,
│   │   │       │           highPriorityTasks: tasks.filter(t => t.priority === 'high').length
│   │   │       │         }), [projects, objectives, tasks]);
│   │   │       │       
│   │   │       │         return (
│   │   │       │           <div className="min-h-screen bg-gray-900 text-white p-6 space-y-6">
│   │   │       │             <header className="mb-8">
│   │   │       │               <h1 className="text-3xl font-bold mb-2">Project Dashboard</h1>
│   │   │       │               <p className="text-gray-400">
│   │   │       │                 Managing {projects.length} projects with {objectives.length} objectives and {tasks.length} tasks
│   │   │       │               </p>
│   │   │       │             </header>
│   │   │       │       
│   │   │       │             {/* Project Statistics */}
│   │   │       │             <ProjectStats {...stats} />
│   │   │       │       
│   │   │       │             <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
│   │   │       │               {/* Main Project List - Takes up 2 columns */}
│   │   │       │               <div className="lg:col-span-2">
│   │   │       │                 <Card>
│   │   │       │                   <CardHeader>
│   │   │       │                     <CardTitle>Projects Overview</CardTitle>
│   │   │       │                   </CardHeader>
│   │   │       │                   <CardContent>
│   │   │       │                     <ProjectList
│   │   │       │                       projects={projects}
│   │   │       │                       objectives={objectives}
│   │   │       │                       tasks={tasks}
│   │   │       │                       onRefresh={onRefresh}
│   │   │       │                     />
│   │   │       │                   </CardContent>
│   │   │       │                 </Card>
│   │   │       │               </div>
│   │   │       │       
│   │   │       │               {/* Side Column - Tasks and Todo Lists */}
│   │   │       │               <div className="space-y-6">
│   │   │       │                 <TaskList
│   │   │       │                   tasks={tasks}
│   │   │       │                   projects={projects}
│   │   │       │                   objectives={objectives}
│   │   │       │                   onRefresh={onRefresh}
│   │   │       │                 />
│   │   │       │                 <TodoListSummary todoLists={todoLists} />
│   │   │       │               </div>
│   │   │       │             </div>
│   │   │       │           </div>
│   │   │       │         );
│   │   │       │       }
│   │   │       ├── ProjectList.tsx
│   │   │       │       // src/components/dashboard/DashboardLayout/ProjectList.tsx
│   │   │       │       import React from 'react';
│   │   │       │       import type { Project, Objective, Task } from '@/types';
│   │   │       │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       │       
│   │   │       │       
│   │   │       │       // src/components/dashboard/DashboardLayout/ProjectList.tsx
│   │   │       │       interface ProjectListProps {
│   │   │       │         projects: Project[];
│   │   │       │         objectives: Objective[];
│   │   │       │         tasks: Task[];
│   │   │       │         onRefresh: () => void;
│   │   │       │       }
│   │   │       │       
│   │   │       │       export function ProjectList({ projects }: ProjectListProps) {
│   │   │       │         return (
│   │   │       │           <Card>
│   │   │       │             <CardHeader>
│   │   │       │               <CardTitle>Projects</CardTitle>
│   │   │       │             </CardHeader>
│   │   │       │             <CardContent>
│   │   │       │               {projects.length === 0 ? (
│   │   │       │                 <p>No projects available.</p>
│   │   │       │               ) : (
│   │   │       │                 <ul className="space-y-2">
│   │   │       │                   {projects.map((project) => (
│   │   │       │                     <li key={project.id} className="p-2 border rounded-md">
│   │   │       │                       <h3 className="text-lg font-semibold">{project.name}</h3>
│   │   │       │                       <p className="text-sm text-gray-600">{project.description}</p>
│   │   │       │                       <p className="text-sm text-gray-500">
│   │   │       │                         Status: {project.status} | Estimated Hours: {project.estimatedHours || 'N/A'}
│   │   │       │                       </p>
│   │   │       │                       <p className="text-sm text-gray-500">
│   │   │       │                         Start Date: {project.startDate ? new Date(project.startDate).toLocaleDateString() : 'N/A'} | Due Date: {project.dueDate ? new Date(project.dueDate).toLocaleDateString() : 'N/A'}
│   │   │       │                       </p>
│   │   │       │                     </li>
│   │   │       │                   ))}
│   │   │       │                 </ul>
│   │   │       │               )}
│   │   │       │             </CardContent>
│   │   │       │           </Card>
│   │   │       │         );
│   │   │       │       }
│   │   │       ├── ProjectStats.tsx
│   │   │       │       // src/components/dashboard/DashboardLayout/ProjectStats.tsx
│   │   │       │       import React from 'react';
│   │   │       │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       │       
│   │   │       │       interface ProjectStatsProps {
│   │   │       │         projectCount: number;
│   │   │       │         objectiveCount: number;
│   │   │       │         taskCount: number;
│   │   │       │         completedTasks: number;
│   │   │       │         inProgressTasks: number;
│   │   │       │         highPriorityTasks: number;
│   │   │       │         onRefresh: () => void;
│   │   │       │       }
│   │   │       │       
│   │   │       │       export function ProjectStats({
│   │   │       │         projectCount,
│   │   │       │         objectiveCount,
│   │   │       │         taskCount,
│   │   │       │         completedTasks,
│   │   │       │         inProgressTasks,
│   │   │       │         highPriorityTasks,
│   │   │       │       }: ProjectStatsProps) {
│   │   │       │         return (
│   │   │       │           <Card>
│   │   │       │             <CardHeader>
│   │   │       │               <CardTitle>Statistics</CardTitle>
│   │   │       │             </CardHeader>
│   │   │       │             <CardContent>
│   │   │       │               <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
│   │   │       │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │       │                   <h4 className="text-xl font-bold">{projectCount}</h4>
│   │   │       │                   <p className="text-sm text-gray-600">Total Projects</p>
│   │   │       │                 </div>
│   │   │       │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │       │                   <h4 className="text-xl font-bold">{objectiveCount}</h4>
│   │   │       │                   <p className="text-sm text-gray-600">Total Objectives</p>
│   │   │       │                 </div>
│   │   │       │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │       │                   <h4 className="text-xl font-bold">{taskCount}</h4>
│   │   │       │                   <p className="text-sm text-gray-600">Total Tasks</p>
│   │   │       │                 </div>
│   │   │       │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │       │                   <h4 className="text-xl font-bold">{completedTasks}</h4>
│   │   │       │                   <p className="text-sm text-gray-600">Completed Tasks</p>
│   │   │       │                 </div>
│   │   │       │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │       │                   <h4 className="text-xl font-bold">{inProgressTasks}</h4>
│   │   │       │                   <p className="text-sm text-gray-600">Tasks In Progress</p>
│   │   │       │                 </div>
│   │   │       │                 <div className="p-4 bg-gray-100 rounded-md">
│   │   │       │                   <h4 className="text-xl font-bold">{highPriorityTasks}</h4>
│   │   │       │                   <p className="text-sm text-gray-600">High Priority Tasks</p>
│   │   │       │                 </div>
│   │   │       │               </div>
│   │   │       │             </CardContent>
│   │   │       │           </Card>
│   │   │       │         );
│   │   │       │       }
│   │   │       ├── TaskList.tsx
│   │   │       │       // src/components/dashboard/DashboardLayout/TaskList.tsx
│   │   │       │       import React from 'react';
│   │   │       │       import type { Task, Project } from '@/types';
│   │   │       │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       │       import { Objective } from '@/types';
│   │   │       │       
│   │   │       │       
│   │   │       │       // src/components/dashboard/DashboardLayout/TaskList.tsx
│   │   │       │       interface TaskListProps {
│   │   │       │         tasks: Task[];
│   │   │       │         projects: Project[];
│   │   │       │         objectives: Objective[];
│   │   │       │         onRefresh: () => void;
│   │   │       │       }
│   │   │       │       
│   │   │       │       export function TaskList({ tasks, projects }: TaskListProps) {
│   │   │       │         const getProjectName = (projectId: string) => {
│   │   │       │           const project = projects.find((p) => p.id === projectId);
│   │   │       │           return project ? project.name : 'Unknown Project';
│   │   │       │         };
│   │   │       │       
│   │   │       │         return (
│   │   │       │           <Card>
│   │   │       │             <CardHeader>
│   │   │       │               <CardTitle>Tasks</CardTitle>
│   │   │       │             </CardHeader>
│   │   │       │             <CardContent>
│   │   │       │               {tasks.length === 0 ? (
│   │   │       │                 <p>No tasks available.</p>
│   │   │       │               ) : (
│   │   │       │                 <ul className="space-y-2">
│   │   │       │                   {tasks.map((task) => (
│   │   │       │                     <li key={task.id} className="p-2 border rounded-md">
│   │   │       │                       <h3 className="text-lg font-semibold">{task.content}</h3>
│   │   │       │                       <p className="text-sm text-gray-600">{task.description}</p>
│   │   │       │                       <p className="text-sm text-gray-500">
│   │   │       │                         Status: {task.status} | Priority: {task.priority}
│   │   │       │                       </p>
│   │   │       │                       <p className="text-sm text-gray-500">
│   │   │       │                         Project: {getProjectName(task.projectId)}
│   │   │       │                       </p>
│   │   │       │                       <p className="text-sm text-gray-500">
│   │   │       │                         Estimated Hours: {task.estimatedHours || 'N/A'} | Actual Hours: {task.actualHours || 'N/A'}
│   │   │       │                       </p>
│   │   │       │                       <p className="text-sm text-gray-500">
│   │   │       │                         Start Date: {task.startDate ? new Date(task.startDate).toLocaleDateString() : 'N/A'} | Due Date: {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'N/A'}
│   │   │       │                       </p>
│   │   │       │                     </li>
│   │   │       │                   ))}
│   │   │       │                 </ul>
│   │   │       │               )}
│   │   │       │             </CardContent>
│   │   │       │           </Card>
│   │   │       │         );
│   │   │       │       }
│   │   │       ├── TodoListSummary.tsx
│   │   │       │       // src/components/dashboard/DashboardLayout/TodoListSummary.tsx
│   │   │       │       import React from 'react';
│   │   │       │       import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui';
│   │   │       │       import type { TodoList } from '@/types';
│   │   │       │       
│   │   │       │       interface TodoListSummaryProps {
│   │   │       │         todoLists: TodoList[];
│   │   │       │       }
│   │   │       │       
│   │   │       │       export function TodoListSummary({ todoLists }: TodoListSummaryProps) {
│   │   │       │         return (
│   │   │       │           <Card>
│   │   │       │             <CardHeader>
│   │   │       │               <CardTitle>Todo Lists</CardTitle>
│   │   │       │             </CardHeader>
│   │   │       │             <CardContent>
│   │   │       │               <div className="space-y-3">
│   │   │       │                 {todoLists.map(list => (
│   │   │       │                   <div
│   │   │       │                     key={list.id}
│   │   │       │                     className="flex justify-between items-center p-3 bg-gray-800/50 rounded-lg hover:bg-gray-800/70 transition-colors"
│   │   │       │                   >
│   │   │       │                     <span>{list.name}</span>
│   │   │       │                     <span className="text-sm text-gray-400">
│   │   │       │                       {list.tasks?.length || 0} tasks
│   │   │       │                     </span>
│   │   │       │                   </div>
│   │   │       │                 ))}
│   │   │       │                 {todoLists.length === 0 && (
│   │   │       │                   <div className="text-center text-gray-500 py-4">
│   │   │       │                     No todo lists available
│   │   │       │                   </div>
│   │   │       │                 )}
│   │   │       │               </div>
│   │   │       │             </CardContent>
│   │   │       │           </Card>
│   │   │       │         );
│   │   │       │       }
│   │   │       └── index.ts
│   │   │               // src/components/dashboard/DashboardLayout/index.ts
│   │   │               export { DashboardLayout } from './DashboardLayout';
│   │   │               export type { DashboardLayoutProps } from './DashboardLayout';
│   │   │               export * from './ProjectStats';
│   │   │               export * from './TaskList';
│   │   │               export * from './ProjectList';
│   │   │               export * from './TodoListSummary';
│   │   │               
│   │   ├── dialogs/
│   │   │   ├── base/
│   │   │   │   ├── BaseDialog.tsx
│   │   │   │   │       // src/components/dialogs/base/BaseDialog.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import {
│   │   │   │   │         Dialog,
│   │   │   │   │         DialogContent,
│   │   │   │   │         DialogDescription,
│   │   │   │   │         DialogHeader,
│   │   │   │   │         DialogTitle,
│   │   │   │   │         DialogTrigger,
│   │   │   │   │       } from "@/components/ui/dialog";
│   │   │   │   │       import type { BaseDialogProps } from '@/types/dialogs';
│   │   │   │   │       import { cn } from '@/lib/utils';
│   │   │   │   │       
│   │   │   │   │       export function BaseDialog({
│   │   │   │   │         title,
│   │   │   │   │         description,
│   │   │   │   │         trigger,
│   │   │   │   │         isOpen,
│   │   │   │   │         onOpenChange,
│   │   │   │   │         children,
│   │   │   │   │         className,
│   │   │   │   │       }: BaseDialogProps) {
│   │   │   │   │         return (
│   │   │   │   │           <Dialog open={isOpen} onOpenChange={onOpenChange}>
│   │   │   │   │             <DialogTrigger asChild>
│   │   │   │   │               {trigger}
│   │   │   │   │             </DialogTrigger>
│   │   │   │   │             <DialogContent className={cn("sm:max-w-[425px]", className)}>
│   │   │   │   │               <DialogHeader>
│   │   │   │   │                 <DialogTitle>{title}</DialogTitle>
│   │   │   │   │                 {description && (
│   │   │   │   │                   <DialogDescription>{description}</DialogDescription>
│   │   │   │   │                 )}
│   │   │   │   │               </DialogHeader>
│   │   │   │   │               {children}
│   │   │   │   │             </DialogContent>
│   │   │   │   │           </Dialog>
│   │   │   │   │         );
│   │   │   │   │       }
│   │   │   │   ├── ConfirmDialog.tsx
│   │   │   │   │       // src/components/dialogs/base/ConfirmDialog.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import { Button } from '@/components/ui/button';
│   │   │   │   │       import type { ConfirmDialogProps } from '@/types/dialogs';
│   │   │   │   │       import { BaseDialog } from './BaseDialog';
│   │   │   │   │       
│   │   │   │   │       export function ConfirmDialog({
│   │   │   │   │         title,
│   │   │   │   │         description,
│   │   │   │   │         trigger,
│   │   │   │   │         confirmLabel = 'Confirm',
│   │   │   │   │         cancelLabel = 'Cancel',
│   │   │   │   │         onConfirm,
│   │   │   │   │         variant = 'default',
│   │   │   │   │         isOpen,
│   │   │   │   │         onOpenChange,
│   │   │   │   │       }: ConfirmDialogProps) {
│   │   │   │   │         const [isSubmitting, setIsSubmitting] = React.useState(false);
│   │   │   │   │       
│   │   │   │   │         const handleConfirm = async () => {
│   │   │   │   │           setIsSubmitting(true);
│   │   │   │   │           try {
│   │   │   │   │             await onConfirm();
│   │   │   │   │             onOpenChange?.(false);
│   │   │   │   │           } finally {
│   │   │   │   │             setIsSubmitting(false);
│   │   │   │   │           }
│   │   │   │   │         };
│   │   │   │   │       
│   │   │   │   │         return (
│   │   │   │   │           <BaseDialog
│   │   │   │   │             title={title}
│   │   │   │   │             description={description}
│   │   │   │   │             trigger={trigger}
│   │   │   │   │             isOpen={isOpen}
│   │   │   │   │             onOpenChange={onOpenChange}
│   │   │   │   │           >
│   │   │   │   │             <div className="mt-4 flex justify-end gap-3">
│   │   │   │   │               <Button
│   │   │   │   │                 variant="outline"
│   │   │   │   │                 onClick={() => onOpenChange?.(false)}
│   │   │   │   │                 disabled={isSubmitting}
│   │   │   │   │               >
│   │   │   │   │                 {cancelLabel}
│   │   │   │   │               </Button>
│   │   │   │   │               <Button
│   │   │   │   │                 variant={variant}
│   │   │   │   │                 onClick={handleConfirm}
│   │   │   │   │                 disabled={isSubmitting}
│   │   │   │   │               >
│   │   │   │   │                 {isSubmitting ? 'Processing...' : confirmLabel}
│   │   │   │   │               </Button>
│   │   │   │   │             </div>
│   │   │   │   │           </BaseDialog>
│   │   │   │   │         );
│   │   │   │   │       }
│   │   │   │   ├── FormDialog.tsx
│   │   │   │   │       // src/components/dialogs/base/FormDialog.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import { Button } from '@/components/ui/button';
│   │   │   │   │       import type { FormDialogProps } from '@/types/dialogs';
│   │   │   │   │       import { BaseDialog } from './BaseDialog';
│   │   │   │   │       
│   │   │   │   │       export function FormDialog<T extends Record<string, any>>({
│   │   │   │   │         title,
│   │   │   │   │         description,
│   │   │   │   │         trigger,
│   │   │   │   │         form,
│   │   │   │   │         submitLabel = 'Save',
│   │   │   │   │         cancelLabel = 'Cancel',
│   │   │   │   │         isSubmitting,
│   │   │   │   │         onSubmit,
│   │   │   │   │         isOpen,
│   │   │   │   │         onOpenChange,
│   │   │   │   │         children,
│   │   │   │   │       }: FormDialogProps<T>) {
│   │   │   │   │         const handleSubmit = async (e: React.FormEvent) => {
│   │   │   │   │           e.preventDefault();
│   │   │   │   │           await onSubmit(form.values);
│   │   │   │   │         };
│   │   │   │   │       
│   │   │   │   │         return (
│   │   │   │   │           <BaseDialog
│   │   │   │   │             title={title}
│   │   │   │   │             description={description}
│   │   │   │   │             trigger={trigger}
│   │   │   │   │             isOpen={isOpen}
│   │   │   │   │             onOpenChange={onOpenChange}
│   │   │   │   │           >
│   │   │   │   │             <form onSubmit={handleSubmit} className="space-y-4">
│   │   │   │   │               {children}
│   │   │   │   │               <div className="mt-4 flex justify-end gap-3">
│   │   │   │   │                 <Button
│   │   │   │   │                   type="button"
│   │   │   │   │                   variant="outline"
│   │   │   │   │                   onClick={() => onOpenChange?.(false)}
│   │   │   │   │                   disabled={isSubmitting}
│   │   │   │   │                 >
│   │   │   │   │                   {cancelLabel}
│   │   │   │   │                 </Button>
│   │   │   │   │                 <Button
│   │   │   │   │                   type="submit"
│   │   │   │   │                   disabled={isSubmitting}
│   │   │   │   │                 >
│   │   │   │   │                   {isSubmitting ? 'Saving...' : submitLabel}
│   │   │   │   │                 </Button>
│   │   │   │   │               </div>
│   │   │   │   │             </form>
│   │   │   │   │           </BaseDialog>
│   │   │   │   │         );
│   │   │   │   │       }
│   │   │   │   └── index.ts
│   │   │   │           export * from './BaseDialog';
│   │   │   │           export * from './ConfirmDialog';
│   │   │   │           export * from './FormDialog';
│   │   │   ├── forms/
│   │   │   │   ├── QuickAdd.tsx
│   │   │   │   │       // src/components/dialogs/forms/QuickAdd.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import { FormDialog } from '@/components/dialogs/base/FormDialog';
│   │   │   │   │       import { Button } from '@/components/ui/button';
│   │   │   │   │       import { FormField } from '@/components/forms/fields';
│   │   │   │   │       import type { FieldConfig } from '@/types/forms/fields';
│   │   │   │   │       import { useForm } from '@/hooks/forms/useForm';
│   │   │   │   │       
│   │   │   │   │       interface QuickAddButtonProps {
│   │   │   │   │         onClick: () => void;
│   │   │   │   │         icon: React.ReactNode;
│   │   │   │   │         label: string;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       const QuickAddButton = ({ onClick, icon, label }: QuickAddButtonProps) => (
│   │   │   │   │         <Button
│   │   │   │   │           variant="outline"
│   │   │   │   │           className="w-full h-24 flex flex-col items-center justify-center gap-2 bg-neutral-800/50 hover:bg-neutral-800"
│   │   │   │   │           onClick={onClick}
│   │   │   │   │         >
│   │   │   │   │           {icon}
│   │   │   │   │           <span>{label}</span>
│   │   │   │   │         </Button>
│   │   │   │   │       );
│   │   │   │   │       
│   │   │   │   │       interface QuickAddProps<T> {
│   │   │   │   │         title: string;
│   │   │   │   │         description: string;
│   │   │   │   │         icon: React.ReactNode;
│   │   │   │   │         label: string;
│   │   │   │   │         fields: FieldConfig[];
│   │   │   │   │         initialValues: T;
│   │   │   │   │         isOpen: boolean;
│   │   │   │   │         onOpenChange: (open: boolean) => void;
│   │   │   │   │         onSubmit: (values: T) => Promise<void>;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       export function QuickAdd<T extends Record<string, any>>({
│   │   │   │   │         title,
│   │   │   │   │         description,
│   │   │   │   │         icon,
│   │   │   │   │         label,
│   │   │   │   │         fields,
│   │   │   │   │         initialValues,
│   │   │   │   │         isOpen,
│   │   │   │   │         onOpenChange,
│   │   │   │   │         onSubmit,
│   │   │   │   │       }: QuickAddProps<T>) {
│   │   │   │   │         const form = useForm<T>({
│   │   │   │   │           initialValues,
│   │   │   │   │           onSubmit: async (values) => {
│   │   │   │   │             await onSubmit(values);
│   │   │   │   │             onOpenChange(false);
│   │   │   │   │           },
│   │   │   │   │         });
│   │   │   │   │       
│   │   │   │   │         return (
│   │   │   │   │           <FormDialog
│   │   │   │   │             title={title}
│   │   │   │   │             description={description}
│   │   │   │   │             trigger={
│   │   │   │   │               <QuickAddButton 
│   │   │   │   │                 onClick={() => onOpenChange(true)}
│   │   │   │   │                 icon={icon}
│   │   │   │   │                 label={label}
│   │   │   │   │               />
│   │   │   │   │             }
│   │   │   │   │             form={form}
│   │   │   │   │             isOpen={isOpen}
│   │   │   │   │             onOpenChange={onOpenChange}
│   │   │   │   │             onSubmit={form.handleSubmit}
│   │   │   │   │             submitLabel={`Create ${label.split(' ')[1]}`} // "Add Project" -> "Create Project"
│   │   │   │   │           >
│   │   │   │   │             <div className="space-y-4 py-4">
│   │   │   │   │               {fields.map((field) => (
│   │   │   │   │                 <FormField
│   │   │   │   │                   key={field.name}
│   │   │   │   │                   field={field}
│   │   │   │   │                   value={form.values[field.name]}
│   │   │   │   │                   onChange={form.setFieldValue}
│   │   │   │   │                   onBlur={form.handleBlur}
│   │   │   │   │                   error={form.errors[field.name]}
│   │   │   │   │                   touched={form.touched[field.name]}
│   │   │   │   │                 />
│   │   │   │   │               ))}
│   │   │   │   │             </div>
│   │   │   │   │           </FormDialog>
│   │   │   │   │         );
│   │   │   │   │       }
│   │   │   │   ├── QuickAddDialogs.tsx
│   │   │   │   │       // src/components/dialogs/forms/QuickAddDialogs.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import { QuickAdd } from './QuickAdd';
│   │   │   │   │       import { ProjectFields, ObjectiveFields, TaskFields, TimeEntryFields } from './QuickAddFields';
│   │   │   │   │       import { Folder, Target, CheckSquare, Clock } from 'lucide-react';
│   │   │   │   │       import type { 
│   │   │   │   │         ProjectFormData, 
│   │   │   │   │         ObjectiveFormData, 
│   │   │   │   │         TaskFormData, 
│   │   │   │   │         TimeEntryFormData 
│   │   │   │   │       } from '@/types';
│   │   │   │   │       import { PROJECT_STATUS, TASK_STATUS } from '@/constants';
│   │   │   │   │       
│   │   │   │   │       interface QuickAddDialogsProps {
│   │   │   │   │         projects: any[];
│   │   │   │   │         objectives: any[];
│   │   │   │   │         tasks: any[];
│   │   │   │   │         onProjectAdd: (data: ProjectFormData) => Promise<void>;
│   │   │   │   │         onObjectiveAdd: (data: ObjectiveFormData) => Promise<void>;
│   │   │   │   │         onTaskAdd: (data: TaskFormData) => Promise<void>;
│   │   │   │   │         onTimeEntryAdd: (data: TimeEntryFormData) => Promise<void>;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       export function QuickAddDialogs({
│   │   │   │   │         projects,
│   │   │   │   │         objectives,
│   │   │   │   │         tasks,
│   │   │   │   │         onProjectAdd,
│   │   │   │   │         onObjectiveAdd,
│   │   │   │   │         onTaskAdd,
│   │   │   │   │         onTimeEntryAdd
│   │   │   │   │       }: QuickAddDialogsProps) {
│   │   │   │   │         const [activeDialog, setActiveDialog] = React.useState<string | null>(null);
│   │   │   │   │       
│   │   │   │   │         // Initial values for forms
│   │   │   │   │         const initialValues = {
│   │   │   │   │           project: {
│   │   │   │   │             name: '',
│   │   │   │   │             description: '',
│   │   │   │   │             status: PROJECT_STATUS.NOT_STARTED,
│   │   │   │   │             startDate: '',
│   │   │   │   │             dueDate: '',
│   │   │   │   │             estimatedHours: ''
│   │   │   │   │           },
│   │   │   │   │           objective: {
│   │   │   │   │             name: '',
│   │   │   │   │             description: '',
│   │   │   │   │             projectId: '',
│   │   │   │   │             status: PROJECT_STATUS.NOT_STARTED,
│   │   │   │   │             startDate: '',
│   │   │   │   │             dueDate: '',
│   │   │   │   │             estimatedHours: ''
│   │   │   │   │           },
│   │   │   │   │           task: {
│   │   │   │   │             content: '',
│   │   │   │   │             description: '',
│   │   │   │   │             status: TASK_STATUS.TODO,
│   │   │   │   │             priority: 'medium',
│   │   │   │   │             projectId: '',
│   │   │   │   │             objectiveId: '',
│   │   │   │   │             startDate: '',
│   │   │   │   │             dueDate: '',
│   │   │   │   │             estimatedHours: '',
│   │   │   │   │             actualHours: ''
│   │   │   │   │           },
│   │   │   │   │           timeEntry: {
│   │   │   │   │             taskId: '',
│   │   │   │   │             startTime: '',
│   │   │   │   │             endTime: '',
│   │   │   │   │             description: ''
│   │   │   │   │           }
│   │   │   │   │         };
│   │   │   │   │       
│   │   │   │   │         return (
│   │   │   │   │           <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
│   │   │   │   │             <QuickAdd
│   │   │   │   │               title="Add New Project"
│   │   │   │   │               description="Create a new project to organize your work."
│   │   │   │   │               icon={<Folder className="h-6 w-6" />}
│   │   │   │   │               label="Add Project"
│   │   │   │   │               fields={ProjectFields}
│   │   │   │   │               initialValues={initialValues.project}
│   │   │   │   │               isOpen={activeDialog === 'project'}
│   │   │   │   │               onOpenChange={(open) => setActiveDialog(open ? 'project' : null)}
│   │   │   │   │               onSubmit={onProjectAdd}
│   │   │   │   │             />
│   │   │   │   │       
│   │   │   │   │             <QuickAdd
│   │   │   │   │               title="Add New Objective"
│   │   │   │   │               description="Create a new objective for your project."
│   │   │   │   │               icon={<Target className="h-6 w-6" />}
│   │   │   │   │               label="Add Objective"
│   │   │   │   │               fields={ObjectiveFields(projects)}
│   │   │   │   │               initialValues={initialValues.objective}
│   │   │   │   │               isOpen={activeDialog === 'objective'}
│   │   │   │   │               onOpenChange={(open) => setActiveDialog(open ? 'objective' : null)}
│   │   │   │   │               onSubmit={onObjectiveAdd}
│   │   │   │   │             />
│   │   │   │   │       
│   │   │   │   │             <QuickAdd
│   │   │   │   │               title="Add New Task"
│   │   │   │   │               description="Create a new task for your project or objective."
│   │   │   │   │               icon={<CheckSquare className="h-6 w-6" />}
│   │   │   │   │               label="Add Task"
│   │   │   │   │               fields={TaskFields(projects, objectives)}
│   │   │   │   │               initialValues={initialValues.task}
│   │   │   │   │               isOpen={activeDialog === 'task'}
│   │   │   │   │               onOpenChange={(open) => setActiveDialog(open ? 'task' : null)}
│   │   │   │   │               onSubmit={onTaskAdd}
│   │   │   │   │             />
│   │   │   │   │       
│   │   │   │   │             <QuickAdd
│   │   │   │   │               title="Add Time Entry"
│   │   │   │   │               description="Track time spent on a task."
│   │   │   │   │               icon={<Clock className="h-6 w-6" />}
│   │   │   │   │               label="Add Time"
│   │   │   │   │               fields={TimeEntryFields(tasks)}
│   │   │   │   │               initialValues={initialValues.timeEntry}
│   │   │   │   │               isOpen={activeDialog === 'time'}
│   │   │   │   │               onOpenChange={(open) => setActiveDialog(open ? 'time' : null)}
│   │   │   │   │               onSubmit={onTimeEntryAdd}
│   │   │   │   │             />
│   │   │   │   │           </div>
│   │   │   │   │         );
│   │   │   │   │       }
│   │   │   │   ├── QuickAddFields.tsx
│   │   │   │   │       // src/components/dialogs/forms/QuickAddFields.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import { FormField } from '@/components/forms/fields';
│   │   │   │   │       import type { FieldConfig } from '@/types/forms/fields';
│   │   │   │   │       
│   │   │   │   │       export const ProjectFields: FieldConfig[] = [
│   │   │   │   │         {
│   │   │   │   │           name: 'name',
│   │   │   │   │           type: 'text',
│   │   │   │   │           label: 'Project Name',
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'description',
│   │   │   │   │           type: 'textarea',
│   │   │   │   │           label: 'Description',
│   │   │   │   │           rows: 3,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'status',
│   │   │   │   │           type: 'select',
│   │   │   │   │           label: 'Status',
│   │   │   │   │           options: [
│   │   │   │   │             { value: 'not-started', label: 'Not Started' },
│   │   │   │   │             { value: 'active', label: 'Active' },
│   │   │   │   │             { value: 'completed', label: 'Completed' },
│   │   │   │   │           ],
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'startDate',
│   │   │   │   │           type: 'date',
│   │   │   │   │           label: 'Start Date',
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'dueDate',
│   │   │   │   │           type: 'date',
│   │   │   │   │           label: 'Due Date',
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'estimatedHours',
│   │   │   │   │           type: 'number',
│   │   │   │   │           label: 'Estimated Hours',
│   │   │   │   │           min: 0,
│   │   │   │   │           step: 0.5,
│   │   │   │   │         },
│   │   │   │   │       ];
│   │   │   │   │       
│   │   │   │   │       export const ObjectiveFields = (projects: any[]): FieldConfig[] => [
│   │   │   │   │         {
│   │   │   │   │           name: 'projectId',
│   │   │   │   │           type: 'select',
│   │   │   │   │           label: 'Project',
│   │   │   │   │           options: projects.map(p => ({ value: p.id, label: p.name })),
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'name',
│   │   │   │   │           type: 'text',
│   │   │   │   │           label: 'Objective Name',
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'description',
│   │   │   │   │           type: 'textarea',
│   │   │   │   │           label: 'Description',
│   │   │   │   │           rows: 3,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'status',
│   │   │   │   │           type: 'select',
│   │   │   │   │           label: 'Status',
│   │   │   │   │           options: [
│   │   │   │   │             { value: 'not-started', label: 'Not Started' },
│   │   │   │   │             { value: 'active', label: 'Active' },
│   │   │   │   │             { value: 'completed', label: 'Completed' },
│   │   │   │   │           ],
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'startDate',
│   │   │   │   │           type: 'date',
│   │   │   │   │           label: 'Start Date',
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'dueDate',
│   │   │   │   │           type: 'date',
│   │   │   │   │           label: 'Due Date',
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'estimatedHours',
│   │   │   │   │           type: 'number',
│   │   │   │   │           label: 'Estimated Hours',
│   │   │   │   │           min: 0,
│   │   │   │   │           step: 0.5,
│   │   │   │   │         },
│   │   │   │   │       ];
│   │   │   │   │       
│   │   │   │   │       export const TaskFields = (projects: any[], objectives: any[]): FieldConfig[] => [
│   │   │   │   │         {
│   │   │   │   │           name: 'content',
│   │   │   │   │           type: 'text',
│   │   │   │   │           label: 'Task Content',
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'description',
│   │   │   │   │           type: 'textarea',
│   │   │   │   │           label: 'Description',
│   │   │   │   │           rows: 3,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'projectId',
│   │   │   │   │           type: 'select',
│   │   │   │   │           label: 'Project',
│   │   │   │   │           options: projects.map(p => ({ value: p.id, label: p.name })),
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'objectiveId',
│   │   │   │   │           type: 'select',
│   │   │   │   │           label: 'Objective',
│   │   │   │   │           options: objectives.map(o => ({ value: o.id, label: o.name })),
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'status',
│   │   │   │   │           type: 'select',
│   │   │   │   │           label: 'Status',
│   │   │   │   │           options: [
│   │   │   │   │             { value: 'todo', label: 'Todo' },
│   │   │   │   │             { value: 'in-progress', label: 'In Progress' },
│   │   │   │   │             { value: 'done', label: 'Done' },
│   │   │   │   │           ],
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'priority',
│   │   │   │   │           type: 'select',
│   │   │   │   │           label: 'Priority',
│   │   │   │   │           options: [
│   │   │   │   │             { value: 'low', label: 'Low' },
│   │   │   │   │             { value: 'medium', label: 'Medium' },
│   │   │   │   │             { value: 'high', label: 'High' },
│   │   │   │   │           ],
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'startDate',
│   │   │   │   │           type: 'date',
│   │   │   │   │           label: 'Start Date',
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'dueDate',
│   │   │   │   │           type: 'date',
│   │   │   │   │           label: 'Due Date',
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'estimatedHours',
│   │   │   │   │           type: 'number',
│   │   │   │   │           label: 'Estimated Hours',
│   │   │   │   │           min: 0,
│   │   │   │   │           step: 0.5,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'actualHours',
│   │   │   │   │           type: 'number',
│   │   │   │   │           label: 'Actual Hours',
│   │   │   │   │           min: 0,
│   │   │   │   │           step: 0.5,
│   │   │   │   │         },
│   │   │   │   │       ];
│   │   │   │   │       
│   │   │   │   │       export const TimeEntryFields = (tasks: any[]): FieldConfig[] => [
│   │   │   │   │         {
│   │   │   │   │           name: 'taskId',
│   │   │   │   │           type: 'select',
│   │   │   │   │           label: 'Task',
│   │   │   │   │           options: tasks.map(t => ({ value: t.id, label: t.content })),
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'startTime',
│   │   │   │   │           type: 'datetime-local',
│   │   │   │   │           label: 'Start Time',
│   │   │   │   │           required: true,
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'endTime',
│   │   │   │   │           type: 'datetime-local',
│   │   │   │   │           label: 'End Time',
│   │   │   │   │         },
│   │   │   │   │         {
│   │   │   │   │           name: 'description',
│   │   │   │   │           type: 'textarea',
│   │   │   │   │           label: 'Description',
│   │   │   │   │           rows: 3,
│   │   │   │   │         },
│   │   │   │   │       ];
│   │   │   │   ├── QuickAddSelection.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import { Button } from '@/components/ui/button';
│   │   │   │   │       import { Dialog, DialogContent, DialogTitle, DialogHeader } from '@/components/ui/dialog';
│   │   │   │   │       import { Input } from '@/components/ui/input';
│   │   │   │   │       import { Textarea } from '@/components/ui/textarea';
│   │   │   │   │       import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
│   │   │   │   │       import { FolderPlus, Target, ListTodo, Clock } from 'lucide-react';
│   │   │   │   │       
│   │   │   │   │       const QuickAddButton = ({ 
│   │   │   │   │         label, 
│   │   │   │   │         icon: Icon, 
│   │   │   │   │         onClick 
│   │   │   │   │       }: { 
│   │   │   │   │         label: string;
│   │   │   │   │         icon: React.ElementType;
│   │   │   │   │         onClick: () => void;
│   │   │   │   │       }) => (
│   │   │   │   │         <Button
│   │   │   │   │           variant="outline"
│   │   │   │   │           className="h-24 flex flex-col items-center justify-center gap-2 bg-zinc-900 hover:bg-zinc-800 border-zinc-800 text-white"
│   │   │   │   │           onClick={onClick}
│   │   │   │   │         >
│   │   │   │   │           <Icon className="h-6 w-6 text-zinc-300" />
│   │   │   │   │           <span className="text-sm">{label}</span>
│   │   │   │   │         </Button>
│   │   │   │   │       );
│   │   │   │   │       
│   │   │   │   │       const QuickAddDialog = ({
│   │   │   │   │         isOpen,
│   │   │   │   │         onClose,
│   │   │   │   │         title,
│   │   │   │   │         children
│   │   │   │   │       }: {
│   │   │   │   │         isOpen: boolean;
│   │   │   │   │         onClose: () => void;
│   │   │   │   │         title: string;
│   │   │   │   │         children: React.ReactNode;
│   │   │   │   │       }) => (
│   │   │   │   │         <Dialog open={isOpen} onOpenChange={onClose}>
│   │   │   │   │           <DialogContent className="bg-zinc-900 border-zinc-800">
│   │   │   │   │             <DialogHeader>
│   │   │   │   │               <DialogTitle className="text-white">{title}</DialogTitle>
│   │   │   │   │             </DialogHeader>
│   │   │   │   │             {children}
│   │   │   │   │           </DialogContent>
│   │   │   │   │         </Dialog>
│   │   │   │   │       );
│   │   │   │   │       
│   │   │   │   │       export function QuickAddSection() {
│   │   │   │   │         const [activeDialog, setActiveDialog] = React.useState<string | null>(null);
│   │   │   │   │       
│   │   │   │   │         const closeDialog = () => setActiveDialog(null);
│   │   │   │   │       
│   │   │   │   │         return (
│   │   │   │   │           <div className="p-4 bg-black">
│   │   │   │   │             <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
│   │   │   │   │               <QuickAddButton
│   │   │   │   │                 label="Add Project"
│   │   │   │   │                 icon={FolderPlus}
│   │   │   │   │                 onClick={() => setActiveDialog('project')}
│   │   │   │   │               />
│   │   │   │   │               <QuickAddButton
│   │   │   │   │                 label="Add Objective"
│   │   │   │   │                 icon={Target}
│   │   │   │   │                 onClick={() => setActiveDialog('objective')}
│   │   │   │   │               />
│   │   │   │   │               <QuickAddButton
│   │   │   │   │                 label="Add Task"
│   │   │   │   │                 icon={ListTodo}
│   │   │   │   │                 onClick={() => setActiveDialog('task')}
│   │   │   │   │               />
│   │   │   │   │               <QuickAddButton
│   │   │   │   │                 label="Add Time Entry"
│   │   │   │   │                 icon={Clock}
│   │   │   │   │                 onClick={() => setActiveDialog('time')}
│   │   │   │   │               />
│   │   │   │   │             </div>
│   │   │   │   │       
│   │   │   │   │             {/* Project Dialog */}
│   │   │   │   │             <QuickAddDialog
│   │   │   │   │               isOpen={activeDialog === 'project'}
│   │   │   │   │               onClose={closeDialog}
│   │   │   │   │               title="Add New Project"
│   │   │   │   │             >
│   │   │   │   │               <form className="space-y-4 pt-4">
│   │   │   │   │                 <div className="space-y-2">
│   │   │   │   │                   <label className="text-sm font-medium text-zinc-300">
│   │   │   │   │                     Project Name
│   │   │   │   │                   </label>
│   │   │   │   │                   <Input 
│   │   │   │   │                     className="bg-zinc-800 border-zinc-700 text-white placeholder:text-zinc-500"
│   │   │   │   │                     placeholder="Enter project name"
│   │   │   │   │                   />
│   │   │   │   │                 </div>
│   │   │   │   │                 
│   │   │   │   │                 <div className="space-y-2">
│   │   │   │   │                   <label className="text-sm font-medium text-zinc-300">
│   │   │   │   │                     Description
│   │   │   │   │                   </label>
│   │   │   │   │                   <Textarea 
│   │   │   │   │                     className="bg-zinc-800 border-zinc-700 text-white placeholder:text-zinc-500"
│   │   │   │   │                     placeholder="Enter project description"
│   │   │   │   │                   />
│   │   │   │   │                 </div>
│   │   │   │   │       
│   │   │   │   │                 <div className="space-y-2">
│   │   │   │   │                   <label className="text-sm font-medium text-zinc-300">
│   │   │   │   │                     Status
│   │   │   │   │                   </label>
│   │   │   │   │                   <Select>
│   │   │   │   │                     <SelectTrigger className="bg-zinc-800 border-zinc-700 text-white">
│   │   │   │   │                       <SelectValue placeholder="Select status" />
│   │   │   │   │                     </SelectTrigger>
│   │   │   │   │                     <SelectContent className="bg-zinc-800 border-zinc-700">
│   │   │   │   │                       <SelectItem value="not-started" className="text-white">Not Started</SelectItem>
│   │   │   │   │                       <SelectItem value="in-progress" className="text-white">In Progress</SelectItem>
│   │   │   │   │                       <SelectItem value="completed" className="text-white">Completed</SelectItem>
│   │   │   │   │                     </SelectContent>
│   │   │   │   │                   </Select>
│   │   │   │   │                 </div>
│   │   │   │   │       
│   │   │   │   │                 <div className="pt-4 flex justify-end gap-3">
│   │   │   │   │                   <Button
│   │   │   │   │                     variant="outline"
│   │   │   │   │                     onClick={closeDialog}
│   │   │   │   │                     className="border-zinc-700 text-zinc-300 hover:bg-zinc-800"
│   │   │   │   │                   >
│   │   │   │   │                     Cancel
│   │   │   │   │                   </Button>
│   │   │   │   │                   <Button className="bg-blue-600 hover:bg-blue-700 text-white">
│   │   │   │   │                     Create Project
│   │   │   │   │                   </Button>
│   │   │   │   │                 </div>
│   │   │   │   │               </form>
│   │   │   │   │             </QuickAddDialog>
│   │   │   │   │       
│   │   │   │   │             {/* Similar dialogs for Objective, Task, and Time Entry would follow */}
│   │   │   │   │           </div>
│   │   │   │   │         );
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       export default QuickAddSection;
│   │   │   │   └── index.ts
│   │   │   │           export * from './QuickAddFields';
│   │   │   │           export * from './QuickAdd';
│   │   │   │           export * from './QuickAddDialogs';
│   │   │   │           export * from './QuickAddSelection';
│   │   │   └── index.ts
│   │   │           export * from './forms/QuickAddDialogs';
│   │   │           export * from './forms/QuickAddFields';
│   │   │           export * from './forms/QuickAdd';
│   │   │           export * from './base'
│   │   ├── forms/
│   │   │   ├── BaseForm.tsx
│   │   │   │       // src/components/forms/BaseForm.tsx
│   │   │   │       import React from 'react';
│   │   │   │       import {
│   │   │   │         Dialog,
│   │   │   │         DialogContent,
│   │   │   │         DialogDescription,
│   │   │   │         DialogHeader,
│   │   │   │         DialogTitle,
│   │   │   │         DialogTrigger,
│   │   │   │       } from "@/components/ui/dialog";
│   │   │   │       import { Button } from "@/components/ui/button";
│   │   │   │       import { PlusCircle } from 'lucide-react';
│   │   │   │       import type { FieldConfig } from '@/types/forms/fields';
│   │   │   │       import { FormField } from './fields';
│   │   │   │       
│   │   │   │       interface BaseFormProps<T> {
│   │   │   │         title: string;
│   │   │   │         description?: string;
│   │   │   │         triggerButton: {
│   │   │   │           label: string;
│   │   │   │           icon?: React.ReactNode;
│   │   │   │         };
│   │   │   │         fields: FieldConfig[];
│   │   │   │         onSubmit: (data: T) => Promise<void>;
│   │   │   │         defaultValues?: Partial<T>;
│   │   │   │         submitLabel?: string;
│   │   │   │       }
│   │   │   │       
│   │   │   │       export function BaseForm<T extends Record<string, any>>({
│   │   │   │         title,
│   │   │   │         description,
│   │   │   │         triggerButton,
│   │   │   │         fields,
│   │   │   │         onSubmit,
│   │   │   │         defaultValues = {},
│   │   │   │         submitLabel = 'Save'
│   │   │   │       }: BaseFormProps<T>) {
│   │   │   │         const [open, setOpen] = React.useState(false);
│   │   │   │         const [formData, setFormData] = React.useState<Partial<T>>(defaultValues);
│   │   │   │         const [errors, setErrors] = React.useState<Record<string, string>>({});
│   │   │   │         const [isSubmitting, setIsSubmitting] = React.useState(false);
│   │   │   │       
│   │   │   │         const handleFieldChange = (name: string, value: any) => {
│   │   │   │           setFormData(prev => ({
│   │   │   │             ...prev,
│   │   │   │             [name]: value
│   │   │   │           }));
│   │   │   │           if (errors[name]) {
│   │   │   │             setErrors(prev => {
│   │   │   │               const { [name]: _, ...rest } = prev;
│   │   │   │               return rest;
│   │   │   │             });
│   │   │   │           }
│   │   │   │         };
│   │   │   │       
│   │   │   │         const handleSubmit = async (e: React.FormEvent) => {
│   │   │   │           e.preventDefault();
│   │   │   │           setIsSubmitting(true);
│   │   │   │           try {
│   │   │   │             await onSubmit(formData as T);
│   │   │   │             setOpen(false);
│   │   │   │             setFormData(defaultValues);
│   │   │   │             setErrors({});
│   │   │   │           } catch (error: any) {
│   │   │   │             setErrors(prev => ({
│   │   │   │               ...prev,
│   │   │   │               submit: error.message
│   │   │   │             }));
│   │   │   │           } finally {
│   │   │   │             setIsSubmitting(false);
│   │   │   │           }
│   │   │   │         };
│   │   │   │       
│   │   │   │         return (
│   │   │   │           <Dialog open={open} onOpenChange={setOpen}>
│   │   │   │             <DialogTrigger asChild>
│   │   │   │               <Button variant="outline" className="gap-2">
│   │   │   │                 {triggerButton.icon || <PlusCircle className="h-4 w-4" />}
│   │   │   │                 {triggerButton.label}
│   │   │   │               </Button>
│   │   │   │             </DialogTrigger>
│   │   │   │             <DialogContent className="sm:max-w-[425px]">
│   │   │   │               <DialogHeader>
│   │   │   │                 <DialogTitle>{title}</DialogTitle>
│   │   │   │                 {description && <DialogDescription>{description}</DialogDescription>}
│   │   │   │               </DialogHeader>
│   │   │   │               <form onSubmit={handleSubmit} className="space-y-4 pt-4">
│   │   │   │                 {fields.map((field) => (
│   │   │   │                   <FormField
│   │   │   │                     key={field.name}
│   │   │   │                     field={field}
│   │   │   │                     value={formData[field.name]}
│   │   │   │                     onChange={handleFieldChange}
│   │   │   │                     error={errors[field.name]}
│   │   │   │                   />
│   │   │   │                 ))}
│   │   │   │                 
│   │   │   │                 {errors.submit && (
│   │   │   │                   <div className="bg-red-500/10 border border-red-500 rounded-md p-3">
│   │   │   │                     <p className="text-sm text-red-500">{errors.submit}</p>
│   │   │   │                   </div>
│   │   │   │                 )}
│   │   │   │       
│   │   │   │                 <div className="flex justify-end gap-3 pt-4">
│   │   │   │                   <Button
│   │   │   │                     type="button"
│   │   │   │                     variant="outline"
│   │   │   │                     onClick={() => setOpen(false)}
│   │   │   │                     disabled={isSubmitting}
│   │   │   │                   >
│   │   │   │                     Cancel
│   │   │   │                   </Button>
│   │   │   │                   <Button type="submit" disabled={isSubmitting}>
│   │   │   │                     {isSubmitting ? "Saving..." : submitLabel}
│   │   │   │                   </Button>
│   │   │   │                 </div>
│   │   │   │               </form>
│   │   │   │             </DialogContent>
│   │   │   │           </Dialog>
│   │   │   │         );
│   │   │   │       }
│   │   │   ├── Form.tsx
│   │   │   │       // src/components/forms/Form.tsx
│   │   │   │       import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui';
│   │   │   │       import { Button } from '@/components/ui';
│   │   │   │       import type { FormConfig, FormField } from '@/types/forms';
│   │   │   │       
│   │   │   │       interface FormProps {
│   │   │   │         config: FormConfig;
│   │   │   │         fields: FormField[];
│   │   │   │         onSubmit: (data: Record<string, any>) => Promise<void>;
│   │   │   │         icon?: React.ReactNode;
│   │   │   │       }
│   │   │   │       
│   │   │   │       export function Form({ config, fields, onSubmit, icon }: FormProps) {
│   │   │   │         const [values, setValues] = useState<Record<string, any>>({});
│   │   │   │         const [errors, setErrors] = useState<Record<string, string>>({});
│   │   │   │         const [isSubmitting, setIsSubmitting] = useState(false);
│   │   │   │       
│   │   │   │         const handleSubmit = async (e: React.FormEvent) => {
│   │   │   │           e.preventDefault();
│   │   │   │           setIsSubmitting(true);
│   │   │   │           try {
│   │   │   │             await onSubmit(values);
│   │   │   │             config.onSuccess?.();
│   │   │   │           } catch (error) {
│   │   │   │             // Handle error
│   │   │   │           } finally {
│   │   │   │             setIsSubmitting(false);
│   │   │   │           }
│   │   │   │         };
│   │   │   │       
│   │   │   │         return (
│   │   │   │           <Card className="bg-gray-800 border-gray-700">
│   │   │   │             <CardHeader>
│   │   │   │               <CardTitle className="flex items-center gap-2 text-gray-100">
│   │   │   │                 {icon}
│   │   │   │                 {config.title}
│   │   │   │               </CardTitle>
│   │   │   │             </CardHeader>
│   │   │   │             <CardContent>
│   │   │   │               <FormContext.Provider value={{ values, errors, setFieldValue }}>
│   │   │   │                 <form onSubmit={handleSubmit} className="space-y-4">
│   │   │   │                   {fields.map((field) => (
│   │   │   │                     <FormField key={field.name} field={field} />
│   │   │   │                   ))}
│   │   │   │                   <div className="flex justify-end gap-3">
│   │   │   │                     {config.showCancel && (
│   │   │   │                       <Button variant="outline" onClick={config.onCancel}>
│   │   │   │                         Cancel
│   │   │   │                       </Button>
│   │   │   │                     )}
│   │   │   │                     <Button type="submit" disabled={isSubmitting}>
│   │   │   │                       {isSubmitting ? "Saving..." : config.submitLabel || "Submit"}
│   │   │   │                     </Button>
│   │   │   │                   </div>
│   │   │   │                 </form>
│   │   │   │               </FormContext.Provider>
│   │   │   │             </CardContent>
│   │   │   │           </Card>
│   │   │   │         );
│   │   │   │       }
│   │   │   ├── FormContext.tsx
│   │   │   │       // src/components/forms/FormContext.tsx
│   │   │   │       import React from 'react';
│   │   │   │       
│   │   │   │       interface FormContextValue {
│   │   │   │         values: Record<string, any>;
│   │   │   │         errors: Record<string, string>;
│   │   │   │         touched: Record<string, boolean>;
│   │   │   │         setFieldValue: (name: string, value: any) => void;
│   │   │   │         setFieldError: (name: string, error: string) => void;
│   │   │   │         setFieldTouched: (name: string, touched: boolean) => void;
│   │   │   │       }
│   │   │   │       
│   │   │   │       const FormContext = React.createContext<FormContextValue | undefined>(undefined);
│   │   │   │       
│   │   │   │       // Example usage with ProjectForm
│   │   │   │       // src/app/page.tsx 
│   │   │   │       
│   │   │   │       // function Home() {
│   │   │   │       //   const projectConfig: FormConfig = {
│   │   │   │       //     title: "Add Project",
│   │   │   │       //     submitLabel: "Create Project",
│   │   │   │       //     onSuccess: () => {
│   │   │   │       //       refreshProjects();
│   │   │   │       //     }
│   │   │   │       //   };
│   │   │   │       
│   │   │   │       //   const projectFields: FormField[] = [
│   │   │   │       //     {
│   │   │   │       //       name: "name",
│   │   │   │       //       label: "Project Name",
│   │   │   │       //       type: "text",
│   │   │   │       //       required: true
│   │   │   │       //     },
│   │   │   │       //     {
│   │   │   │       //       name: "description", 
│   │   │   │       //       label: "Description",
│   │   │   │       //       type: "textarea"
│   │   │   │       //     },
│   │   │   │       //     {
│   │   │   │       //       name: "status",
│   │   │   │       //       label: "Status",
│   │   │   │       //       type: "select",
│   │   │   │       //       options: [
│   │   │   │       //         { label: "Not Started", value: "not-started" },
│   │   │   │       //         { label: "In Progress", value: "in-progress" },
│   │   │   │       //         { label: "Completed", value: "completed" }
│   │   │   │       //       ]
│   │   │   │       //     },
│   │   │   │       //     {
│   │   │   │       //       name: "startDate",
│   │   │   │       //       label: "Start Date", 
│   │   │   │       //       type: "date"
│   │   │   │       //     },
│   │   │   │       //     {
│   │   │   │       //       name: "dueDate",
│   │   │   │       //       label: "Due Date",
│   │   │   │       //       type: "date" 
│   │   │   │       //     }
│   │   │   │       //   ];
│   │   │   │       
│   │   │   │       //   return (
│   │   │   │       //     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
│   │   │   │       //       <Form
│   │   │   │       //         config={projectConfig}
│   │   │   │       //         fields={projectFields}
│   │   │   │       //         onSubmit={handleProjectSubmit}
│   │   │   │       //         icon={<Folder size={20} />}
│   │   │   │       //       />
│   │   │   │       
│   │   │   │       //       <Form
│   │   │   │       //         config={{
│   │   │   │       //           title: "Add Task",
│   │   │   │       //           submitLabel: "Create Task"
│   │   │   │       //         }}
│   │   │   │       //         fields={taskFields}
│   │   │   │       //         onSubmit={handleTaskSubmit}
│   │   │   │       //         icon={<CheckSquare size={20} />}
│   │   │   │       //       />
│   │   │   │       
│   │   │   │       //       {/* Similar pattern for Objective and TimeEntry forms */}
│   │   │   │       //     </div>
│   │   │   │       //   );
│   │   │   │       // }
│   │   │   │       
│   │   │   │       // src/types/forms.ts
│   │   │   │       export interface FormConfig {
│   │   │   │         title: string;
│   │   │   │         submitLabel?: string;
│   │   │   │         showCancel?: boolean;
│   │   │   │         onCancel?: () => void;
│   │   │   │         onSuccess?: () => void;
│   │   │   │       }
│   │   │   │       
│   │   │   │       export interface FormField {
│   │   │   │         name: string;
│   │   │   │         label: string;
│   │   │   │         type: 'text' | 'textarea' | 'select' | 'date' | 'number';
│   │   │   │         required?: boolean;
│   │   │   │         options?: Array<{label: string, value: string}>;
│   │   │   │         placeholder?: string;
│   │   │   │         defaultValue?: any;
│   │   │   │         validate?: (value: any) => string | undefined;
│   │   │   │       }
│   │   │   ├── fields/
│   │   │   │   ├── FormButton.tsx
│   │   │   │   │       // src/components/forms/fields/FormButtons.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import { Button } from '@/components/ui/button';
│   │   │   │   │       import { cn } from '@/lib/utils';
│   │   │   │   │       import type { FormButtonsProps, ButtonColor } from '@/types/forms/fields';
│   │   │   │   │       
│   │   │   │   │       const colorVariants: Record<ButtonColor, string> = {
│   │   │   │   │         blue: 'bg-blue-600 hover:bg-blue-700',
│   │   │   │   │         green: 'bg-green-600 hover:bg-green-700',
│   │   │   │   │         yellow: 'bg-yellow-600 hover:bg-yellow-700',
│   │   │   │   │         purple: 'bg-purple-600 hover:bg-purple-700',
│   │   │   │   │         indigo: 'bg-indigo-600 hover:bg-indigo-700',
│   │   │   │   │       };
│   │   │   │   │       
│   │   │   │   │       export function FormButtons({
│   │   │   │   │         config,
│   │   │   │   │         onCancel,
│   │   │   │   │         onReset,
│   │   │   │   │         isSubmitting = false,
│   │   │   │   │         submitText = 'Save',
│   │   │   │   │         cancelText = 'Cancel',
│   │   │   │   │         color = 'blue',
│   │   │   │   │         disabled = false,
│   │   │   │   │         className
│   │   │   │   │       }: FormButtonsProps) {
│   │   │   │   │         const submitConfig = config?.submit || {
│   │   │   │   │           label: submitText,
│   │   │   │   │           color: color,
│   │   │   │   │           disabled: disabled || isSubmitting,
│   │   │   │   │         };
│   │   │   │   │       
│   │   │   │   │         const cancelConfig = config?.cancel || (onCancel ? {
│   │   │   │   │           label: cancelText,
│   │   │   │   │           variant: 'outline' as const,
│   │   │   │   │           disabled: disabled || isSubmitting,
│   │   │   │   │         } : undefined);
│   │   │   │   │       
│   │   │   │   │         return (
│   │   │   │   │           <div className={cn('flex justify-end gap-3 pt-4', className)}>
│   │   │   │   │             {cancelConfig && onCancel && (
│   │   │   │   │               <Button
│   │   │   │   │                 type="button"
│   │   │   │   │                 variant={cancelConfig.variant || 'outline'}
│   │   │   │   │                 size={cancelConfig.size}
│   │   │   │   │                 onClick={onCancel}
│   │   │   │   │                 disabled={cancelConfig.disabled}
│   │   │   │   │                 className={cancelConfig.className}
│   │   │   │   │               >
│   │   │   │   │                 {cancelConfig.icon}
│   │   │   │   │                 {cancelConfig.label}
│   │   │   │   │               </Button>
│   │   │   │   │             )}
│   │   │   │   │             
│   │   │   │   │             <Button
│   │   │   │   │               type="submit"
│   │   │   │   │               variant={submitConfig.variant || 'default'}
│   │   │   │   │               size={submitConfig.size}
│   │   │   │   │               disabled={submitConfig.disabled}
│   │   │   │   │               className={cn(
│   │   │   │   │                 colorVariants[submitConfig.color || color],
│   │   │   │   │                 submitConfig.className
│   │   │   │   │               )}
│   │   │   │   │             >
│   │   │   │   │               {submitConfig.icon}
│   │   │   │   │               {isSubmitting ? 'Saving...' : submitConfig.label}
│   │   │   │   │             </Button>
│   │   │   │   │       
│   │   │   │   │             {config?.reset && onReset && (
│   │   │   │   │               <Button
│   │   │   │   │                 type="button"
│   │   │   │   │                 variant={config.reset.variant || 'ghost'}
│   │   │   │   │                 size={config.reset.size}
│   │   │   │   │                 onClick={onReset}
│   │   │   │   │                 disabled={config.reset.disabled}
│   │   │   │   │                 className={config.reset.className}
│   │   │   │   │               >
│   │   │   │   │                 {config.reset.icon}
│   │   │   │   │                 {config.reset.label}
│   │   │   │   │               </Button>
│   │   │   │   │             )}
│   │   │   │   │           </div>
│   │   │   │   │         );
│   │   │   │   │       }
│   │   │   │   ├── FormField.tsx
│   │   │   │   │       // src/components/forms/fields/FormField.tsx
│   │   │   │   │       import React from 'react';
│   │   │   │   │       import type { FieldConfig, FormFieldProps } from '@/types/forms/fields';
│   │   │   │   │       import { Input } from "@/components/ui/input";
│   │   │   │   │       import { Textarea } from "@/components/ui/textarea";
│   │   │   │   │       import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
│   │   │   │   │       
│   │   │   │   │       // Separate the wrapper into its own component file
│   │   │   │   │       export const FormFieldLabel: React.FC<{
│   │   │   │   │         label: string;
│   │   │   │   │         required?: boolean;
│   │   │   │   │         htmlFor?: string;
│   │   │   │   │       }> = ({ label, required, htmlFor }) => (
│   │   │   │   │         <label 
│   │   │   │   │           htmlFor={htmlFor}
│   │   │   │   │           className="text-sm font-medium text-gray-200"
│   │   │   │   │         >
│   │   │   │   │           {label}
│   │   │   │   │           {required && <span className="text-red-500 ml-1">*</span>}
│   │   │   │   │         </label>
│   │   │   │   │       );
│   │   │   │   │       
│   │   │   │   │       // Field wrapper with error handling
│   │   │   │   │       export const FormFieldWrapper: React.FC<{
│   │   │   │   │         children: React.ReactNode;
│   │   │   │   │         label: string;
│   │   │   │   │         required?: boolean;
│   │   │   │   │         error?: string;
│   │   │   │   │         htmlFor?: string;
│   │   │   │   │       }> = ({ children, label, required, error, htmlFor }) => (
│   │   │   │   │         <div className="space-y-2">
│   │   │   │   │           <FormFieldLabel label={label} required={required} htmlFor={htmlFor} />
│   │   │   │   │           {children}
│   │   │   │   │           {error && <p className="text-sm text-red-500">{error}</p>}
│   │   │   │   │         </div>
│   │   │   │   │       );
│   │   │   │   │       
│   │   │   │   │       // Main FormField component
│   │   │   │   │       export const FormField = React.forwardRef<HTMLDivElement, FormFieldProps>(({
│   │   │   │   │         field,
│   │   │   │   │         value,
│   │   │   │   │         onChange,
│   │   │   │   │         onBlur,
│   │   │   │   │         error,
│   │   │   │   │         touched
│   │   │   │   │       }, ref) => {
│   │   │   │   │         if (!field) {
│   │   │   │   │           return null;
│   │   │   │   │         }
│   │   │   │   │       
│   │   │   │   │         const handleChange = (newValue: string) => {
│   │   │   │   │           onChange?.(field.name, newValue);
│   │   │   │   │         };
│   │   │   │   │       
│   │   │   │   │         const handleBlur = () => {
│   │   │   │   │           onBlur?.(field.name);
│   │   │   │   │         };
│   │   │   │   │       
│   │   │   │   │         const commonProps = {
│   │   │   │   │           id: field.name,
│   │   │   │   │           name: field.name,
│   │   │   │   │           value: value ?? '',
│   │   │   │   │           onChange: (e: React.ChangeEvent<any>) => handleChange(e.target.value),
│   │   │   │   │           onBlur: handleBlur,
│   │   │   │   │           required: field.required,
│   │   │   │   │           disabled: field.disabled,
│   │   │   │   │           placeholder: field.placeholder,
│   │   │   │   │           className: field.className,
│   │   │   │   │         };
│   │   │   │   │       
│   │   │   │   │         const renderInput = () => {
│   │   │   │   │           switch (field.type) {
│   │   │   │   │             case 'textarea':
│   │   │   │   │               return (
│   │   │   │   │                 <Textarea
│   │   │   │   │                   {...commonProps}
│   │   │   │   │                   rows={field.rows}
│   │   │   │   │                 />
│   │   │   │   │               );
│   │   │   │   │       
│   │   │   │   │             case 'select':
│   │   │   │   │               return (
│   │   │   │   │                 <Select
│   │   │   │   │                   value={value ?? ''}
│   │   │   │   │                   onValueChange={handleChange}
│   │   │   │   │                   disabled={field.disabled}
│   │   │   │   │                 >
│   │   │   │   │                   <SelectTrigger>
│   │   │   │   │                     <SelectValue placeholder={field.placeholder || `Select ${field.label}`} />
│   │   │   │   │                   </SelectTrigger>
│   │   │   │   │                   <SelectContent>
│   │   │   │   │                     {field.options?.map((option) => (
│   │   │   │   │                       <SelectItem key={option.value} value={option.value}>
│   │   │   │   │                         {option.label}
│   │   │   │   │                       </SelectItem>
│   │   │   │   │                     ))}
│   │   │   │   │                   </SelectContent>
│   │   │   │   │                 </Select>
│   │   │   │   │               );
│   │   │   │   │       
│   │   │   │   │             case 'number':
│   │   │   │   │               return (
│   │   │   │   │                 <Input
│   │   │   │   │                   {...commonProps}
│   │   │   │   │                   type="number"
│   │   │   │   │                   min={field.min}
│   │   │   │   │                   max={field.max}
│   │   │   │   │                   step={field.step}
│   │   │   │   │                 />
│   │   │   │   │               );
│   │   │   │   │       
│   │   │   │   │             case 'date':
│   │   │   │   │             case 'datetime-local':
│   │   │   │   │               return (
│   │   │   │   │                 <Input
│   │   │   │   │                   {...commonProps}
│   │   │   │   │                   type={field.type}
│   │   │   │   │                   min={field.min}
│   │   │   │   │                   max={field.max}
│   │   │   │   │                 />
│   │   │   │   │               );
│   │   │   │   │       
│   │   │   │   │             default:
│   │   │   │   │               return (
│   │   │   │   │                 <Input
│   │   │   │   │                   {...commonProps}
│   │   │   │   │                   type="text"
│   │   │   │   │                 />
│   │   │   │   │               );
│   │   │   │   │           }
│   │   │   │   │         };
│   │   │   │   │       
│   │   │   │   │         return (
│   │   │   │   │           <FormFieldWrapper
│   │   │   │   │             label={field.label}
│   │   │   │   │             required={field.required}
│   │   │   │   │             error={error}
│   │   │   │   │             htmlFor={field.name}
│   │   │   │   │           >
│   │   │   │   │             {renderInput()}
│   │   │   │   │           </FormFieldWrapper>
│   │   │   │   │         );
│   │   │   │   │       });
│   │   │   │   │       
│   │   │   │   │       FormField.displayName = 'FormField';
│   │   │   │   └── index.ts
│   │   │   │           // src/components/forms/fields/index.ts
│   │   │   │           export { FormField, FormFieldWrapper, FormFieldLabel } from './FormField';
│   │   │   │           export { FormButtons, } from './FormButton';
│   │   │   └── index.ts
│   │   │           
│   │   │           // src/components/forms/index.ts
│   │   │           export * from './BaseForm';
│   │   │           export * from './fields'
│   │   ├── index.ts
│   │   │       export * from './dashboard';
│   │   │       // export * from './dialogs';
│   │   │       export * from './forms';
│   │   │       export * from './ui';
│   │   └── ui/
│   │       ├── button.tsx
│   │       │       import * as React from "react"
│   │       │       import { Slot } from "@radix-ui/react-slot"
│   │       │       import { cva, type VariantProps } from "class-variance-authority"
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       const buttonVariants = cva(
│   │       │         "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-zinc-900 transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-zinc-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
│   │       │         {
│   │       │           variants: {
│   │       │             variant: {
│   │       │               default: "bg-zinc-200 text-zinc-900 hover:bg-zinc-300/90",
│   │       │               destructive:
│   │       │                 "bg-red-500 text-zinc-50 hover:bg-red-500/90",
│   │       │               outline:
│   │       │                 "border border-zinc-700 bg-zinc-900 hover:bg-zinc-800 hover:text-zinc-50 text-zinc-300",
│   │       │               secondary:
│   │       │                 "bg-zinc-800 text-zinc-50 hover:bg-zinc-800/80",
│   │       │               ghost: "hover:bg-zinc-800 hover:text-zinc-50 text-zinc-400",
│   │       │               link: "text-zinc-200 underline-offset-4 hover:underline",
│   │       │             },
│   │       │             size: {
│   │       │               default: "h-10 px-4 py-2",
│   │       │               sm: "h-9 rounded-md px-3",
│   │       │               lg: "h-11 rounded-md px-8",
│   │       │               icon: "h-10 w-10",
│   │       │             },
│   │       │           },
│   │       │           defaultVariants: {
│   │       │             variant: "default",
│   │       │             size: "default",
│   │       │           },
│   │       │         }
│   │       │       )
│   │       │       
│   │       │       export interface ButtonProps
│   │       │         extends React.ButtonHTMLAttributes<HTMLButtonElement>,
│   │       │           VariantProps<typeof buttonVariants> {
│   │       │         asChild?: boolean
│   │       │       }
│   │       │       
│   │       │       const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
│   │       │         ({ className, variant, size, asChild = false, ...props }, ref) => {
│   │       │           const Comp = asChild ? Slot : "button"
│   │       │           return (
│   │       │             <Comp
│   │       │               className={cn(buttonVariants({ variant, size, className }))}
│   │       │               ref={ref}
│   │       │               {...props}
│   │       │             />
│   │       │           )
│   │       │         }
│   │       │       )
│   │       │       Button.displayName = "Button"
│   │       │       
│   │       │       export { Button, buttonVariants }
│   │       ├── card/
│   │       │   ├── Card.tsx
│   │       │   │       // src/components/core/Card/Card.tsx
│   │       │   │       import React from 'react';
│   │       │   │       
│   │       │   │       interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
│   │       │   │         children: React.ReactNode;
│   │       │   │       }
│   │       │   │       
│   │       │   │       export function Card({ children, className = '', ...props }: CardProps) {
│   │       │   │         return (
│   │       │   │           <div 
│   │       │   │             className={`rounded-lg border border-gray-700 bg-gray-800/40 shadow-sm ${className}`}
│   │       │   │             {...props}
│   │       │   │           >
│   │       │   │             {children}
│   │       │   │           </div>
│   │       │   │         );
│   │       │   │       }
│   │       │   ├── CardContent.tsx
│   │       │   │       // src/components/core/Card/CardContent.tsx
│   │       │   │       import React from 'react';
│   │       │   │       
│   │       │   │       interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {
│   │       │   │         children: React.ReactNode;
│   │       │   │       }
│   │       │   │       
│   │       │   │       export function CardContent({ children, className = '', ...props }: CardContentProps) {
│   │       │   │         return (
│   │       │   │           <div 
│   │       │   │             className={`p-6 pt-0 ${className}`}
│   │       │   │             {...props}
│   │       │   │           >
│   │       │   │             {children}
│   │       │   │           </div>
│   │       │   │         );
│   │       │   │       }
│   │       │   │       
│   │       │   ├── CardHeader.tsx
│   │       │   │       // src/components/core/Card/CardHeader.tsx
│   │       │   │       import React from 'react';
│   │       │   │       
│   │       │   │       interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
│   │       │   │         children: React.ReactNode;
│   │       │   │       }
│   │       │   │       
│   │       │   │       export function CardHeader({ children, className = '', ...props }: CardHeaderProps) {
│   │       │   │         return (
│   │       │   │           <div 
│   │       │   │             className={`flex flex-col space-y-1.5 p-6 ${className}`}
│   │       │   │             {...props}
│   │       │   │           >
│   │       │   │             {children}
│   │       │   │           </div>
│   │       │   │         );
│   │       │   │       }
│   │       │   │       
│   │       │   ├── CardTitle.tsx
│   │       │   │       // src/components/core/Card/CardTitle.tsx
│   │       │   │       import React from 'react';
│   │       │   │       
│   │       │   │       interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {
│   │       │   │         children: React.ReactNode;
│   │       │   │       }
│   │       │   │       
│   │       │   │       export function CardTitle({ children, className = '', ...props }: CardTitleProps) {
│   │       │   │         return (
│   │       │   │           <h3 
│   │       │   │             className={`font-semibold leading-none tracking-tight text-lg ${className}`}
│   │       │   │             {...props}
│   │       │   │           >
│   │       │   │             {children}
│   │       │   │           </h3>
│   │       │   │         );
│   │       │   │       }
│   │       │   │       
│   │       │   └── index.ts
│   │       │           // src/components/core/Card/index.ts
│   │       │           export * from './Card';
│   │       │           export * from './CardHeader';
│   │       │           export * from './CardTitle';
│   │       │           export * from './CardContent';
│   │       ├── dialog.tsx
│   │       │       "use client"
│   │       │       
│   │       │       import * as React from "react"
│   │       │       import * as DialogPrimitive from "@radix-ui/react-dialog"
│   │       │       import { X } from "lucide-react"
│   │       │       
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       const Dialog = DialogPrimitive.Root
│   │       │       
│   │       │       const DialogTrigger = DialogPrimitive.Trigger
│   │       │       
│   │       │       const DialogPortal = DialogPrimitive.Portal
│   │       │       
│   │       │       const DialogClose = DialogPrimitive.Close
│   │       │       
│   │       │       const DialogOverlay = React.forwardRef<
│   │       │         React.ElementRef<typeof DialogPrimitive.Overlay>,
│   │       │         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <DialogPrimitive.Overlay
│   │       │           ref={ref}
│   │       │           className={cn(
│   │       │             "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
│   │       │       
│   │       │       const DialogContent = React.forwardRef<
│   │       │         React.ElementRef<typeof DialogPrimitive.Content>,
│   │       │         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
│   │       │       >(({ className, children, ...props }, ref) => (
│   │       │         <DialogPortal>
│   │       │           <DialogOverlay />
│   │       │           <DialogPrimitive.Content
│   │       │             ref={ref}
│   │       │             className={cn(
│   │       │               "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-zinc-900 p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg border-zinc-800",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           >
│   │       │             {children}
│   │       │             <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-zinc-900 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-zinc-400 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-zinc-800 data-[state=open]:text-zinc-200">
│   │       │               <X className="h-4 w-4" />
│   │       │               <span className="sr-only">Close</span>
│   │       │             </DialogPrimitive.Close>
│   │       │           </DialogPrimitive.Content>
│   │       │         </DialogPortal>
│   │       │       ))
│   │       │       DialogContent.displayName = DialogPrimitive.Content.displayName
│   │       │       
│   │       │       const DialogHeader = ({
│   │       │         className,
│   │       │         ...props
│   │       │       }: React.HTMLAttributes<HTMLDivElement>) => (
│   │       │         <div
│   │       │           className={cn(
│   │       │             "flex flex-col space-y-1.5 text-center sm:text-left",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         />
│   │       │       )
│   │       │       DialogHeader.displayName = "DialogHeader"
│   │       │       
│   │       │       const DialogFooter = ({
│   │       │         className,
│   │       │         ...props
│   │       │       }: React.HTMLAttributes<HTMLDivElement>) => (
│   │       │         <div
│   │       │           className={cn(
│   │       │             "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         />
│   │       │       )
│   │       │       DialogFooter.displayName = "DialogFooter"
│   │       │       
│   │       │       const DialogTitle = React.forwardRef<
│   │       │         React.ElementRef<typeof DialogPrimitive.Title>,
│   │       │         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <DialogPrimitive.Title
│   │       │           ref={ref}
│   │       │           className={cn(
│   │       │             "text-lg font-semibold leading-none tracking-tight text-zinc-100",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       DialogTitle.displayName = DialogPrimitive.Title.displayName
│   │       │       
│   │       │       const DialogDescription = React.forwardRef<
│   │       │         React.ElementRef<typeof DialogPrimitive.Description>,
│   │       │         React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <DialogPrimitive.Description
│   │       │           ref={ref}
│   │       │           className={cn("text-sm text-zinc-400", className)}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       DialogDescription.displayName = DialogPrimitive.Description.displayName
│   │       │       
│   │       │       export {
│   │       │         Dialog,
│   │       │         DialogPortal,
│   │       │         DialogOverlay,
│   │       │         DialogClose,
│   │       │         DialogTrigger,
│   │       │         DialogContent,
│   │       │         DialogHeader,
│   │       │         DialogFooter,
│   │       │         DialogTitle,
│   │       │         DialogDescription,
│   │       │       }
│   │       ├── index.ts
│   │       │       export * from './button';
│   │       │       export * from './dialog';
│   │       │       export * from './input';
│   │       │       export * from './select';
│   │       │       export * from './switch';
│   │       │       export * from './textarea';
│   │       │       export * from './card';
│   │       │       export * from './modal';
│   │       ├── input.tsx
│   │       │       import * as React from "react"
│   │       │       
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
│   │       │         ({ className, type, ...props }, ref) => {
│   │       │           return (
│   │       │             <input
│   │       │               type={type}
│   │       │               className={cn(
│   │       │                 "flex h-10 w-full rounded-md border border-neutral-200 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-neutral-950 placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:file:text-neutral-50 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300",
│   │       │                 className
│   │       │               )}
│   │       │               ref={ref}
│   │       │               {...props}
│   │       │             />
│   │       │           )
│   │       │         }
│   │       │       )
│   │       │       Input.displayName = "Input"
│   │       │       
│   │       │       export { Input }
│   │       ├── modal/
│   │       │   ├── Modal.tsx
│   │       │   │       // src/components/core/Modal.tsx
│   │       │   │       import React from 'react';
│   │       │   │       
│   │       │   │       interface ModalProps {
│   │       │   │         children: React.ReactNode;
│   │       │   │         onClose: () => void;
│   │       │   │       }
│   │       │   │       
│   │       │   │       export const Modal: React.FC<ModalProps> = ({ children, onClose }) => {
│   │       │   │         return (
│   │       │   │           <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
│   │       │   │             <div className="bg-white rounded shadow-lg w-11/12 md:w-1/2 lg:w-1/3 p-6 relative">
│   │       │   │               <button
│   │       │   │                 onClick={onClose}
│   │       │   │                 className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
│   │       │   │               >
│   │       │   │                 &times;
│   │       │   │               </button>
│   │       │   │               {children}
│   │       │   │             </div>
│   │       │   │           </div>
│   │       │   │         );
│   │       │   │       };
│   │       │   └── index.ts
│   │       │           export * from './Modal';
│   │       ├── select.tsx
│   │       │       "use client"
│   │       │       
│   │       │       import * as React from "react"
│   │       │       import * as SelectPrimitive from "@radix-ui/react-select"
│   │       │       import { Check, ChevronDown, ChevronUp } from "lucide-react"
│   │       │       
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       const Select = SelectPrimitive.Root
│   │       │       
│   │       │       const SelectGroup = SelectPrimitive.Group
│   │       │       
│   │       │       const SelectValue = SelectPrimitive.Value
│   │       │       
│   │       │       const SelectTrigger = React.forwardRef<
│   │       │         React.ElementRef<typeof SelectPrimitive.Trigger>,
│   │       │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
│   │       │       >(({ className, children, ...props }, ref) => (
│   │       │         <SelectPrimitive.Trigger
│   │       │           ref={ref}
│   │       │           className={cn(
│   │       │             "flex h-10 w-full items-center justify-between rounded-md border border-neutral-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus:ring-neutral-300",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         >
│   │       │           {children}
│   │       │           <SelectPrimitive.Icon asChild>
│   │       │             <ChevronDown className="h-4 w-4 opacity-50" />
│   │       │           </SelectPrimitive.Icon>
│   │       │         </SelectPrimitive.Trigger>
│   │       │       ))
│   │       │       SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
│   │       │       
│   │       │       const SelectScrollUpButton = React.forwardRef<
│   │       │         React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
│   │       │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <SelectPrimitive.ScrollUpButton
│   │       │           ref={ref}
│   │       │           className={cn(
│   │       │             "flex cursor-default items-center justify-center py-1",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         >
│   │       │           <ChevronUp className="h-4 w-4" />
│   │       │         </SelectPrimitive.ScrollUpButton>
│   │       │       ))
│   │       │       SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
│   │       │       
│   │       │       const SelectScrollDownButton = React.forwardRef<
│   │       │         React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
│   │       │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <SelectPrimitive.ScrollDownButton
│   │       │           ref={ref}
│   │       │           className={cn(
│   │       │             "flex cursor-default items-center justify-center py-1",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         >
│   │       │           <ChevronDown className="h-4 w-4" />
│   │       │         </SelectPrimitive.ScrollDownButton>
│   │       │       ))
│   │       │       SelectScrollDownButton.displayName =
│   │       │         SelectPrimitive.ScrollDownButton.displayName
│   │       │       
│   │       │       const SelectContent = React.forwardRef<
│   │       │         React.ElementRef<typeof SelectPrimitive.Content>,
│   │       │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
│   │       │       >(({ className, children, position = "popper", ...props }, ref) => (
│   │       │         <SelectPrimitive.Portal>
│   │       │           <SelectPrimitive.Content
│   │       │             ref={ref}
│   │       │             className={cn(
│   │       │               "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-neutral-200 bg-white text-neutral-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50",
│   │       │               position === "popper" &&
│   │       │                 "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
│   │       │               className
│   │       │             )}
│   │       │             position={position}
│   │       │             {...props}
│   │       │           >
│   │       │             <SelectScrollUpButton />
│   │       │             <SelectPrimitive.Viewport
│   │       │               className={cn(
│   │       │                 "p-1",
│   │       │                 position === "popper" &&
│   │       │                   "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
│   │       │               )}
│   │       │             >
│   │       │               {children}
│   │       │             </SelectPrimitive.Viewport>
│   │       │             <SelectScrollDownButton />
│   │       │           </SelectPrimitive.Content>
│   │       │         </SelectPrimitive.Portal>
│   │       │       ))
│   │       │       SelectContent.displayName = SelectPrimitive.Content.displayName
│   │       │       
│   │       │       const SelectLabel = React.forwardRef<
│   │       │         React.ElementRef<typeof SelectPrimitive.Label>,
│   │       │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <SelectPrimitive.Label
│   │       │           ref={ref}
│   │       │           className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SelectLabel.displayName = SelectPrimitive.Label.displayName
│   │       │       
│   │       │       const SelectItem = React.forwardRef<
│   │       │         React.ElementRef<typeof SelectPrimitive.Item>,
│   │       │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
│   │       │       >(({ className, children, ...props }, ref) => (
│   │       │         <SelectPrimitive.Item
│   │       │           ref={ref}
│   │       │           className={cn(
│   │       │             "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-neutral-100 focus:text-neutral-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-neutral-800 dark:focus:text-neutral-50",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         >
│   │       │           <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
│   │       │             <SelectPrimitive.ItemIndicator>
│   │       │               <Check className="h-4 w-4" />
│   │       │             </SelectPrimitive.ItemIndicator>
│   │       │           </span>
│   │       │       
│   │       │           <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
│   │       │         </SelectPrimitive.Item>
│   │       │       ))
│   │       │       SelectItem.displayName = SelectPrimitive.Item.displayName
│   │       │       
│   │       │       const SelectSeparator = React.forwardRef<
│   │       │         React.ElementRef<typeof SelectPrimitive.Separator>,
│   │       │         React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <SelectPrimitive.Separator
│   │       │           ref={ref}
│   │       │           className={cn("-mx-1 my-1 h-px bg-neutral-100 dark:bg-neutral-800", className)}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SelectSeparator.displayName = SelectPrimitive.Separator.displayName
│   │       │       
│   │       │       export {
│   │       │         Select,
│   │       │         SelectGroup,
│   │       │         SelectValue,
│   │       │         SelectTrigger,
│   │       │         SelectContent,
│   │       │         SelectLabel,
│   │       │         SelectItem,
│   │       │         SelectSeparator,
│   │       │         SelectScrollUpButton,
│   │       │         SelectScrollDownButton,
│   │       │       }
│   │       ├── separator.tsx
│   │       │       "use client"
│   │       │       
│   │       │       import * as React from "react"
│   │       │       import * as SeparatorPrimitive from "@radix-ui/react-separator"
│   │       │       
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       const Separator = React.forwardRef<
│   │       │         React.ElementRef<typeof SeparatorPrimitive.Root>,
│   │       │         React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
│   │       │       >(
│   │       │         (
│   │       │           { className, orientation = "horizontal", decorative = true, ...props },
│   │       │           ref
│   │       │         ) => (
│   │       │           <SeparatorPrimitive.Root
│   │       │             ref={ref}
│   │       │             decorative={decorative}
│   │       │             orientation={orientation}
│   │       │             className={cn(
│   │       │               "shrink-0 bg-neutral-200 dark:bg-neutral-800",
│   │       │               orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       )
│   │       │       Separator.displayName = SeparatorPrimitive.Root.displayName
│   │       │       
│   │       │       export { Separator }
│   │       ├── sheet.tsx
│   │       │       "use client"
│   │       │       
│   │       │       import * as React from "react"
│   │       │       import * as SheetPrimitive from "@radix-ui/react-dialog"
│   │       │       import { cva, type VariantProps } from "class-variance-authority"
│   │       │       import { X } from "lucide-react"
│   │       │       
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       const Sheet = SheetPrimitive.Root
│   │       │       
│   │       │       const SheetTrigger = SheetPrimitive.Trigger
│   │       │       
│   │       │       const SheetClose = SheetPrimitive.Close
│   │       │       
│   │       │       const SheetPortal = SheetPrimitive.Portal
│   │       │       
│   │       │       const SheetOverlay = React.forwardRef<
│   │       │         React.ElementRef<typeof SheetPrimitive.Overlay>,
│   │       │         React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <SheetPrimitive.Overlay
│   │       │           className={cn(
│   │       │             "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │           ref={ref}
│   │       │         />
│   │       │       ))
│   │       │       SheetOverlay.displayName = SheetPrimitive.Overlay.displayName
│   │       │       
│   │       │       const sheetVariants = cva(
│   │       │         "fixed z-50 gap-4 bg-white p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500 dark:bg-neutral-950",
│   │       │         {
│   │       │           variants: {
│   │       │             side: {
│   │       │               top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
│   │       │               bottom:
│   │       │                 "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
│   │       │               left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
│   │       │               right:
│   │       │                 "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
│   │       │             },
│   │       │           },
│   │       │           defaultVariants: {
│   │       │             side: "right",
│   │       │           },
│   │       │         }
│   │       │       )
│   │       │       
│   │       │       interface SheetContentProps
│   │       │         extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
│   │       │           VariantProps<typeof sheetVariants> {}
│   │       │       
│   │       │       const SheetContent = React.forwardRef<
│   │       │         React.ElementRef<typeof SheetPrimitive.Content>,
│   │       │         SheetContentProps
│   │       │       >(({ side = "right", className, children, ...props }, ref) => (
│   │       │         <SheetPortal>
│   │       │           <SheetOverlay />
│   │       │           <SheetPrimitive.Content
│   │       │             ref={ref}
│   │       │             className={cn(sheetVariants({ side }), className)}
│   │       │             {...props}
│   │       │           >
│   │       │             {children}
│   │       │             <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-neutral-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-neutral-100 dark:ring-offset-neutral-950 dark:focus:ring-neutral-300 dark:data-[state=open]:bg-neutral-800">
│   │       │               <X className="h-4 w-4" />
│   │       │               <span className="sr-only">Close</span>
│   │       │             </SheetPrimitive.Close>
│   │       │           </SheetPrimitive.Content>
│   │       │         </SheetPortal>
│   │       │       ))
│   │       │       SheetContent.displayName = SheetPrimitive.Content.displayName
│   │       │       
│   │       │       const SheetHeader = ({
│   │       │         className,
│   │       │         ...props
│   │       │       }: React.HTMLAttributes<HTMLDivElement>) => (
│   │       │         <div
│   │       │           className={cn(
│   │       │             "flex flex-col space-y-2 text-center sm:text-left",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         />
│   │       │       )
│   │       │       SheetHeader.displayName = "SheetHeader"
│   │       │       
│   │       │       const SheetFooter = ({
│   │       │         className,
│   │       │         ...props
│   │       │       }: React.HTMLAttributes<HTMLDivElement>) => (
│   │       │         <div
│   │       │           className={cn(
│   │       │             "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         />
│   │       │       )
│   │       │       SheetFooter.displayName = "SheetFooter"
│   │       │       
│   │       │       const SheetTitle = React.forwardRef<
│   │       │         React.ElementRef<typeof SheetPrimitive.Title>,
│   │       │         React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <SheetPrimitive.Title
│   │       │           ref={ref}
│   │       │           className={cn("text-lg font-semibold text-neutral-950 dark:text-neutral-50", className)}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SheetTitle.displayName = SheetPrimitive.Title.displayName
│   │       │       
│   │       │       const SheetDescription = React.forwardRef<
│   │       │         React.ElementRef<typeof SheetPrimitive.Description>,
│   │       │         React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <SheetPrimitive.Description
│   │       │           ref={ref}
│   │       │           className={cn("text-sm text-neutral-500 dark:text-neutral-400", className)}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SheetDescription.displayName = SheetPrimitive.Description.displayName
│   │       │       
│   │       │       export {
│   │       │         Sheet,
│   │       │         SheetPortal,
│   │       │         SheetOverlay,
│   │       │         SheetTrigger,
│   │       │         SheetClose,
│   │       │         SheetContent,
│   │       │         SheetHeader,
│   │       │         SheetFooter,
│   │       │         SheetTitle,
│   │       │         SheetDescription,
│   │       │       }
│   │       ├── sidebar.tsx
│   │       │       "use client"
│   │       │       
│   │       │       import * as React from "react"
│   │       │       import { Slot } from "@radix-ui/react-slot"
│   │       │       import { VariantProps, cva } from "class-variance-authority"
│   │       │       import { PanelLeft } from "lucide-react"
│   │       │       
│   │       │       import { useIsMobile } from "@/hooks/use-mobile"
│   │       │       import { cn } from "@/lib/utils"
│   │       │       import { Button } from "@/components/ui/button"
│   │       │       import { Input } from "@/components/ui/input"
│   │       │       import { Separator } from "@/components/ui/separator"
│   │       │       import { Sheet, SheetContent } from "@/components/ui/sheet"
│   │       │       import { Skeleton } from "@/components/ui/skeleton"
│   │       │       import {
│   │       │         Tooltip,
│   │       │         TooltipContent,
│   │       │         TooltipProvider,
│   │       │         TooltipTrigger,
│   │       │       } from "@/components/ui/tooltip"
│   │       │       
│   │       │       const SIDEBAR_COOKIE_NAME = "sidebar:state"
│   │       │       const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
│   │       │       const SIDEBAR_WIDTH = "16rem"
│   │       │       const SIDEBAR_WIDTH_MOBILE = "18rem"
│   │       │       const SIDEBAR_WIDTH_ICON = "3rem"
│   │       │       const SIDEBAR_KEYBOARD_SHORTCUT = "b"
│   │       │       
│   │       │       type SidebarContext = {
│   │       │         state: "expanded" | "collapsed"
│   │       │         open: boolean
│   │       │         setOpen: (open: boolean) => void
│   │       │         openMobile: boolean
│   │       │         setOpenMobile: (open: boolean) => void
│   │       │         isMobile: boolean
│   │       │         toggleSidebar: () => void
│   │       │       }
│   │       │       
│   │       │       const SidebarContext = React.createContext<SidebarContext | null>(null)
│   │       │       
│   │       │       function useSidebar() {
│   │       │         const context = React.useContext(SidebarContext)
│   │       │         if (!context) {
│   │       │           throw new Error("useSidebar must be used within a SidebarProvider.")
│   │       │         }
│   │       │       
│   │       │         return context
│   │       │       }
│   │       │       
│   │       │       const SidebarProvider = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div"> & {
│   │       │           defaultOpen?: boolean
│   │       │           open?: boolean
│   │       │           onOpenChange?: (open: boolean) => void
│   │       │         }
│   │       │       >(
│   │       │         (
│   │       │           {
│   │       │             defaultOpen = true,
│   │       │             open: openProp,
│   │       │             onOpenChange: setOpenProp,
│   │       │             className,
│   │       │             style,
│   │       │             children,
│   │       │             ...props
│   │       │           },
│   │       │           ref
│   │       │         ) => {
│   │       │           const isMobile = useIsMobile()
│   │       │           const [openMobile, setOpenMobile] = React.useState(false)
│   │       │       
│   │       │           // This is the internal state of the sidebar.
│   │       │           // We use openProp and setOpenProp for control from outside the component.
│   │       │           const [_open, _setOpen] = React.useState(defaultOpen)
│   │       │           const open = openProp ?? _open
│   │       │           const setOpen = React.useCallback(
│   │       │             (value: boolean | ((value: boolean) => boolean)) => {
│   │       │               const openState = typeof value === "function" ? value(open) : value
│   │       │               if (setOpenProp) {
│   │       │                 setOpenProp(openState)
│   │       │               } else {
│   │       │                 _setOpen(openState)
│   │       │               }
│   │       │       
│   │       │               // This sets the cookie to keep the sidebar state.
│   │       │               document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
│   │       │             },
│   │       │             [setOpenProp, open]
│   │       │           )
│   │       │       
│   │       │           // Helper to toggle the sidebar.
│   │       │           const toggleSidebar = React.useCallback(() => {
│   │       │             return isMobile
│   │       │               ? setOpenMobile((open) => !open)
│   │       │               : setOpen((open) => !open)
│   │       │           }, [isMobile, setOpen, setOpenMobile])
│   │       │       
│   │       │           // Adds a keyboard shortcut to toggle the sidebar.
│   │       │           React.useEffect(() => {
│   │       │             const handleKeyDown = (event: KeyboardEvent) => {
│   │       │               if (
│   │       │                 event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
│   │       │                 (event.metaKey || event.ctrlKey)
│   │       │               ) {
│   │       │                 event.preventDefault()
│   │       │                 toggleSidebar()
│   │       │               }
│   │       │             }
│   │       │       
│   │       │             window.addEventListener("keydown", handleKeyDown)
│   │       │             return () => window.removeEventListener("keydown", handleKeyDown)
│   │       │           }, [toggleSidebar])
│   │       │       
│   │       │           // We add a state so that we can do data-state="expanded" or "collapsed".
│   │       │           // This makes it easier to style the sidebar with Tailwind classes.
│   │       │           const state = open ? "expanded" : "collapsed"
│   │       │       
│   │       │           const contextValue = React.useMemo<SidebarContext>(
│   │       │             () => ({
│   │       │               state,
│   │       │               open,
│   │       │               setOpen,
│   │       │               isMobile,
│   │       │               openMobile,
│   │       │               setOpenMobile,
│   │       │               toggleSidebar,
│   │       │             }),
│   │       │             [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
│   │       │           )
│   │       │       
│   │       │           return (
│   │       │             <SidebarContext.Provider value={contextValue}>
│   │       │               <TooltipProvider delayDuration={0}>
│   │       │                 <div
│   │       │                   style={
│   │       │                     {
│   │       │                       "--sidebar-width": SIDEBAR_WIDTH,
│   │       │                       "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
│   │       │                       ...style,
│   │       │                     } as React.CSSProperties
│   │       │                   }
│   │       │                   className={cn(
│   │       │                     "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
│   │       │                     className
│   │       │                   )}
│   │       │                   ref={ref}
│   │       │                   {...props}
│   │       │                 >
│   │       │                   {children}
│   │       │                 </div>
│   │       │               </TooltipProvider>
│   │       │             </SidebarContext.Provider>
│   │       │           )
│   │       │         }
│   │       │       )
│   │       │       SidebarProvider.displayName = "SidebarProvider"
│   │       │       
│   │       │       const Sidebar = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div"> & {
│   │       │           side?: "left" | "right"
│   │       │           variant?: "sidebar" | "floating" | "inset"
│   │       │           collapsible?: "offcanvas" | "icon" | "none"
│   │       │         }
│   │       │       >(
│   │       │         (
│   │       │           {
│   │       │             side = "left",
│   │       │             variant = "sidebar",
│   │       │             collapsible = "offcanvas",
│   │       │             className,
│   │       │             children,
│   │       │             ...props
│   │       │           },
│   │       │           ref
│   │       │         ) => {
│   │       │           const { isMobile, state, openMobile, setOpenMobile } = useSidebar()
│   │       │       
│   │       │           if (collapsible === "none") {
│   │       │             return (
│   │       │               <div
│   │       │                 className={cn(
│   │       │                   "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
│   │       │                   className
│   │       │                 )}
│   │       │                 ref={ref}
│   │       │                 {...props}
│   │       │               >
│   │       │                 {children}
│   │       │               </div>
│   │       │             )
│   │       │           }
│   │       │       
│   │       │           if (isMobile) {
│   │       │             return (
│   │       │               <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
│   │       │                 <SheetContent
│   │       │                   data-sidebar="sidebar"
│   │       │                   data-mobile="true"
│   │       │                   className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
│   │       │                   style={
│   │       │                     {
│   │       │                       "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
│   │       │                     } as React.CSSProperties
│   │       │                   }
│   │       │                   side={side}
│   │       │                 >
│   │       │                   <div className="flex h-full w-full flex-col">{children}</div>
│   │       │                 </SheetContent>
│   │       │               </Sheet>
│   │       │             )
│   │       │           }
│   │       │       
│   │       │           return (
│   │       │             <div
│   │       │               ref={ref}
│   │       │               className="group peer hidden md:block text-sidebar-foreground"
│   │       │               data-state={state}
│   │       │               data-collapsible={state === "collapsed" ? collapsible : ""}
│   │       │               data-variant={variant}
│   │       │               data-side={side}
│   │       │             >
│   │       │               {/* This is what handles the sidebar gap on desktop */}
│   │       │               <div
│   │       │                 className={cn(
│   │       │                   "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
│   │       │                   "group-data-[collapsible=offcanvas]:w-0",
│   │       │                   "group-data-[side=right]:rotate-180",
│   │       │                   variant === "floating" || variant === "inset"
│   │       │                     ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
│   │       │                     : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
│   │       │                 )}
│   │       │               />
│   │       │               <div
│   │       │                 className={cn(
│   │       │                   "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
│   │       │                   side === "left"
│   │       │                     ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
│   │       │                     : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
│   │       │                   // Adjust the padding for floating and inset variants.
│   │       │                   variant === "floating" || variant === "inset"
│   │       │                     ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
│   │       │                     : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
│   │       │                   className
│   │       │                 )}
│   │       │                 {...props}
│   │       │               >
│   │       │                 <div
│   │       │                   data-sidebar="sidebar"
│   │       │                   className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
│   │       │                 >
│   │       │                   {children}
│   │       │                 </div>
│   │       │               </div>
│   │       │             </div>
│   │       │           )
│   │       │         }
│   │       │       )
│   │       │       Sidebar.displayName = "Sidebar"
│   │       │       
│   │       │       const SidebarTrigger = React.forwardRef<
│   │       │         React.ElementRef<typeof Button>,
│   │       │         React.ComponentProps<typeof Button>
│   │       │       >(({ className, onClick, ...props }, ref) => {
│   │       │         const { toggleSidebar } = useSidebar()
│   │       │       
│   │       │         return (
│   │       │           <Button
│   │       │             ref={ref}
│   │       │             data-sidebar="trigger"
│   │       │             variant="ghost"
│   │       │             size="icon"
│   │       │             className={cn("h-7 w-7", className)}
│   │       │             onClick={(event) => {
│   │       │               onClick?.(event)
│   │       │               toggleSidebar()
│   │       │             }}
│   │       │             {...props}
│   │       │           >
│   │       │             <PanelLeft />
│   │       │             <span className="sr-only">Toggle Sidebar</span>
│   │       │           </Button>
│   │       │         )
│   │       │       })
│   │       │       SidebarTrigger.displayName = "SidebarTrigger"
│   │       │       
│   │       │       const SidebarRail = React.forwardRef<
│   │       │         HTMLButtonElement,
│   │       │         React.ComponentProps<"button">
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         const { toggleSidebar } = useSidebar()
│   │       │       
│   │       │         return (
│   │       │           <button
│   │       │             ref={ref}
│   │       │             data-sidebar="rail"
│   │       │             aria-label="Toggle Sidebar"
│   │       │             tabIndex={-1}
│   │       │             onClick={toggleSidebar}
│   │       │             title="Toggle Sidebar"
│   │       │             className={cn(
│   │       │               "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
│   │       │               "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
│   │       │               "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
│   │       │               "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
│   │       │               "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
│   │       │               "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarRail.displayName = "SidebarRail"
│   │       │       
│   │       │       const SidebarInset = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"main">
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         return (
│   │       │           <main
│   │       │             ref={ref}
│   │       │             className={cn(
│   │       │               "relative flex min-h-svh flex-1 flex-col bg-white dark:bg-neutral-950",
│   │       │               "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarInset.displayName = "SidebarInset"
│   │       │       
│   │       │       const SidebarInput = React.forwardRef<
│   │       │         React.ElementRef<typeof Input>,
│   │       │         React.ComponentProps<typeof Input>
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         return (
│   │       │           <Input
│   │       │             ref={ref}
│   │       │             data-sidebar="input"
│   │       │             className={cn(
│   │       │               "h-8 w-full bg-white shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring dark:bg-neutral-950",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarInput.displayName = "SidebarInput"
│   │       │       
│   │       │       const SidebarHeader = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div">
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         return (
│   │       │           <div
│   │       │             ref={ref}
│   │       │             data-sidebar="header"
│   │       │             className={cn("flex flex-col gap-2 p-2", className)}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarHeader.displayName = "SidebarHeader"
│   │       │       
│   │       │       const SidebarFooter = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div">
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         return (
│   │       │           <div
│   │       │             ref={ref}
│   │       │             data-sidebar="footer"
│   │       │             className={cn("flex flex-col gap-2 p-2", className)}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarFooter.displayName = "SidebarFooter"
│   │       │       
│   │       │       const SidebarSeparator = React.forwardRef<
│   │       │         React.ElementRef<typeof Separator>,
│   │       │         React.ComponentProps<typeof Separator>
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         return (
│   │       │           <Separator
│   │       │             ref={ref}
│   │       │             data-sidebar="separator"
│   │       │             className={cn("mx-2 w-auto bg-sidebar-border", className)}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarSeparator.displayName = "SidebarSeparator"
│   │       │       
│   │       │       const SidebarContent = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div">
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         return (
│   │       │           <div
│   │       │             ref={ref}
│   │       │             data-sidebar="content"
│   │       │             className={cn(
│   │       │               "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarContent.displayName = "SidebarContent"
│   │       │       
│   │       │       const SidebarGroup = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div">
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         return (
│   │       │           <div
│   │       │             ref={ref}
│   │       │             data-sidebar="group"
│   │       │             className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarGroup.displayName = "SidebarGroup"
│   │       │       
│   │       │       const SidebarGroupLabel = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div"> & { asChild?: boolean }
│   │       │       >(({ className, asChild = false, ...props }, ref) => {
│   │       │         const Comp = asChild ? Slot : "div"
│   │       │       
│   │       │         return (
│   │       │           <Comp
│   │       │             ref={ref}
│   │       │             data-sidebar="group-label"
│   │       │             className={cn(
│   │       │               "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
│   │       │               "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarGroupLabel.displayName = "SidebarGroupLabel"
│   │       │       
│   │       │       const SidebarGroupAction = React.forwardRef<
│   │       │         HTMLButtonElement,
│   │       │         React.ComponentProps<"button"> & { asChild?: boolean }
│   │       │       >(({ className, asChild = false, ...props }, ref) => {
│   │       │         const Comp = asChild ? Slot : "button"
│   │       │       
│   │       │         return (
│   │       │           <Comp
│   │       │             ref={ref}
│   │       │             data-sidebar="group-action"
│   │       │             className={cn(
│   │       │               "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
│   │       │               // Increases the hit area of the button on mobile.
│   │       │               "after:absolute after:-inset-2 after:md:hidden",
│   │       │               "group-data-[collapsible=icon]:hidden",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarGroupAction.displayName = "SidebarGroupAction"
│   │       │       
│   │       │       const SidebarGroupContent = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div">
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <div
│   │       │           ref={ref}
│   │       │           data-sidebar="group-content"
│   │       │           className={cn("w-full text-sm", className)}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SidebarGroupContent.displayName = "SidebarGroupContent"
│   │       │       
│   │       │       const SidebarMenu = React.forwardRef<
│   │       │         HTMLUListElement,
│   │       │         React.ComponentProps<"ul">
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <ul
│   │       │           ref={ref}
│   │       │           data-sidebar="menu"
│   │       │           className={cn("flex w-full min-w-0 flex-col gap-1", className)}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SidebarMenu.displayName = "SidebarMenu"
│   │       │       
│   │       │       const SidebarMenuItem = React.forwardRef<
│   │       │         HTMLLIElement,
│   │       │         React.ComponentProps<"li">
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <li
│   │       │           ref={ref}
│   │       │           data-sidebar="menu-item"
│   │       │           className={cn("group/menu-item relative", className)}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SidebarMenuItem.displayName = "SidebarMenuItem"
│   │       │       
│   │       │       const sidebarMenuButtonVariants = cva(
│   │       │         "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
│   │       │         {
│   │       │           variants: {
│   │       │             variant: {
│   │       │               default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
│   │       │               outline:
│   │       │                 "bg-white shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))] dark:bg-neutral-950",
│   │       │             },
│   │       │             size: {
│   │       │               default: "h-8 text-sm",
│   │       │               sm: "h-7 text-xs",
│   │       │               lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
│   │       │             },
│   │       │           },
│   │       │           defaultVariants: {
│   │       │             variant: "default",
│   │       │             size: "default",
│   │       │           },
│   │       │         }
│   │       │       )
│   │       │       
│   │       │       const SidebarMenuButton = React.forwardRef<
│   │       │         HTMLButtonElement,
│   │       │         React.ComponentProps<"button"> & {
│   │       │           asChild?: boolean
│   │       │           isActive?: boolean
│   │       │           tooltip?: string | React.ComponentProps<typeof TooltipContent>
│   │       │         } & VariantProps<typeof sidebarMenuButtonVariants>
│   │       │       >(
│   │       │         (
│   │       │           {
│   │       │             asChild = false,
│   │       │             isActive = false,
│   │       │             variant = "default",
│   │       │             size = "default",
│   │       │             tooltip,
│   │       │             className,
│   │       │             ...props
│   │       │           },
│   │       │           ref
│   │       │         ) => {
│   │       │           const Comp = asChild ? Slot : "button"
│   │       │           const { isMobile, state } = useSidebar()
│   │       │       
│   │       │           const button = (
│   │       │             <Comp
│   │       │               ref={ref}
│   │       │               data-sidebar="menu-button"
│   │       │               data-size={size}
│   │       │               data-active={isActive}
│   │       │               className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
│   │       │               {...props}
│   │       │             />
│   │       │           )
│   │       │       
│   │       │           if (!tooltip) {
│   │       │             return button
│   │       │           }
│   │       │       
│   │       │           if (typeof tooltip === "string") {
│   │       │             tooltip = {
│   │       │               children: tooltip,
│   │       │             }
│   │       │           }
│   │       │       
│   │       │           return (
│   │       │             <Tooltip>
│   │       │               <TooltipTrigger asChild>{button}</TooltipTrigger>
│   │       │               <TooltipContent
│   │       │                 side="right"
│   │       │                 align="center"
│   │       │                 hidden={state !== "collapsed" || isMobile}
│   │       │                 {...tooltip}
│   │       │               />
│   │       │             </Tooltip>
│   │       │           )
│   │       │         }
│   │       │       )
│   │       │       SidebarMenuButton.displayName = "SidebarMenuButton"
│   │       │       
│   │       │       const SidebarMenuAction = React.forwardRef<
│   │       │         HTMLButtonElement,
│   │       │         React.ComponentProps<"button"> & {
│   │       │           asChild?: boolean
│   │       │           showOnHover?: boolean
│   │       │         }
│   │       │       >(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
│   │       │         const Comp = asChild ? Slot : "button"
│   │       │       
│   │       │         return (
│   │       │           <Comp
│   │       │             ref={ref}
│   │       │             data-sidebar="menu-action"
│   │       │             className={cn(
│   │       │               "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
│   │       │               // Increases the hit area of the button on mobile.
│   │       │               "after:absolute after:-inset-2 after:md:hidden",
│   │       │               "peer-data-[size=sm]/menu-button:top-1",
│   │       │               "peer-data-[size=default]/menu-button:top-1.5",
│   │       │               "peer-data-[size=lg]/menu-button:top-2.5",
│   │       │               "group-data-[collapsible=icon]:hidden",
│   │       │               showOnHover &&
│   │       │                 "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarMenuAction.displayName = "SidebarMenuAction"
│   │       │       
│   │       │       const SidebarMenuBadge = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div">
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <div
│   │       │           ref={ref}
│   │       │           data-sidebar="menu-badge"
│   │       │           className={cn(
│   │       │             "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
│   │       │             "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
│   │       │             "peer-data-[size=sm]/menu-button:top-1",
│   │       │             "peer-data-[size=default]/menu-button:top-1.5",
│   │       │             "peer-data-[size=lg]/menu-button:top-2.5",
│   │       │             "group-data-[collapsible=icon]:hidden",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SidebarMenuBadge.displayName = "SidebarMenuBadge"
│   │       │       
│   │       │       const SidebarMenuSkeleton = React.forwardRef<
│   │       │         HTMLDivElement,
│   │       │         React.ComponentProps<"div"> & {
│   │       │           showIcon?: boolean
│   │       │         }
│   │       │       >(({ className, showIcon = false, ...props }, ref) => {
│   │       │         // Random width between 50 to 90%.
│   │       │         const width = React.useMemo(() => {
│   │       │           return `${Math.floor(Math.random() * 40) + 50}%`
│   │       │         }, [])
│   │       │       
│   │       │         return (
│   │       │           <div
│   │       │             ref={ref}
│   │       │             data-sidebar="menu-skeleton"
│   │       │             className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
│   │       │             {...props}
│   │       │           >
│   │       │             {showIcon && (
│   │       │               <Skeleton
│   │       │                 className="size-4 rounded-md"
│   │       │                 data-sidebar="menu-skeleton-icon"
│   │       │               />
│   │       │             )}
│   │       │             <Skeleton
│   │       │               className="h-4 flex-1 max-w-[--skeleton-width]"
│   │       │               data-sidebar="menu-skeleton-text"
│   │       │               style={
│   │       │                 {
│   │       │                   "--skeleton-width": width,
│   │       │                 } as React.CSSProperties
│   │       │               }
│   │       │             />
│   │       │           </div>
│   │       │         )
│   │       │       })
│   │       │       SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"
│   │       │       
│   │       │       const SidebarMenuSub = React.forwardRef<
│   │       │         HTMLUListElement,
│   │       │         React.ComponentProps<"ul">
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <ul
│   │       │           ref={ref}
│   │       │           data-sidebar="menu-sub"
│   │       │           className={cn(
│   │       │             "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
│   │       │             "group-data-[collapsible=icon]:hidden",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │         />
│   │       │       ))
│   │       │       SidebarMenuSub.displayName = "SidebarMenuSub"
│   │       │       
│   │       │       const SidebarMenuSubItem = React.forwardRef<
│   │       │         HTMLLIElement,
│   │       │         React.ComponentProps<"li">
│   │       │       >(({ ...props }, ref) => <li ref={ref} {...props} />)
│   │       │       SidebarMenuSubItem.displayName = "SidebarMenuSubItem"
│   │       │       
│   │       │       const SidebarMenuSubButton = React.forwardRef<
│   │       │         HTMLAnchorElement,
│   │       │         React.ComponentProps<"a"> & {
│   │       │           asChild?: boolean
│   │       │           size?: "sm" | "md"
│   │       │           isActive?: boolean
│   │       │         }
│   │       │       >(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
│   │       │         const Comp = asChild ? Slot : "a"
│   │       │       
│   │       │         return (
│   │       │           <Comp
│   │       │             ref={ref}
│   │       │             data-sidebar="menu-sub-button"
│   │       │             data-size={size}
│   │       │             data-active={isActive}
│   │       │             className={cn(
│   │       │               "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
│   │       │               "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
│   │       │               size === "sm" && "text-xs",
│   │       │               size === "md" && "text-sm",
│   │       │               "group-data-[collapsible=icon]:hidden",
│   │       │               className
│   │       │             )}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       SidebarMenuSubButton.displayName = "SidebarMenuSubButton"
│   │       │       
│   │       │       export {
│   │       │         Sidebar,
│   │       │         SidebarContent,
│   │       │         SidebarFooter,
│   │       │         SidebarGroup,
│   │       │         SidebarGroupAction,
│   │       │         SidebarGroupContent,
│   │       │         SidebarGroupLabel,
│   │       │         SidebarHeader,
│   │       │         SidebarInput,
│   │       │         SidebarInset,
│   │       │         SidebarMenu,
│   │       │         SidebarMenuAction,
│   │       │         SidebarMenuBadge,
│   │       │         SidebarMenuButton,
│   │       │         SidebarMenuItem,
│   │       │         SidebarMenuSkeleton,
│   │       │         SidebarMenuSub,
│   │       │         SidebarMenuSubButton,
│   │       │         SidebarMenuSubItem,
│   │       │         SidebarProvider,
│   │       │         SidebarRail,
│   │       │         SidebarSeparator,
│   │       │         SidebarTrigger,
│   │       │         useSidebar,
│   │       │       }
│   │       ├── skeleton.tsx
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       function Skeleton({
│   │       │         className,
│   │       │         ...props
│   │       │       }: React.HTMLAttributes<HTMLDivElement>) {
│   │       │         return (
│   │       │           <div
│   │       │             className={cn("animate-pulse rounded-md bg-neutral-100 dark:bg-neutral-800", className)}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       }
│   │       │       
│   │       │       export { Skeleton }
│   │       ├── switch.tsx
│   │       │       "use client"
│   │       │       
│   │       │       import * as React from "react"
│   │       │       import * as SwitchPrimitives from "@radix-ui/react-switch"
│   │       │       
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       const Switch = React.forwardRef<
│   │       │         React.ElementRef<typeof SwitchPrimitives.Root>,
│   │       │         React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
│   │       │       >(({ className, ...props }, ref) => (
│   │       │         <SwitchPrimitives.Root
│   │       │           className={cn(
│   │       │             "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 focus-visible:ring-offset-white disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-neutral-900 data-[state=unchecked]:bg-neutral-200 dark:focus-visible:ring-neutral-300 dark:focus-visible:ring-offset-neutral-950 dark:data-[state=checked]:bg-neutral-50 dark:data-[state=unchecked]:bg-neutral-800",
│   │       │             className
│   │       │           )}
│   │       │           {...props}
│   │       │           ref={ref}
│   │       │         >
│   │       │           <SwitchPrimitives.Thumb
│   │       │             className={cn(
│   │       │               "pointer-events-none block h-5 w-5 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0 dark:bg-neutral-950"
│   │       │             )}
│   │       │           />
│   │       │         </SwitchPrimitives.Root>
│   │       │       ))
│   │       │       Switch.displayName = SwitchPrimitives.Root.displayName
│   │       │       
│   │       │       export { Switch }
│   │       ├── textarea.tsx
│   │       │       import * as React from "react"
│   │       │       
│   │       │       import { cn } from "@/lib/utils"
│   │       │       
│   │       │       const Textarea = React.forwardRef<
│   │       │         HTMLTextAreaElement,
│   │       │         React.ComponentProps<"textarea">
│   │       │       >(({ className, ...props }, ref) => {
│   │       │         return (
│   │       │           <textarea
│   │       │             className={cn(
│   │       │               "flex min-h-[80px] w-full rounded-md border border-neutral-200 bg-white px-3 py-2 text-base ring-offset-white placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-neutral-800 dark:bg-neutral-950 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300",
│   │       │               className
│   │       │             )}
│   │       │             ref={ref}
│   │       │             {...props}
│   │       │           />
│   │       │         )
│   │       │       })
│   │       │       Textarea.displayName = "Textarea"
│   │       │       
│   │       │       export { Textarea }
│   │       └── tooltip.tsx
│   │               "use client"
│   │               
│   │               import * as React from "react"
│   │               import * as TooltipPrimitive from "@radix-ui/react-tooltip"
│   │               
│   │               import { cn } from "@/lib/utils"
│   │               
│   │               const TooltipProvider = TooltipPrimitive.Provider
│   │               
│   │               const Tooltip = TooltipPrimitive.Root
│   │               
│   │               const TooltipTrigger = TooltipPrimitive.Trigger
│   │               
│   │               const TooltipContent = React.forwardRef<
│   │                 React.ElementRef<typeof TooltipPrimitive.Content>,
│   │                 React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
│   │               >(({ className, sideOffset = 4, ...props }, ref) => (
│   │                 <TooltipPrimitive.Content
│   │                   ref={ref}
│   │                   sideOffset={sideOffset}
│   │                   className={cn(
│   │                     "z-50 overflow-hidden rounded-md border border-neutral-200 bg-white px-3 py-1.5 text-sm text-neutral-950 shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50",
│   │                     className
│   │                   )}
│   │                   {...props}
│   │                 />
│   │               ))
│   │               TooltipContent.displayName = TooltipPrimitive.Content.displayName
│   │               
│   │               export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
│   ├── constants/
│   │   ├── config.ts
│   │   │       // src/constants/config.ts
│   │   │       
│   │   │       export const TIME_FORMATS = {
│   │   │           DISPLAY: 'HH:mm',
│   │   │           INPUT: 'HH:mm',
│   │   │         } as const;
│   │   │         
│   │   │         export const DATE_FORMATS = {
│   │   │           DISPLAY: 'DD/MM/YYYY',
│   │   │           INPUT: 'YYYY-MM-DD',
│   │   │         } as const;
│   │   │         
│   │   ├── forms/
│   │   │   ├── index.ts
│   │   │   │       export * from './initialData';
│   │   │   │       export * from './validation';
│   │   │   ├── initialData.ts
│   │   │   │       // src/constants/forms/initialData.ts
│   │   │   │       export const INITIAL_FORM_DATA = {
│   │   │   │           project: {
│   │   │   │             name: '',
│   │   │   │             description: '',
│   │   │   │             startDate: '',
│   │   │   │             dueDate: '',
│   │   │   │             status: 'not-started',
│   │   │   │             estimatedHours: ''
│   │   │   │           },
│   │   │   │           // Add other form initial states
│   │   │   │         } as const;
│   │   │   │         
│   │   │   │         
│   │   │   └── validation.ts
│   │   │           // src/constants/forms/validation.ts
│   │   │           export const VALIDATION_MESSAGES = {
│   │   │               required: (field: string) => `${field} is required`,
│   │   │               invalidDate: 'Invalid date format',
│   │   │               dateRange: 'End date must be after start date',
│   │   │               // Add other common validation messages
│   │   │             } as const;
│   │   ├── index.ts
│   │   │       // src/constants/index.ts
│   │   │       
│   │   │       export * from './status';
│   │   │       export * from './priorities';
│   │   │       export * from './config';
│   │   │       export * from './forms';
│   │   ├── priorities.ts
│   │   │       // src/constants/priorities.ts
│   │   │       
│   │   │       export const PRIORITIES = {
│   │   │         LOW: 'low',
│   │   │         MEDIUM: 'medium',
│   │   │         HIGH: 'high',
│   │   │       } as const;
│   │   └── status.ts
│   │           // src/constants/status.ts
│   │           
│   │           export const PROJECT_STATUS = {
│   │               NOT_STARTED: 'not-started',
│   │               ACTIVE: 'active',
│   │               IN_PROGRESS: 'in-progress',
│   │               COMPLETED: 'completed',
│   │               ON_HOLD: 'on-hold',
│   │               CANCELLED: 'cancelled'
│   │             } as const;
│   │             
│   │             export const TASK_STATUS = {
│   │               TODO: 'todo',
│   │               IN_PROGRESS: 'in-progress',
│   │               DONE: 'done',
│   │             } as const;
│   │             
│   │             export const TODOLIST_STATUS = {
│   │               ACTIVE: 'active',
│   │               ARCHIVED: 'archived',
│   │             } as const;
│   │             
│   ├── hooks/
│   │   ├── forms/
│   │   │   ├── index.ts
│   │   │   │       export * from './useFields';
│   │   │   │       export * from './useForm';
│   │   │   ├── useFields.ts
│   │   │   │       // src/hooks/forms/useField.ts
│   │   │   │       import { useCallback } from 'react';
│   │   │   │       import type { FieldConfig, FieldValue } from '@/types/forms/fields';
│   │   │   │       
│   │   │   │       interface UseFieldProps<T extends FieldConfig> {
│   │   │   │         field: T;
│   │   │   │         value: FieldValue<T>;
│   │   │   │         onChange: (name: string, value: any) => void;
│   │   │   │         onBlur?: (name: string) => void;
│   │   │   │         validate?: (value: any) => string | undefined;
│   │   │   │       }
│   │   │   │       
│   │   │   │       interface UseFieldReturn<T extends FieldConfig> {
│   │   │   │         inputProps: {
│   │   │   │           name: string;
│   │   │   │           value: FieldValue<T>;
│   │   │   │           onChange: (event: React.ChangeEvent<any>) => void;
│   │   │   │           onBlur: (event: React.FocusEvent<any>) => void;
│   │   │   │           required?: boolean;
│   │   │   │           disabled?: boolean;
│   │   │   │           placeholder?: string;
│   │   │   │           className?: string;
│   │   │   │         };
│   │   │   │         handleChange: (value: FieldValue<T>) => void;
│   │   │   │         handleBlur: () => void;
│   │   │   │       }
│   │   │   │       
│   │   │   │       export function useField<T extends FieldConfig>({
│   │   │   │         field,
│   │   │   │         value,
│   │   │   │         onChange,
│   │   │   │         onBlur,
│   │   │   │         validate,
│   │   │   │       }: UseFieldProps<T>): UseFieldReturn<T> {
│   │   │   │         const handleChange = useCallback((newValue: FieldValue<T>) => {
│   │   │   │           onChange(field.name, newValue);
│   │   │   │         }, [field.name, onChange]);
│   │   │   │       
│   │   │   │         const handleChangeEvent = useCallback((event: React.ChangeEvent<any>) => {
│   │   │   │           const value = event.target.value;
│   │   │   │           handleChange(value as FieldValue<T>);
│   │   │   │         }, [handleChange]);
│   │   │   │       
│   │   │   │         const handleBlur = useCallback(() => {
│   │   │   │           if (onBlur) {
│   │   │   │             onBlur(field.name);
│   │   │   │           }
│   │   │   │         }, [field.name, onBlur]);
│   │   │   │       
│   │   │   │         return {
│   │   │   │           inputProps: {
│   │   │   │             name: field.name,
│   │   │   │             value: value ?? '',
│   │   │   │             onChange: handleChangeEvent,
│   │   │   │             onBlur: handleBlur,
│   │   │   │             required: field.required,
│   │   │   │             disabled: field.disabled,
│   │   │   │             placeholder: field.placeholder,
│   │   │   │             className: field.className,
│   │   │   │           },
│   │   │   │           handleChange,
│   │   │   │           handleBlur,
│   │   │   │         };
│   │   │   │       }
│   │   │   └── useForm.ts
│   │   │           // src/hooks/forms/useForm.ts
│   │   │           import { useState, useCallback } from 'react';
│   │   │           import type { FieldValue, FieldConfig } from '@/types/forms/fields';
│   │   │           
│   │   │           interface FormState<T> {
│   │   │             values: T;
│   │   │             errors: Record<string, string>;
│   │   │             touched: Record<keyof T, boolean>;
│   │   │             isSubmitting: boolean;
│   │   │             isDirty: boolean;
│   │   │           }
│   │   │           
│   │   │           interface UseFormOptions<T> {
│   │   │             initialValues: T;
│   │   │             onSubmit: (values: T) => Promise<void>;
│   │   │             validate?: (values: T) => Record<string, string>;
│   │   │             validateOnChange?: boolean;
│   │   │             validateOnBlur?: boolean;
│   │   │           }
│   │   │           
│   │   │           interface UseFormReturn<T> {
│   │   │             // Form state
│   │   │             values: T;
│   │   │             errors: Record<string, string>;
│   │   │             touched: Record<keyof T, boolean>;
│   │   │             isSubmitting: boolean;
│   │   │             isDirty: boolean;
│   │   │             isValid: boolean;
│   │   │           
│   │   │             // Event handlers
│   │   │             handleChange: (name: string, value: any) => void;
│   │   │             handleBlur: (name: string) => void;
│   │   │             handleSubmit: (e: React.FormEvent) => Promise<void>;
│   │   │           
│   │   │             // Field helpers
│   │   │             setFieldValue: (field: keyof T, value: any) => void;
│   │   │             setFieldError: (field: keyof T, error: string) => void;
│   │   │             setFieldTouched: (field: keyof T, isTouched?: boolean) => void;
│   │   │           
│   │   │             // Form helpers
│   │   │             resetForm: () => void;
│   │   │             validateForm: () => Promise<Record<string, string>>;
│   │   │             validateField: (field: keyof T) => Promise<string | undefined>;
│   │   │             setValues: (values: T) => void;
│   │   │             setErrors: (errors: Record<string, string>) => void;
│   │   │             setTouched: (touched: Record<keyof T, boolean>) => void;
│   │   │           }
│   │   │           
│   │   │           export function useForm<T extends Record<string, any>>({
│   │   │             initialValues,
│   │   │             onSubmit,
│   │   │             validate,
│   │   │             validateOnChange = false,
│   │   │             validateOnBlur = true,
│   │   │           }: UseFormOptions<T>): UseFormReturn<T> {
│   │   │             const [formState, setFormState] = useState<FormState<T>>({
│   │   │               values: initialValues,
│   │   │               errors: {},
│   │   │               touched: {} as Record<keyof T, boolean>,
│   │   │               isSubmitting: false,
│   │   │               isDirty: false,
│   │   │             });
│   │   │           
│   │   │             const setValues = useCallback((values: T) => {
│   │   │               setFormState(prev => ({
│   │   │                 ...prev,
│   │   │                 values,
│   │   │                 isDirty: true,
│   │   │               }));
│   │   │             }, []);
│   │   │           
│   │   │             const setErrors = useCallback((errors: Record<string, string>) => {
│   │   │               setFormState(prev => ({
│   │   │                 ...prev,
│   │   │                 errors,
│   │   │               }));
│   │   │             }, []);
│   │   │           
│   │   │             const setTouched = useCallback((touched: Record<keyof T, boolean>) => {
│   │   │               setFormState(prev => ({
│   │   │                 ...prev,
│   │   │                 touched,
│   │   │               }));
│   │   │             }, []);
│   │   │           
│   │   │             const validateField = useCallback(async (field: keyof T): Promise<string | undefined> => {
│   │   │               if (!validate) return;
│   │   │               
│   │   │               const errors = await validate(formState.values);
│   │   │               return errors[field as string];
│   │   │             }, [validate, formState.values]);
│   │   │           
│   │   │             const validateForm = useCallback(async (): Promise<Record<string, string>> => {
│   │   │               if (!validate) return {};
│   │   │               
│   │   │               const errors = await validate(formState.values);
│   │   │               setErrors(errors);
│   │   │               return errors;
│   │   │             }, [validate, formState.values, setErrors]);
│   │   │           
│   │   │             const setFieldValue = useCallback((field: keyof T, value: any) => {
│   │   │               setFormState(prev => ({
│   │   │                 ...prev,
│   │   │                 values: { ...prev.values, [field]: value },
│   │   │                 isDirty: true,
│   │   │               }));
│   │   │           
│   │   │               if (validateOnChange) {
│   │   │                 validateField(field);
│   │   │               }
│   │   │             }, [validateOnChange, validateField]);
│   │   │           
│   │   │             const setFieldError = useCallback((field: keyof T, error: string) => {
│   │   │               setFormState(prev => ({
│   │   │                 ...prev,
│   │   │                 errors: { ...prev.errors, [field]: error },
│   │   │               }));
│   │   │             }, []);
│   │   │           
│   │   │             const setFieldTouched = useCallback((field: keyof T, isTouched = true) => {
│   │   │               setFormState(prev => ({
│   │   │                 ...prev,
│   │   │                 touched: { ...prev.touched, [field]: isTouched },
│   │   │               }));
│   │   │             }, []);
│   │   │           
│   │   │             const handleChange = useCallback((name: string, value: any) => {
│   │   │               setFieldValue(name as keyof T, value);
│   │   │             }, [setFieldValue]);
│   │   │           
│   │   │             const handleBlur = useCallback((name: string) => {
│   │   │               setFieldTouched(name as keyof T, true);
│   │   │               
│   │   │               if (validateOnBlur) {
│   │   │                 validateField(name as keyof T);
│   │   │               }
│   │   │             }, [validateOnBlur, validateField, setFieldTouched]);
│   │   │           
│   │   │             const resetForm = useCallback(() => {
│   │   │               setFormState({
│   │   │                 values: initialValues,
│   │   │                 errors: {},
│   │   │                 touched: {} as Record<keyof T, boolean>,
│   │   │                 isSubmitting: false,
│   │   │                 isDirty: false,
│   │   │               });
│   │   │             }, [initialValues]);
│   │   │           
│   │   │             const handleSubmit = useCallback(async (e: React.FormEvent) => {
│   │   │               e.preventDefault();
│   │   │               setFormState(prev => ({ ...prev, isSubmitting: true }));
│   │   │           
│   │   │               try {
│   │   │                 // Validate all fields
│   │   │                 const errors = await validateForm();
│   │   │                 
│   │   │                 if (Object.keys(errors).length === 0) {
│   │   │                   await onSubmit(formState.values);
│   │   │                   resetForm();
│   │   │                 }
│   │   │               } catch (error) {
│   │   │                 setFieldError('submit' as keyof T, error instanceof Error ? error.message : 'An error occurred');
│   │   │               } finally {
│   │   │                 setFormState(prev => ({ ...prev, isSubmitting: false }));
│   │   │               }
│   │   │             }, [formState.values, onSubmit, validateForm, resetForm, setFieldError]);
│   │   │           
│   │   │             const isValid = Object.keys(formState.errors).length === 0;
│   │   │           
│   │   │             return {
│   │   │               // Form state
│   │   │               ...formState,
│   │   │               isValid,
│   │   │           
│   │   │               // Event handlers
│   │   │               handleChange,
│   │   │               handleBlur,
│   │   │               handleSubmit,
│   │   │           
│   │   │               // Field helpers
│   │   │               setFieldValue,
│   │   │               setFieldError,
│   │   │               setFieldTouched,
│   │   │           
│   │   │               // Form helpers
│   │   │               resetForm,
│   │   │               validateForm,
│   │   │               validateField,
│   │   │               setValues,
│   │   │               setErrors,
│   │   │               setTouched,
│   │   │             };
│   │   │           }
│   │   ├── index.ts
│   │   │       // src/hooks/index.ts
│   │   │       export * from './useProjects';
│   │   │       export * from './useObjectives';
│   │   │       export * from './useTasks';
│   │   │       export * from './useTodoLists';
│   │   │       export * from './useTimeEntries';
│   │   │       export * from './forms';
│   │   ├── use-mobile.tsx
│   │   │       import * as React from "react"
│   │   │       
│   │   │       const MOBILE_BREAKPOINT = 768
│   │   │       
│   │   │       export function useIsMobile() {
│   │   │         const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
│   │   │       
│   │   │         React.useEffect(() => {
│   │   │           const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
│   │   │           const onChange = () => {
│   │   │             setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
│   │   │           }
│   │   │           mql.addEventListener("change", onChange)
│   │   │           setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
│   │   │           return () => mql.removeEventListener("change", onChange)
│   │   │         }, [])
│   │   │       
│   │   │         return !!isMobile
│   │   │       }
│   │   ├── useObjectives.ts
│   │   │       // src/hooks/useObjectives.ts
│   │   │       import { useState, useEffect, useCallback } from 'react';
│   │   │       import type { Objective, ObjectiveFormData } from '@/types';
│   │   │       import { objectivesApi } from '@/lib/api/objectives';
│   │   │       
│   │   │       interface UseObjectivesReturn {
│   │   │         objectives: Objective[];
│   │   │         loading: boolean;
│   │   │         error: Error | null;
│   │   │         fetchObjectives: () => Promise<void>;
│   │   │         createObjective: (data: ObjectiveFormData) => Promise<void>;
│   │   │         refresh: () => Promise<void>;
│   │   │       }
│   │   │       
│   │   │       export const useObjectives = (): UseObjectivesReturn => {
│   │   │         const [objectives, setObjectives] = useState<Objective[]>([]);
│   │   │         const [loading, setLoading] = useState<boolean>(true);
│   │   │         const [error, setError] = useState<Error | null>(null);
│   │   │       
│   │   │         const fetchObjectives = useCallback(async () => {
│   │   │           setLoading(true);
│   │   │           setError(null);
│   │   │           try {
│   │   │             const fetchedObjectives = await objectivesApi.getObjectives();
│   │   │             setObjectives(fetchedObjectives);
│   │   │           } catch (err: any) {
│   │   │             setError(err);
│   │   │           } finally {
│   │   │             setLoading(false);
│   │   │           }
│   │   │         }, []);
│   │   │       
│   │   │         const createObjective = useCallback(async (data: ObjectiveFormData) => {
│   │   │           setLoading(true);
│   │   │           try {
│   │   │             const newObjective = await objectivesApi.createObjective(data);
│   │   │             setObjectives(prev => [...prev, newObjective]);
│   │   │             setError(null);
│   │   │           } catch (err) {
│   │   │             setError(err as Error);
│   │   │           } finally {
│   │   │             setLoading(false);
│   │   │           }
│   │   │         }, []);
│   │   │       
│   │   │         const refresh = useCallback(async () => {
│   │   │           await fetchObjectives();
│   │   │         }, [fetchObjectives]);
│   │   │       
│   │   │         useEffect(() => {
│   │   │           fetchObjectives();
│   │   │         }, [fetchObjectives]);
│   │   │       
│   │   │         return { objectives, loading, error, fetchObjectives, createObjective, refresh };
│   │   │       };
│   │   ├── useProjects.ts
│   │   │       // src/hooks/useProjects.ts
│   │   │       import { useState, useEffect, useCallback } from 'react';
│   │   │       import type { Project, ProjectFormData } from '@/types';
│   │   │       import { projectsApi } from '@/lib/api/projects';
│   │   │       
│   │   │       interface UseProjectsReturn {
│   │   │         projects: Project[];
│   │   │         loading: boolean;
│   │   │         error: Error | null;
│   │   │         fetchProjects: () => Promise<void>;
│   │   │         createProject: (data: ProjectFormData) => Promise<void>;
│   │   │         refresh: () => Promise<void>;
│   │   │       }
│   │   │       
│   │   │       export function useProjects(): UseProjectsReturn {
│   │   │         const [projects, setProjects] = useState<Project[]>([]);
│   │   │         const [loading, setLoading] = useState<boolean>(false);
│   │   │         const [error, setError] = useState<Error | null>(null);
│   │   │       
│   │   │         const fetchProjects = useCallback(async () => {
│   │   │           setLoading(true);
│   │   │           try {
│   │   │             const data = await projectsApi.getProjects();
│   │   │             setProjects(data);
│   │   │             setError(null);
│   │   │           } catch (err) {
│   │   │             setError(err as Error);
│   │   │           } finally {
│   │   │             setLoading(false);
│   │   │           }
│   │   │         }, []);
│   │   │       
│   │   │         const createProject = useCallback(async (data: ProjectFormData) => {
│   │   │           setLoading(true);
│   │   │           try {
│   │   │             const newProject = await projectsApi.createProject(data);
│   │   │             setProjects(prev => [...prev, newProject]);
│   │   │             setError(null);
│   │   │           } catch (err) {
│   │   │             setError(err as Error);
│   │   │           } finally {
│   │   │             setLoading(false);
│   │   │           }
│   │   │         }, []);
│   │   │       
│   │   │         const refresh = useCallback(async () => {
│   │   │           await fetchProjects();
│   │   │         }, [fetchProjects]);
│   │   │       
│   │   │         useEffect(() => {
│   │   │           fetchProjects();
│   │   │         }, [fetchProjects]);
│   │   │       
│   │   │         return { projects, loading, error, fetchProjects, createProject, refresh };
│   │   │       }
│   │   ├── useTasks.ts
│   │   │       // src/hooks/useTasks.ts
│   │   │       import { useState, useEffect, useCallback } from 'react';
│   │   │       import type { Task, TaskFormData } from '@/types';
│   │   │       import { tasksApi } from '@/lib/api/tasks';
│   │   │       
│   │   │       interface UseTasksReturn {
│   │   │         tasks: Task[];
│   │   │         loading: boolean;
│   │   │         error: Error | null;
│   │   │         fetchTasks: () => Promise<void>;
│   │   │         createTask: (data: TaskFormData) => Promise<void>;
│   │   │         refresh: () => Promise<void>;
│   │   │       }
│   │   │       
│   │   │       export const useTasks = (): UseTasksReturn => {
│   │   │         const [tasks, setTasks] = useState<Task[]>([]);
│   │   │         const [loading, setLoading] = useState<boolean>(true);
│   │   │         const [error, setError] = useState<Error | null>(null);
│   │   │       
│   │   │         const fetchTasks = useCallback(async () => {
│   │   │           setLoading(true);
│   │   │           setError(null);
│   │   │           try {
│   │   │             const fetchedTasks = await tasksApi.getTasks();
│   │   │             setTasks(fetchedTasks);
│   │   │           } catch (err: any) {
│   │   │             setError(err);
│   │   │           } finally {
│   │   │             setLoading(false);
│   │   │           }
│   │   │         }, []);
│   │   │       
│   │   │         const createTask = useCallback(async (data: TaskFormData) => {
│   │   │           setLoading(true);
│   │   │           try {
│   │   │             const newTask = await tasksApi.createTask(data);
│   │   │             setTasks(prev => [...prev, newTask]);
│   │   │             setError(null);
│   │   │           } catch (err) {
│   │   │             setError(err as Error);
│   │   │           } finally {
│   │   │             setLoading(false);
│   │   │           }
│   │   │         }, []);
│   │   │       
│   │   │         const refresh = useCallback(async () => {
│   │   │           await fetchTasks();
│   │   │         }, [fetchTasks]);
│   │   │       
│   │   │         useEffect(() => {
│   │   │           fetchTasks();
│   │   │         }, [fetchTasks]);
│   │   │       
│   │   │         return { tasks, loading, error, fetchTasks, createTask, refresh };
│   │   │       };
│   │   ├── useTimeEntries.ts
│   │   │       // src/hooks/useTimeEntries.ts
│   │   │       import { useState, useEffect, useCallback } from 'react';
│   │   │       import type { TimeEntry } from '@/types';
│   │   │       import { timeEntriesApi } from '@/lib/api/timeEntries';
│   │   │       
│   │   │       interface TimeEntryStats {
│   │   │         totalHours: number;
│   │   │         entriesCount: number;
│   │   │         averageEntryDuration: number;
│   │   │       }
│   │   │       
│   │   │       interface UseTimeEntriesReturn {
│   │   │         timeEntries: TimeEntry[];
│   │   │         stats: TimeEntryStats;
│   │   │         loading: boolean;
│   │   │         error: Error | null;
│   │   │         fetchTimeEntries: () => Promise<void>; // Added fetchTimeEntries
│   │   │       }
│   │   │       
│   │   │       export const useTimeEntries = (): UseTimeEntriesReturn => {
│   │   │         const [timeEntries, setTimeEntries] = useState<TimeEntry[]>([]);
│   │   │         const [stats, setStats] = useState<TimeEntryStats>({
│   │   │           totalHours: 0,
│   │   │           entriesCount: 0,
│   │   │           averageEntryDuration: 0,
│   │   │         });
│   │   │         const [loading, setLoading] = useState<boolean>(true);
│   │   │         const [error, setError] = useState<Error | null>(null);
│   │   │       
│   │   │         const fetchTimeEntries = useCallback(async () => {
│   │   │           setLoading(true);
│   │   │           setError(null);
│   │   │           try {
│   │   │             const fetchedTimeEntries = await timeEntriesApi.getTimeEntries();
│   │   │             setTimeEntries(fetchedTimeEntries);
│   │   │       
│   │   │             // Calculate stats
│   │   │             const totalDuration = fetchedTimeEntries.reduce((acc, entry) => acc + (entry.duration || 0), 0);
│   │   │             const entriesCount = fetchedTimeEntries.length;
│   │   │             const averageEntryDuration = entriesCount > 0 ? totalDuration / entriesCount : 0;
│   │   │       
│   │   │             setStats({
│   │   │               totalHours: totalDuration / 60, // Convert minutes to hours
│   │   │               entriesCount,
│   │   │               averageEntryDuration: averageEntryDuration / 60, // Convert minutes to hours
│   │   │             });
│   │   │           } catch (err: any) {
│   │   │             setError(err);
│   │   │           } finally {
│   │   │             setLoading(false);
│   │   │           }
│   │   │         }, []);
│   │   │       
│   │   │         useEffect(() => {
│   │   │           fetchTimeEntries();
│   │   │         }, [fetchTimeEntries]);
│   │   │       
│   │   │         return { timeEntries, stats, loading, error, fetchTimeEntries };
│   │   │       };
│   │   └── useTodoLists.ts
│   │           // src/hooks/useTodoLists.ts
│   │           import { useState, useEffect, useCallback } from 'react';
│   │           import type { TodoList } from '@/types';
│   │           import { todoListsApi } from '@/lib/api/todoLists';
│   │           
│   │           interface UseTodoListsReturn {
│   │             todoLists: TodoList[];
│   │             loading: boolean;
│   │             error: Error | null;
│   │             fetchTodoLists: () => Promise<void>;
│   │             refresh: () => Promise<void>; // Added refresh method
│   │           }
│   │           
│   │           export const useTodoLists = (): UseTodoListsReturn => {
│   │             const [todoLists, setTodoLists] = useState<TodoList[]>([]);
│   │             const [loading, setLoading] = useState<boolean>(true);
│   │             const [error, setError] = useState<Error | null>(null);
│   │           
│   │             const fetchTodoLists = useCallback(async () => {
│   │               setLoading(true);
│   │               setError(null);
│   │               try {
│   │                 const fetchedTodoLists = await todoListsApi.getTodoLists();
│   │                 setTodoLists(fetchedTodoLists);
│   │               } catch (err: any) {
│   │                 setError(err);
│   │               } finally {
│   │                 setLoading(false);
│   │               }
│   │             }, []);
│   │           
│   │             // Add refresh method that calls fetchTodoLists
│   │             const refresh = useCallback(async () => {
│   │               await fetchTodoLists();
│   │             }, [fetchTodoLists]);
│   │           
│   │             useEffect(() => {
│   │               fetchTodoLists();
│   │             }, [fetchTodoLists]);
│   │           
│   │             return { todoLists, loading, error, fetchTodoLists, refresh };
│   │           };
│   └── types/
│       ├── base.ts
│       │       // src/types/base.ts
│       │       
│       │       export interface BaseEntity {
│       │         id: string;
│       │         createdAt: Date;
│       │         updatedAt: Date;
│       │       }
│       │       
│       │       export type Status = 'not-started' | 'active' | 'in-progress' | 'completed' | 'on-hold' | 'cancelled';
│       │       export type Priority = 'low' | 'medium' | 'high';
│       │       // export type TodoListType = 'daily' | 'weekly' | 'monthly'; // Extend as needed
│       ├── dialogs/
│       │   ├── baseDialogProps.ts
│       │   │       // src/types/dialogs/baseDialogProps.ts
│       │   │       import { ReactNode } from 'react';
│       │   │       
│       │   │       export interface BaseDialogProps {
│       │   │         title: string;
│       │   │         description?: string;
│       │   │         trigger: ReactNode;
│       │   │         isOpen?: boolean;
│       │   │         onOpenChange?: (open: boolean) => void;
│       │   │         children: ReactNode;
│       │   │         className?: string;
│       │   │       }
│       │   ├── confirmDialogProps.ts
│       │   │       // src/types/dialogs/confirmDialogProps.ts
│       │   │       import { BaseDialogProps } from './baseDialogProps';
│       │   │       
│       │   │       export interface ConfirmDialogProps extends BaseDialogProps {
│       │   │         confirmLabel?: string;
│       │   │         cancelLabel?: string;
│       │   │         onConfirm: () => Promise<void>;
│       │   │         variant?: 'default' | 'destructive';
│       │   │       }
│       │   ├── formDialogProps.ts
│       │   │       // src/types/dialogs/formDialogProps.ts
│       │   │       import { BaseDialogProps } from './baseDialogProps';
│       │   │       import { UseFormReturn } from '../forms';
│       │   │       
│       │   │       export interface FormDialogProps<T extends Record<string, any>> extends BaseDialogProps {
│       │   │         form: UseFormReturn<T>;
│       │   │         submitLabel?: string;
│       │   │         cancelLabel?: string;
│       │   │         isSubmitting?: boolean;
│       │   │         onSubmit: (values: T) => Promise<void>;
│       │   │       }
│       │   └── index.ts
│       │           // src/types/dialogs/index.ts
│       │           export * from './baseDialogProps';
│       │           export * from './confirmDialogProps';
│       │           export * from './formDialogProps';
│       ├── forms/
│       │   ├── base/
│       │   │   ├── baseFormProps.ts
│       │   │   │       import { FieldConfig } from "../fields";
│       │   │   │       
│       │   │   │       export interface BaseFormProps {
│       │   │   │           title: string;
│       │   │   │           description?: string;
│       │   │   │           triggerButton: {
│       │   │   │             label: string;
│       │   │   │             icon?: React.ReactNode;
│       │   │   │           };
│       │   │   │           fields: FieldConfig[];
│       │   │   │           onSubmit: (data: Record<string, any>) => Promise<void>;
│       │   │   │           defaultValues?: Record<string, any>;
│       │   │   │           submitLabel?: string;
│       │   │   │         }
│       │   │   ├── formConfig.ts
│       │   │   │       
│       │   │   │       // src/types/forms/formConfig.ts
│       │   │   │       export interface FormConfig<T> {
│       │   │   │           initialValues: T;
│       │   │   │           onSubmit: (values: T) => Promise<void>;
│       │   │   │           validate?: (values: T) => Record<string, string>;
│       │   │   │           validateOnChange?: boolean;
│       │   │   │           validateOnBlur?: boolean;
│       │   │   │         }
│       │   │   ├── formHandlers.ts
│       │   │   │       // src/types/forms/formHandlers.ts
│       │   │   │       export interface FormHandlers<T> {
│       │   │   │           handleChange: (
│       │   │   │             e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
│       │   │   │           ) => void;
│       │   │   │           
│       │   │   │           handleBlur: (
│       │   │   │             e: React.FocusEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
│       │   │   │           ) => void;
│       │   │   │           
│       │   │   │           setFieldValue: (field: keyof T, value: any) => void;
│       │   │   │           
│       │   │   │           setFieldError: (field: keyof T, error: string) => void;
│       │   │   │           
│       │   │   │           setFieldTouched: (field: keyof T, isTouched?: boolean) => void;
│       │   │   │           
│       │   │   │           handleSubmit: (e: React.FormEvent<HTMLFormElement>) => Promise<void>;
│       │   │   │           
│       │   │   │           resetForm: () => void;
│       │   │   │         }
│       │   │   ├── formState.ts
│       │   │   │       // src/types/forms/formState.ts
│       │   │   │       export interface FormState<T> {
│       │   │   │           values: T;
│       │   │   │           errors: Record<string, string>;
│       │   │   │           isSubmitting: boolean;
│       │   │   │           touched: Record<keyof T, boolean>;
│       │   │   │           isDirty: boolean;
│       │   │   │         }
│       │   │   ├── index.ts
│       │   │   │       // src/types/forms/base/index.ts
│       │   │   │       export * from './baseFormProps';
│       │   │   │       export * from './formConfig';
│       │   │   │       export * from './formState';
│       │   │   │       export * from './formHandlers';
│       │   │   │       export * from './useFormReturn';
│       │   │   └── useFormReturn.ts
│       │   │           import { FormState } from "./formState";
│       │   │           import { FormHandlers } from "./formHandlers";
│       │   │           
│       │   │           // src/types/forms/useFormReturn.ts
│       │   │           export interface UseFormReturn<T> extends FormState<T>, FormHandlers<T> {
│       │   │               // Additional utility properties
│       │   │               isValid: boolean;
│       │   │               submitCount: number;
│       │   │               
│       │   │               // Additional utility methods
│       │   │               validateForm: () => Promise<Record<string, string>>;
│       │   │               validateField: (field: keyof T) => Promise<string | undefined>;
│       │   │               setValues: (values: T) => void;
│       │   │               setErrors: (errors: Record<string, string>) => void;
│       │   │               setTouched: (touched: Record<keyof T, boolean>) => void;
│       │   │             }
│       │   │             
│       │   ├── fields/
│       │   │   ├── buttonConfig.ts
│       │   │   │       // src/types/forms/fields/buttonConfig.ts
│       │   │   │       
│       │   │   │       // Button style variants
│       │   │   │       export type ButtonVariant = 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
│       │   │   │       export type ButtonSize = 'default' | 'sm' | 'lg' | 'icon';
│       │   │   │       export type ButtonColor = 'blue' | 'green' | 'yellow' | 'purple' | 'indigo';
│       │   │   │       
│       │   │   │       // Base button configuration
│       │   │   │       export interface BaseButtonConfig {
│       │   │   │         label: string;
│       │   │   │         variant?: ButtonVariant;
│       │   │   │         size?: ButtonSize;
│       │   │   │         color?: ButtonColor;
│       │   │   │         icon?: React.ReactNode;
│       │   │   │         disabled?: boolean;
│       │   │   │         className?: string;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Form buttons configuration
│       │   │   │       export interface FormButtonsConfig {
│       │   │   │         submit: BaseButtonConfig;
│       │   │   │         cancel?: BaseButtonConfig;
│       │   │   │         reset?: BaseButtonConfig;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Form buttons props (for the component)
│       │   │   │       export interface FormButtonsProps {
│       │   │   │         config?: FormButtonsConfig;
│       │   │   │         onCancel?: () => void;
│       │   │   │         onReset?: () => void;
│       │   │   │         isSubmitting?: boolean;
│       │   │   │         submitText?: string;
│       │   │   │         cancelText?: string;
│       │   │   │         color?: ButtonColor;
│       │   │   │         disabled?: boolean;
│       │   │   │         className?: string;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Form buttons state
│       │   │   │       export interface FormButtonsState {
│       │   │   │         isSubmitting: boolean;
│       │   │   │         isValid: boolean;
│       │   │   │         isDirty: boolean;
│       │   │   │       }
│       │   │   ├── fieldConfig.ts
│       │   │   │       // src/types/forms/fields/fieldConfig.ts
│       │   │   │       
│       │   │   │       // Base field types supported by the form components
│       │   │   │       export type FieldType = 'text' | 'textarea' | 'select' | 'number' | 'date' | 'datetime-local';
│       │   │   │       
│       │   │   │       // Option type for select fields
│       │   │   │       export interface SelectOption {
│       │   │   │         value: string;
│       │   │   │         label: string;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Base properties shared by all field types
│       │   │   │       export interface BaseFieldConfig {
│       │   │   │         name: string;
│       │   │   │         label: string;  // Making label required for all field types
│       │   │   │         type: FieldType;
│       │   │   │         required?: boolean;
│       │   │   │         placeholder?: string;
│       │   │   │         disabled?: boolean;
│       │   │   │         className?: string;
│       │   │   │         validate?: (value: any) => string | undefined;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Text field specific configuration
│       │   │   │       export interface TextFieldConfig extends BaseFieldConfig {
│       │   │   │         type: 'text';
│       │   │   │         minLength?: number;
│       │   │   │         maxLength?: number;
│       │   │   │         pattern?: string;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Textarea field specific configuration
│       │   │   │       export interface TextAreaFieldConfig extends BaseFieldConfig {
│       │   │   │         type: 'textarea';
│       │   │   │         rows?: number;
│       │   │   │         minLength?: number;
│       │   │   │         maxLength?: number;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Select field specific configuration
│       │   │   │       export interface SelectFieldConfig extends BaseFieldConfig {
│       │   │   │         type: 'select';
│       │   │   │         options: SelectOption[];
│       │   │   │         multiple?: boolean;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Number field specific configuration
│       │   │   │       export interface NumberFieldConfig extends BaseFieldConfig {
│       │   │   │         type: 'number';
│       │   │   │         min?: number;
│       │   │   │         max?: number;
│       │   │   │         step?: number;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Date field specific configuration
│       │   │   │       export interface DateFieldConfig extends BaseFieldConfig {
│       │   │   │         type: 'date' | 'datetime-local';
│       │   │   │         min?: string; // ISO date string
│       │   │   │         max?: string; // ISO date string;
│       │   │   │       }
│       │   │   │       
│       │   │   │       // Union type of all possible field configurations
│       │   │   │       export type FieldConfig = 
│       │   │   │         | TextFieldConfig 
│       │   │   │         | TextAreaFieldConfig 
│       │   │   │         | SelectFieldConfig 
│       │   │   │         | NumberFieldConfig 
│       │   │   │         | DateFieldConfig;
│       │   │   │       
│       │   │   │       // Field value type based on field type
│       │   │   │       export type FieldValue<T extends FieldConfig> = 
│       │   │   │         T extends TextFieldConfig | TextAreaFieldConfig ? string :
│       │   │   │         T extends SelectFieldConfig ? (T['multiple'] extends true ? string[] : string) :
│       │   │   │         T extends NumberFieldConfig ? number :
│       │   │   │         T extends DateFieldConfig ? string :
│       │   │   │         never;
│       │   │   │       
│       │   │   ├── fieldProps.ts
│       │   │   │       // src/types/forms/fields/fieldProps.ts
│       │   │   │       import { FieldConfig } from "./fieldConfig";
│       │   │   │       
│       │   │   │       export interface FormFieldProps {
│       │   │   │           field: FieldConfig;
│       │   │   │           value: any;
│       │   │   │           onChange: (name: string, value: any) => void;
│       │   │   │           onBlur?: (name: string) => void;
│       │   │   │           error?: string;
│       │   │   │           touched?: boolean;
│       │   │   │         }
│       │   │   │         
│       │   │   │         // Form field wrapper component props
│       │   │   │         export interface FormFieldWrapperProps {
│       │   │   │           label: string;
│       │   │   │           required?: boolean;
│       │   │   │           error?: string;
│       │   │   │           children: React.ReactNode;
│       │   │   │           className?: string;
│       │   │   │         }
│       │   │   │         
│       │   │   └── index.ts
│       │   │           export * from './fieldConfig';
│       │   │           export * from './fieldProps';
│       │   │           export * from './buttonConfig';
│       │   └── index.ts
│       │           export * from './base';
│       │           export * from './fields';
│       ├── index.ts
│       │       // src/types/index.ts
│       │       
│       │       export * from './base';
│       │       export * from './project';
│       │       export * from './objective';
│       │       export * from './task';
│       │       export * from './todo';
│       │       export * from './time';
│       │       export * from './forms/base';
│       │       export * from './forms/fields';
│       │       export * from './dialogs';
│       ├── objective/
│       │   ├── index.ts
│       │   │       // src/types/objective/index.ts
│       │   │       
│       │   │       export * from './objective';
│       │   │       export * from './objectiveForm';
│       │   │       export * from './objectiveProgress';
│       │   ├── objective.ts
│       │   │       // src/types/objective/objective.ts
│       │   │       
│       │   │       import { BaseEntity } from '../base';
│       │   │       import { Project } from '../project/project';
│       │   │       import { Task } from '../task/task';
│       │   │       import { Status } from '../base';
│       │   │       
│       │   │       export interface Objective extends BaseEntity {
│       │   │         name: string;
│       │   │         description?: string;
│       │   │         startDate?: Date;
│       │   │         dueDate?: Date;
│       │   │         status: Status;
│       │   │         estimatedHours?: number;
│       │   │         projectId: string;
│       │   │         project?: Project;
│       │   │         tasks?: Task[];
│       │   │       }
│       │   ├── objectiveForm.ts
│       │   │       // src/types/objective/objectiveForm.ts
│       │   │       import { Status } from '../base';
│       │   │       
│       │   │       export interface ObjectiveFormData {
│       │   │         name: string;
│       │   │         description?: string;
│       │   │         projectId: string;
│       │   │         startDate?: string; // ISO string
│       │   │         dueDate?: string;   // ISO string
│       │   │         estimatedHours?: string; // Handle as string, convert to number
│       │   │         status: Status; // Added status
│       │   │       }
│       │   └── objectiveProgress.ts
│       │           // src/types/objective/objectiveProgress.ts
│       │           
│       │           export interface ObjectiveProgress {
│       │             totalTasks: number;
│       │             completedTasks: number;
│       │             progressPercentage: number;
│       │             onTrackTasks: number;
│       │             delayedTasks: number;
│       │           }
│       ├── project/
│       │   ├── index.ts
│       │   │       // src/types/project/index.ts
│       │   │       
│       │   │       export * from './project';
│       │   │       export * from './projectForm';
│       │   │       export * from './projectStats';
│       │   ├── project.ts
│       │   │       // src/types/project/project.ts
│       │   │       
│       │   │       import { BaseEntity } from '../base';
│       │   │       import { Objective } from '../objective/objective';
│       │   │       import { Task } from '../task/task';
│       │   │       import { Status } from '../base';
│       │   │       
│       │   │       export interface Project extends BaseEntity {
│       │   │         name: string;
│       │   │         description?: string;
│       │   │         startDate?: Date;
│       │   │         dueDate?: Date;
│       │   │         status: Status;
│       │   │         estimatedHours?: number;
│       │   │         objectives?: Objective[];
│       │   │         tasks?: Task[];
│       │   │       }
│       │   ├── projectForm.ts
│       │   │       // src/types/project/projectForm.ts
│       │   │       import { Status } from '../base';
│       │   │       
│       │   │       export interface ProjectFormData {
│       │   │         name: string;
│       │   │         description?: string;
│       │   │         startDate?: string; // ISO string for HTML date input
│       │   │         dueDate?: string;   // ISO string for HTML date input
│       │   │         status: Status;
│       │   │         estimatedHours?: string; // Handle as string in form, convert to number
│       │   │       }
│       │   └── projectStats.ts
│       │           // src/types/project/projectStats.ts
│       │           
│       │           export interface ProjectStats {
│       │             totalProjects: number;
│       │             activeProjects: number;
│       │             completedProjects: number;
│       │             // Add more stats as needed
│       │           }
│       ├── task/
│       │   ├── index.ts
│       │   │       export * from './task';
│       │   │       export * from './taskForm';
│       │   ├── task.ts
│       │   │       // src/types/task/task.ts
│       │   │       
│       │   │       import { BaseEntity, Priority, Status } from '../base';
│       │   │       import { Project } from '../project/project';
│       │   │       import { Objective } from '../objective/objective';
│       │   │       import { TodoList } from '../todo/todoList';
│       │   │       import { TimeEntry } from '../time/timeEntry';
│       │   │       
│       │   │       export type TaskStatus = 'todo' | 'in-progress' | 'done';
│       │   │       
│       │   │       export interface Task extends BaseEntity {
│       │   │         content: string;
│       │   │         description?: string;
│       │   │         status: TaskStatus;
│       │   │         priority: Priority;
│       │   │         startDate?: Date;
│       │   │         dueDate?: Date;
│       │   │         estimatedHours?: number;
│       │   │         actualHours?: number;
│       │   │         projectId: string;
│       │   │         project?: Project;
│       │   │         objectiveId?: string;
│       │   │         objective?: Objective | null;
│       │   │         todoLists?: TodoList[];
│       │   │         timeEntries?: TimeEntry[];
│       │   │       }
│       │   └── taskForm.ts
│       │           // src/types/task/taskForm.ts
│       │           import { TaskStatus } from "./task";
│       │           import { Priority } from "../base";
│       │           
│       │           export interface TaskFormData {
│       │             content: string;
│       │             description?: string;
│       │             status: TaskStatus;
│       │             priority: Priority;
│       │             projectId: string;
│       │             objectiveId?: string;
│       │             startDate: string; // ISO string
│       │             dueDate: string;   // ISO string
│       │             estimatedHours?: string; // Handle as string, convert to number
│       │             actualHours?: string;    // Handle as string, convert to number
│       │           }
│       ├── time/
│       │   ├── index.ts
│       │   │       export * from './timeEntry';
│       │   │       export * from './timeEntryForm';
│       │   │       export * from './timeEntryStats';
│       │   │       export * from './timeTracking';
│       │   ├── timeEntry.ts
│       │   │       // src/types/time/timeEntry.ts
│       │   │       
│       │   │       import { BaseEntity } from '../base';
│       │   │       import { Task } from '../task/task';
│       │   │       
│       │   │       export interface TimeEntry extends BaseEntity {
│       │   │         taskId: string;
│       │   │         task: Task;
│       │   │         startTime: Date;
│       │   │         endTime?: Date;
│       │   │         duration?: number; // Duration in minutes
│       │   │         description?: string;
│       │   │       }
│       │   ├── timeEntryForm.ts
│       │   │       // src/types/time/timeEntryForm.ts
│       │   │       
│       │   │       export interface TimeEntryFormData {
│       │   │         taskId: string;
│       │   │         startTime: string; // ISO string
│       │   │         endTime?: string;  // ISO string
│       │   │         description?: string;
│       │   │       }
│       │   ├── timeEntryStats.ts
│       │   │       // src/types/time/timeEntryStats.ts
│       │   │       
│       │   │       export interface TimeEntryStats {
│       │   │         totalDuration: number;       // in minutes
│       │   │         averageDuration: number;     // in minutes
│       │   │         entriesCount: number;
│       │   │         dailyAverage: number;        // in minutes
│       │   │       }
│       │   └── timeTracking.ts
│       │           // src/types/time/timeTracking.ts
│       │           
│       │           export interface TimeTracking {
│       │             startDate: string; // ISO string
│       │             dueDate?: string;  // ISO string
│       │             estimatedHours?: number;
│       │           }
│       └── todo/
│           ├── index.ts
│           │       export * from './todoList';
│           │       export * from './todoListStats';
│           │       export * from './todoListForm';
│           ├── todoList.ts
│           │       // src/types/todoList/todoList.ts
│           │       
│           │       import { BaseEntity } from '../base';
│           │       import { Task } from '../task/task';
│           │       
│           │       export type TodoListStatus = 'active' | 'archived';
│           │       export type TodoListType = 'daily' | 'weekly' | 'monthly'; // Extend as needed
│           │       
│           │       export interface TodoList extends BaseEntity {
│           │         name: string;
│           │         type: TodoListType;
│           │         tasks: Task[];
│           │       }
│           ├── todoListForm.ts
│           │       // src/types/todoList/todoListForm.ts
│           │       import { TodoListType } from "./todoList";
│           │       
│           │       export interface TodoListFormData {
│           │         name: string;
│           │         type: TodoListType;
│           │       }
│           └── todoListStats.ts
│                   // src/types/todoList/todoListStats.ts
│                   
│                   export interface TodoListStats {
│                     totalTodoLists: number;
│                     activeTodoLists: number;
│                     archivedTodoLists: number;
│                     // Add more stats as needed
│                   }
├── tailwind.config.js
│       /** @type {import('tailwindcss').Config} */
│       module.exports = {
│           darkMode: ["class"],
│           content: [
│             './pages/**/*.{ts,tsx}',
│             './components/**/*.{ts,tsx}',
│             './app/**/*.{ts,tsx}',
│             './src/**/*.{ts,tsx}',
│           ],
│           theme: {
│             container: {
│               center: true,
│               padding: "2rem",
│               screens: {
│                 "2xl": "1400px",
│               },
│             },
│             extend: {
│               colors: {
│                 border: "hsl(var(--border))",
│                 input: "hsl(var(--input))",
│                 ring: "hsl(var(--ring))",
│                 background: "hsl(var(--background))",
│                 foreground: "hsl(var(--foreground))",
│                 primary: {
│                   DEFAULT: "hsl(var(--primary))",
│                   foreground: "hsl(var(--primary-foreground))",
│                 },
│                 secondary: {
│                   DEFAULT: "hsl(var(--secondary))",
│                   foreground: "hsl(var(--secondary-foreground))",
│                 },
│                 destructive: {
│                   DEFAULT: "hsl(var(--destructive))",
│                   foreground: "hsl(var(--destructive-foreground))",
│                 },
│                 muted: {
│                   DEFAULT: "hsl(var(--muted))",
│                   foreground: "hsl(var(--muted-foreground))",
│                 },
│                 accent: {
│                   DEFAULT: "hsl(var(--accent))",
│                   foreground: "hsl(var(--accent-foreground))",
│                 },
│                 popover: {
│                   DEFAULT: "hsl(var(--popover))",
│                   foreground: "hsl(var(--popover-foreground))",
│                 },
│                 card: {
│                   DEFAULT: "hsl(var(--card))",
│                   foreground: "hsl(var(--card-foreground))",
│                 },
│               },
│               borderRadius: {
│                 lg: "var(--radius)",
│                 md: "calc(var(--radius) - 2px)",
│                 sm: "calc(var(--radius) - 4px)",
│               },
│               keyframes: {
│                 "accordion-down": {
│                   from: { height: 0 },
│                   to: { height: "var(--radix-accordion-content-height)" },
│                 },
│                 "accordion-up": {
│                   from: { height: "var(--radix-accordion-content-height)" },
│                   to: { height: 0 },
│                 },
│               },
│               animation: {
│                 "accordion-down": "accordion-down 0.2s ease-out",
│                 "accordion-up": "accordion-up 0.2s ease-out",
│               },
│             },
│           },
│           plugins: [require("tailwindcss-animate")],
│         }
├── tailwind.config.ts
│       /** @type {import('tailwindcss').Config} */
│       module.exports = {
│       	darkMode: ["class"],
│       	content: [
│       	  './pages/**/*.{ts,tsx}',
│       	  './components/**/*.{ts,tsx}',
│       	  './app/**/*.{ts,tsx}',
│       	  './src/**/*.{ts,tsx}',
│       	],
│       	theme: {
│           	container: {
│           		center: true,
│           		padding: '2rem',
│           		screens: {
│           			'2xl': '1400px'
│           		}
│           	},
│           	extend: {
│           		colors: {
│           			border: 'hsl(var(--border))',
│           			input: 'hsl(var(--input))',
│           			ring: 'hsl(var(--ring))',
│           			background: 'hsl(var(--background))',
│           			foreground: 'hsl(var(--foreground))',
│           			primary: {
│           				DEFAULT: 'hsl(var(--primary))',
│           				foreground: 'hsl(var(--primary-foreground))'
│           			},
│           			secondary: {
│           				DEFAULT: 'hsl(var(--secondary))',
│           				foreground: 'hsl(var(--secondary-foreground))'
│           			},
│           			destructive: {
│           				DEFAULT: 'hsl(var(--destructive))',
│           				foreground: 'hsl(var(--destructive-foreground))'
│           			},
│           			muted: {
│           				DEFAULT: 'hsl(var(--muted))',
│           				foreground: 'hsl(var(--muted-foreground))'
│           			},
│           			accent: {
│           				DEFAULT: 'hsl(var(--accent))',
│           				foreground: 'hsl(var(--accent-foreground))'
│           			},
│           			popover: {
│           				DEFAULT: 'hsl(var(--popover))',
│           				foreground: 'hsl(var(--popover-foreground))'
│           			},
│           			card: {
│           				DEFAULT: 'hsl(var(--card))',
│           				foreground: 'hsl(var(--card-foreground))'
│           			},
│           			sidebar: {
│           				DEFAULT: 'hsl(var(--sidebar-background))',
│           				foreground: 'hsl(var(--sidebar-foreground))',
│           				primary: 'hsl(var(--sidebar-primary))',
│           				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
│           				accent: 'hsl(var(--sidebar-accent))',
│           				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
│           				border: 'hsl(var(--sidebar-border))',
│           				ring: 'hsl(var(--sidebar-ring))'
│           			}
│           		},
│           		borderRadius: {
│           			lg: 'var(--radius)',
│           			md: 'calc(var(--radius) - 2px)',
│           			sm: 'calc(var(--radius) - 4px)'
│           		},
│           		keyframes: {
│           			'accordion-down': {
│           				from: {
│           					height: 0
│           				},
│           				to: {
│           					height: 'var(--radix-accordion-content-height)'
│           				}
│           			},
│           			'accordion-up': {
│           				from: {
│           					height: 'var(--radix-accordion-content-height)'
│           				},
│           				to: {
│           					height: 0
│           				}
│           			}
│           		},
│           		animation: {
│           			'accordion-down': 'accordion-down 0.2s ease-out',
│           			'accordion-up': 'accordion-up 0.2s ease-out'
│           		}
│           	}
│           },
│       	plugins: [require("tailwindcss-animate")],
│         }
└── tsconfig.json
        {
          "compilerOptions": {
            "target": "ES2017",
            "lib": ["dom", "dom.iterable", "esnext"],
            "allowJs": true,
            "skipLibCheck": true,
            "strict": true,
            "noEmit": true,
            "esModuleInterop": true,
            "module": "esnext",
            "moduleResolution": "bundler",
            "resolveJsonModule": true,
            "isolatedModules": true,
            "jsx": "preserve",
            "incremental": true,
            "plugins": [
              {
                "name": "next"
              }
            ],
            "paths": {
              "@/*": ["./src/*"]
            }
          },
          "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
          "exclude": ["node_modules"]
        }

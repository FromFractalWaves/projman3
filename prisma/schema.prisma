// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id            String      @id @default(cuid())
  name          String
  description   String?
  startDate     DateTime?
  dueDate       DateTime?
  status        String      @default("not-started")
  estimatedHours Float?
  objectives    Objective[]
  tasks         Task[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Objective {
  id            String      @id @default(cuid())
  name          String
  description   String?
  startDate     DateTime?
  dueDate       DateTime?
  status        String      @default("not-started")
  estimatedHours Float?
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  tasks         Task[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Task {
  id            String      @id @default(cuid())
  content       String
  description   String?
  status        String      @default("todo")
  priority      String      @default("medium")
  startDate     DateTime?
  dueDate       DateTime?
  estimatedHours Float?
  actualHours    Float?
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  objective     Objective?  @relation(fields: [objectiveId], references: [id], onDelete: SetNull)
  objectiveId   String?
  todoLists     TodoList[]
  timeEntries   TimeEntry[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model TodoList {
  id        String   @id @default(cuid())
  name      String
  type      String   @default("daily")
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeEntry {
  id          String    @id @default(cuid())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime?
  duration    Float?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}